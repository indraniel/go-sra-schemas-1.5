<rss version="2.0">
	<channel>
		<generator>Site Server v6.0.0 (http://www.squarespace.com)</generator>
		<item>
			<title>Now even works under Mac OS X...</title>
			<category domain="">Engine dev progress</category>
			<link>http://go-ngine.com/blog/2012/10/28/now-even-works-under-mac-os-x</link>
			<pubDate>Sun, 28 Oct 2012 14:48:54 +0000</pubDate>
			<description>&lt;p&gt;under OpenGL 3.2 core profile only, that is. Of course. That means some rather recent version of OS X required -- not the latest but perhaps the one before -- not sure right now which version introduced OpenGL 3.2 for Mac users. Surreal feel to see my OpenGL Go code running as a native binary under OS X&amp;nbsp; :)&lt;br&gt;&lt;/p&gt;&lt;img src=&#34;http://static.squarespace.com/static/507f8e7184aebdcd9b93536a/t/508d46cce4b01df297a0fc23/1351435988930/12-10-28-mac-os-x.png?format=500w&#34; /&gt;&lt;br/&gt;</description>
			<guid isPermaLink="false">507f8e7184aebdcd9b93536a:507f8e7184aebdcd9b93538c:508d45dbe4b09d6a6297afa2</guid>
		</item>
		<item>
			<title>Yay, finally some decent timing stats!</title>
			<category domain="">Engine dev progress</category>
			<link>http://go-ngine.com/blog/2012/10/28/yay-finally-some-decent-timing-stats</link>
			<pubDate>Sun, 28 Oct 2012 08:05:05 +0000</pubDate>
			<description>&lt;p&gt;Now we&#39;re talking milliseconds and nanoseconds!&lt;/p&gt;&lt;img src=&#34;http://static.squarespace.com/static/507f8e7184aebdcd9b93536a/t/508ce760e4b01df297a08642/1351411554167/golang-3d-engine-timing-fps-tracking-benchmark.png?format=500w&#34; /&gt;&lt;br/&gt;</description>
			<guid isPermaLink="false">507f8e7184aebdcd9b93536a:507f8e7184aebdcd9b93538c:508ce732e4b0b3e60effe78f</guid>
		</item>
		<item>
			<title>Hashing uints in Go</title>
			<category domain="">Coding</category>
			<category domain="">Go</category>
			<category domain="">Development</category>
			<link>http://go-ngine.com/blog/2012/10/27/hashing-uints-in-go</link>
			<pubDate>Sat, 27 Oct 2012 05:20:37 +0000</pubDate>
			<description>&lt;p&gt;So I needed to hash three unsigned integers into one integer value uniquely identifying that particular combination of uints, to be used as a &#34;hash key&#34; in a &lt;strong&gt;map[int]sometype&lt;/strong&gt;.&lt;/p&gt;&lt;p&gt;Simple arithmetics (add or mult) are out to uniquely hash different combinations: the set 1,2,4 should produce a different hash key than 1,4,2 and 2,1,4 and 2,4,1 and 4,1,2 and 4,2,1.&lt;br&gt;&lt;/p&gt;&lt;p&gt;Found Robert Jenkins&#39; 96 bit Mix Function with a neat source snippet right there (Java). Implemented in Go and seems to work even though I&#39;m not sure if Golangs &lt;strong&gt;&amp;gt;&amp;gt;&lt;/strong&gt; right-shift operator (spec&#39;d as &lt;strong&gt;integer &amp;gt;&amp;gt; unsigned integer&lt;/strong&gt;) really works like Java&#39;s &lt;strong&gt;&amp;gt;&amp;gt;&amp;gt; &#34;unsigned right shift&#34;&lt;/strong&gt;...&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Update:&lt;/strong&gt; actually by now it dawned on me I can just use a &lt;strong&gt;[3]uint&lt;/strong&gt; as a hash key in Golang here, which is fine in this use-case. Simplicity FTW!&lt;/p&gt;&lt;p&gt;But if you&#39;re curious about this topic, here&#39;s an &lt;a href=&#34;http://programmers.stackexchange.com/questions/49550/which-hashing-algorithm-is-best-for-uniqueness-and-speed/145633#145633&#34;&gt;incredible testing &amp;amp; comparison of hashing algos&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;&lt;/p&gt;</description>
			<guid isPermaLink="false">507f8e7184aebdcd9b93536a:507f8e7184aebdcd9b93538c:508b6f24e4b01df2979e331e</guid>
		</item>
		<item>
			<title>Painless XML parsing in Go; plus, how to analyse your Go source tree for package references</title>
			<category domain="">Coding</category>
			<category domain="">OpenGL</category>
			<category domain="">Go</category>
			<category domain="">Parsing</category>
			<category domain="">Development</category>
			<category domain="">XML</category>
			<link>http://go-ngine.com/blog/2012/10/19/painless-xml-parsing-in-go-plus-how-to-analyse-your-source-tree-for-package-references</link>
			<pubDate>Fri, 19 Oct 2012 15:28:54 +0000</pubDate>
			<description>&lt;p&gt;Getting seriously tricky stuff done in Go is, time and again, surprisingly simple.&lt;/p&gt;&lt;p&gt;Here&#39;s an interesting &#34;convoluted custom&#34; use-case I just had while working on &lt;strong&gt;go:ngine&lt;/strong&gt;. So the engine is supposed to support OpenGL versions 3.2 or higher, but during development, 99% of the time I just run under OpenGL 4.2. To stay in the flow, I don&#39;t want to consult the GL specs every time I use a GL function or enumeration. At the same time, when I push to GitHub, I&#39;d like to make sure any and all GL function or enumeration references in all go:ngine sources are either GL 3.2 or lower, or else wrapped in some conditional logic (ie. &#34;only go ahead here if client GL version supports it&#34;)...&lt;/p&gt;&lt;p&gt;So for talking to OpenGL, go:ngine uses the &lt;a href=&#34;http://github.com/chsc/gogl&#34;&gt;fantastic GoGL ​binding&lt;/a&gt;. Specifically it uses the &lt;strong&gt;gl42&lt;/strong&gt; sub-package -- don&#39;t worry, that package even works under OpenGL 3.2! --- at least, &lt;strong&gt;if&lt;/strong&gt; we &lt;em&gt;(A)&lt;/em&gt; ignore the version-related error (but not any other kind of error) returned by &lt;strong&gt;gl42.Init()&lt;/strong&gt; and &lt;em&gt;(B)&lt;/em&gt; ensure we don&#39;t use API functions or enum values newer than the detected run-time GL version. So part &lt;em&gt;(A)&lt;/em&gt; is easy, but ensuring &lt;em&gt;(B)&lt;/em&gt; at all times (when mostly I happily develop using just my 4.2-capable GPU) could over time become an issue. What to do?&lt;br&gt;&lt;/p&gt;&lt;p&gt;Ideally, I&#39;d have a simple code checker tool that I would run just occasionally -- every other week, or right before major commits. It would:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;run over the entire​ go:ngine code-base&lt;/li&gt;&lt;li&gt;for each &lt;em&gt;.go&lt;/em&gt; source file, collect all its references to the &lt;strong&gt;gl42&lt;/strong&gt; package&lt;br&gt;&lt;/li&gt;&lt;li&gt;record the name of every &lt;strong&gt;gl42&lt;/strong&gt; function or enum value referenced​ (ignoring GL types here since from what I gather none have been added ever since 3.2)&lt;br&gt;&lt;/li&gt;&lt;li&gt;​then for each such tracked reference, check a &lt;a href=&#34;http://bitbucket.org/alfonse/gl-xml-specs/downloads&#34;&gt;GL Specification XML file&lt;/a&gt; for the minimum version that would support it&lt;br&gt;&lt;/li&gt;&lt;li&gt;if the version for the func/enum reference is 3.2 or lower, ignore it​&lt;/li&gt;&lt;li&gt;otherwise, keep it and later show a summary like this:​&lt;/li&gt;&lt;/ol&gt;&lt;blockquote&gt;GL v4.2 used 4x:&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; function TexStorage2D:&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; c:\gd\src\github.com\go3d\go-util\gl\buffers.go&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; c:\gd\src\github.com\go3d\go-util\gl\textures.go&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; function TexStorage3D:&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; c:\gd\src\github.com\go3d\go-util\gl\textures.go&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; enum ATOMIC_COUNTER_BUFFER:&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; c:\gd\src\github.com\go3d\go-util\gl\buffers.go&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; c:\gd\src\github.com\go3d\go-util\gl\counters.go&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; function TexStorage1D:&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; c:\gd\src\github.com\go3d\go-util\gl\textures.go&lt;br&gt;GL v4.0 used 2x:&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; enum TESS_CONTROL_SHADER:&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; c:\gd\src\github.com\go3d\go-ngine\client\glcore\shaders.go&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; enum TESS_EVALUATION_SHADER:&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; c:\gd\src\github.com\go3d\go-ngine\client\glcore\shaders.go​&lt;/blockquote&gt;&lt;p&gt;The above is actually real output of said tool, because I just wrote it today in just a few hours and it&#39;s only a 100 lines or so in total! That&#39;s why I find Go amazingly fun to work with... (OK,&amp;nbsp; maybe JavaScript could have done all this half the space, but I like statically-typed native-compiled code so anyway and Go&#39;s strict compiler saved me from a few bugs just right there today.)&lt;br&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Parsing all &lt;em&gt;.go&lt;/em&gt; source files was surprisingly simple just working off the &lt;a href=&#34;http://golang.org/pkg/go/ast/&#34;&gt;go/ast&lt;/a&gt; and &lt;a href=&#34;http://go-ngine.com#&#34;&gt;go/parser&lt;/a&gt; package examples.&lt;/li&gt;&lt;li&gt; Parsing the XML GL-specification file using the &lt;a href=&#34;http://golang.org/pkg/encoding/xml/&#34;&gt;encoding/xml&lt;/a&gt; package &lt;strong&gt;would have been a major pain point&lt;/strong&gt;, but before even taking the trouble to write out all XML tags as Go structs (I didn&#39;t &lt;em&gt;really&lt;/em&gt; want to &#34;unmarshal&#34; anything, thanks very much...), I luckily came across the awesome &lt;a href=&#34;http://github.com/go-forks/go-pkg-xmlx&#34;&gt;go-pkg-xmlx&lt;/a&gt; package -- it made loading and searching the 1.4MB spec file painless and also crucially, &lt;strong&gt;Just-Worked&lt;/strong&gt; right off the bat! Kudos to &lt;a href=&#34;http://github.com/jteeuwen/&#34;&gt;jteeuwen&lt;/a&gt;, once again great work and a superb contribution to the Go eco-system. (go:ngine also uses his &lt;a href=&#34;http://github.com/go-gl/glfw&#34;&gt;Go GLFW binding&lt;/a&gt;, which also works a &lt;em&gt;charm&lt;/em&gt; across platforms. Yay!)&lt;br&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;If you wanna see (or use) the code to parse the .go source tree, load the XML spec and checks any and all &lt;strong&gt;gogl/gl42​&lt;/strong&gt; references across a given code-base against specific OpenGL versions, &lt;a href=&#34;http://github.com/go3d/go-ngine/tree/master/_tools/gl_imp_parser_version_checker&#34;&gt;it&#39;s right here on GitHub&lt;/a&gt;.&lt;br&gt;&lt;/p&gt;</description>
			<guid isPermaLink="false">507f8e7184aebdcd9b93536a:507f8e7184aebdcd9b93538c:508171bce4b09ec41a87ca83</guid>
		</item>
		<item>
			<title>First post! Actually, post zero.</title>
			<link>http://go-ngine.com/blog/2012/10/18/first-post-actually-post-zero</link>
			<pubDate>Thu, 18 Oct 2012 07:30:53 +0000</pubDate>
			<description>&lt;p&gt;​I&#39;m too eager to get back to coding this thing, so I&#39;ll catch up with y&#39;all here later (yeah, yeah)... just testing the blogging engine here.&lt;br&gt;&lt;/p&gt;</description>
			<guid isPermaLink="false">507f8e7184aebdcd9b93536a:507f8e7184aebdcd9b93538c:507fb02b84aebdcd9b9396e0</guid>
		</item>
		<language>en-US</language>
		<title>DevBlog - go:ngine</title>
		<link>http://go-ngine.com/blog/</link>
		<description></description>
		<lastBuildDate>Sun, 28 Oct 2012 14:53:48 +0000</lastBuildDate>
	</channel>
</rss>
