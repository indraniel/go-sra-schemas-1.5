package gt



//	Appends `v` to `*ref` only if `*ref` does not already contain `v`.
func __N__AppendUnique(ref *[]__T__, v __T__) {
	for _, sv := range *ref {
		if sv == v {
			return
		}
	}
	*ref = append(*ref, v)
}

//	Appends each value in `vals` to `*ref` only `*ref` does not already contain it.
func __N__AppendUniques(ref *[]__T__, vals ...__T__) {
	for _, v := range vals {
		__N__AppendUnique(ref, v)
	}
}

//	Returns the position of `val` in `slice`.
func __N__At(slice []__T__, val __T__) int {
	for i, v := range slice {
		if v == val {
			return i
		}
	}
	return -1
}

//	Converts `src` to `dst`.
//
//	If `sparse` is `true`, then only successfully converted `__T__` values are placed
//	in `dst`, so there may not be a 1-to-1 correspondence of `dst` to `src` in length or indices.
//
//	If `sparse` is `false`, `dst` has the same length as `src` and non-convertable values remain zeroed.
func __N__Convert(src []interface{}, sparse bool) (dst []__T__) {
	if sparse {
		var (
			val __T__
			ok  bool
		)
		for _, v := range src {
			if val, ok = v.(__T__); ok {
				dst = append(dst, val)
			}
		}
	} else {
		dst = make([]__T__, len(src))
		for i, v := range src {
			dst[i], _ = v.(__T__)
		}
	}
	return
}

//	Sets each `__T__` in `sl` to the result of passing it to each `apply` func.
//	Although `sl` is modified in-place, it is also returned for convenience.
func __N__Each(sl []__T__, apply ...func(__T__) __T__) []__T__ {
	for _, fn := range apply {
		for i, _ := range sl {
			sl[i] = fn(sl[i])
		}
	}
	return sl
}

//	Calls `__N__SetCap` only if the current `cap(*ref)` is less than the specified `capacity`.
func __N__EnsureCap(ref *[]__T__, capacity int) {
	if cap(*ref) < capacity {
		__N__SetCap(ref, capacity)
	}
}

//	Calls `__N__SetLen` only if the current `len(*ref)` is less than the specified `length`.
func __N__EnsureLen(ref *[]__T__, length int) {
	if len(*ref) < length {
		__N__SetLen(ref, length)
	}
}

//	Returns whether `one` and `two` only contain identical values, regardless of ordering.
func __N__Equivalent(one, two []__T__) bool {
	if len(one) != len(two) {
		return false
	}
	for _, v := range one {
		if __N__At(two, v) < 0 {
			return false
		}
	}
	return true
}

//	Returns whether `val` is in `slice`.
func __N__Has(slice []__T__, val __T__) bool {
	return __N__At(slice, val) >= 0
}

//	Returns whether at least one of the specified `vals` is contained in `slice`.
func __N__HasAny(slice []__T__, vals ...__T__) bool {
	for _, v1 := range vals {
		for _, v2 := range slice {
			if v1 == v2 {
				return true
			}
		}
	}
	return false
}

//	Removes the first occurrence of `v` encountered in `*ref`, or all occurrences if `all` is `true`.
func __N__Remove(ref *[]__T__, v __T__, all bool) {
	for i := 0; i < len(*ref); i++ {
		if (*ref)[i] == v {
			before, after := (*ref)[:i], (*ref)[i+1:]
			*ref = append(before, after...)
			if !all {
				break
			}
		}
	}
}

//	Sets `*ref` to a copy of `*ref` with the specified `capacity`.
func __N__SetCap(ref *[]__T__, capacity int) {
	nu := make([]__T__, len(*ref), capacity)
	copy(nu, *ref)
	*ref = nu
}

//	Sets `*ref` to a copy of `*ref` with the specified `length`.
func __N__SetLen(ref *[]__T__, length int) {
	nu := make([]__T__, length)
	copy(nu, *ref)
	*ref = nu
}

//	Removes all specified `withoutVals` from `slice`.
func __N__Without(slice []__T__, keepOrder bool, withoutVals ...__T__) []__T__ {
	if len(withoutVals) > 0 {
		var pos int
		for _, w := range withoutVals {
			for pos = __N__At(slice, w); pos >= 0; pos = __N__At(slice, w) {
				if keepOrder {
					slice = append(slice[:pos], slice[pos+1:]...)
				} else {
					slice[pos] = slice[len(slice)-1]
					slice = slice[:len(slice)-1]
				}
			}
		}
	}
	return slice
}
