package gt

import "sort"

type sort__N__ struct {
	descending bool
	slice      []__T__
}

//	Implements `sort.Interface.Len`.
func (me *sort__N__) Len() int { return len(me.slice) }

//	Implements `sort.Interface.Less`.
func (me *sort__N__) Less(i, j int) bool {
	if me.descending {
		return me.slice[j] < me.slice[i]
	}
	return me.slice[i] < me.slice[j]
}

//	Implements `sort.Interface.Swap`.
func (me *sort__N__) Swap(i, j int) { me.slice[i], me.slice[j] = me.slice[j], me.slice[i] }

//	Returns `sl` sorted by ascending order.
func __N__SortAsc(sl []__T__) []__T__ {
	me := &sort__N__{descending: false, slice: sl}
	sort.Sort(me)
	return me.slice
}

//	Returns `sl` sorted by decending order.
func __N__SortDesc(sl []__T__) []__T__ {
	me := &sort__N__{descending: true, slice: sl}
	sort.Sort(me)
	return me.slice
}
