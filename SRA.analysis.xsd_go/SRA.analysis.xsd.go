//	Auto-generated by the "go-xsd" package located at:
//		github.com/metaleap/go-xsd
//	Comments on types and fields (if any) are from the XSD file located at:
//		SRA.analysis.xsd
package go_SraAnalysis

import (
	xsdt "github.com/metaleap/go-xsd/types"
)

type XsdtString struct{ string }

//	submission of this document type. If center_name is specified, the name should be unique in all submissions from that center of
//	this document type.
type XsdGoPkgHasAttr_Alias_XsdtString_ struct {
	//	Submitter designated name of the SRA document of this type. At minimum alias should be unique throughout the
	//	submission of this document type. If center_name is specified, the name should be unique in all submissions from that center of
	//	this document type.
	Alias xsdt.String `xml:"alias,attr"`
}

//	Owner authority of this document and namespace for submitter's name of this document. If not provided, then the
//	submitter is regarded as "Individual" and document resolution can only happen within the submission.
type XsdGoPkgHasAttr_CenterName_XsdtString_ struct {
	//	Owner authority of this document and namespace for submitter's name of this document. If not provided, then the
	//	submitter is regarded as "Individual" and document resolution can only happen within the submission.
	CenterName xsdt.String `xml:"center_name,attr"`
}

//	Broker authority of this document. If not provided, then the broker is considered "direct".
type XsdGoPkgHasAttr_BrokerName_XsdtString_ struct {
	//	Broker authority of this document. If not provided, then the broker is considered "direct".
	BrokerName xsdt.String `xml:"broker_name,attr"`
}

//	The document's accession as assigned by the Home Archive.
type XsdGoPkgHasAttr_Accession_XsdtString_ struct {
	//	The document's accession as assigned by the Home Archive.
	Accession xsdt.String `xml:"accession,attr"`
}

type XsdGoPkgHasAtts_NameGroup struct {
	//	Broker authority of this document. If not provided, then the broker is considered "direct".
	XsdGoPkgHasAttr_BrokerName_XsdtString_

	//	The document's accession as assigned by the Home Archive.
	XsdGoPkgHasAttr_Accession_XsdtString_

	//	Submitter designated name of the SRA document of this type. At minimum alias should be unique throughout the
	//	submission of this document type. If center_name is specified, the name should be unique in all submissions from that center of
	//	this document type.
	XsdGoPkgHasAttr_Alias_XsdtString_

	//	Owner authority of this document and namespace for submitter's name of this document. If not provided, then the
	//	submitter is regarded as "Individual" and document resolution can only happen within the submission.
	XsdGoPkgHasAttr_CenterName_XsdtString_
}

//	Identifies a record by name that is known within the namespace defined by attribute "refcenter" Use this field
//	when referencing an object for which an accession has not yet been issued.
type XsdGoPkgHasAttr_Refname_XsdtString_ struct {
	//	Identifies a record by name that is known within the namespace defined by attribute "refcenter" Use this field
	//	when referencing an object for which an accession has not yet been issued.
	Refname xsdt.String `xml:"refname,attr"`
}

//	The center namespace of the attribute "refname". When absent, the namespace is assumed to be the current
//	submission.
type XsdGoPkgHasAttr_Refcenter_XsdtString_ struct {
	//	The center namespace of the attribute "refname". When absent, the namespace is assumed to be the current
	//	submission.
	Refcenter xsdt.String `xml:"refcenter,attr"`
}

type XsdGoPkgHasAtts_RefNameGroup struct {
	//	Identifies a record by its accession. The scope of resolution is the entire Archive.
	XsdGoPkgHasAttr_Accession_XsdtString_

	//	Identifies a record by name that is known within the namespace defined by attribute "refcenter" Use this field
	//	when referencing an object for which an accession has not yet been issued.
	XsdGoPkgHasAttr_Refname_XsdtString_

	//	The center namespace of the attribute "refname". When absent, the namespace is assumed to be the current
	//	submission.
	XsdGoPkgHasAttr_Refcenter_XsdtString_
}

//	An ANALYSIS_SET is a container of analysis objects with a shared namespace.
//	A SRA analysis object captures secondary analysis results from a sequence read dataset. This analysis can the
//	results of short reads used in assembly, alignment, abundance instrumentation. The analysis can also be a list of reads, or a fasta
//	file of trimmed reads associated with the experiment. The analysis can be technical data represented in a tab separated file
//	(spreadsheet).
//	List of primary and alternate identifiers including those records replacing or replaced by this record.
//	Set of record identifiers.
//	primary accession of the record in one of INSDC SRA archives.
//	Alternative/explanatory description of the same object/identifier.
type XsdGoPkgHasAttr_Label_XsdtString_ struct {
	//	Alternative/explanatory description of the same object/identifier.
	Label xsdt.String `xml:"label,attr"`
}

type TNameAndLabelType struct {
	XsdtString

	//	Alternative/explanatory description of the same object/identifier.
	XsdGoPkgHasAttr_Label_XsdtString_
}

//	If the WalkHandlers.TNameAndLabelType function is not nil (ie. was set by outside code), calls it with this TNameAndLabelType instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TNameAndLabelType instance.
func (me *TNameAndLabelType) Walk() (err error) {
	if fn := WalkHandlers.TNameAndLabelType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_PrimaryIDsequenceIdentifierTypeschema_PrimaryId_TNameAndLabelType_ struct {
	//	primary accession of the record in one of INSDC SRA archives.
	PrimaryId *TNameAndLabelType `xml:"PRIMARY_ID"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_PrimaryIDsequenceIdentifierTypeschema_PrimaryId_TNameAndLabelType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_PrimaryIDsequenceIdentifierTypeschema_PrimaryId_TNameAndLabelType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_PrimaryIDsequenceIdentifierTypeschema_PrimaryId_TNameAndLabelType_ instance.
func (me *XsdGoPkgHasElem_PrimaryIDsequenceIdentifierTypeschema_PrimaryId_TNameAndLabelType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_PrimaryIDsequenceIdentifierTypeschema_PrimaryId_TNameAndLabelType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.PrimaryId.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	A secondary or defunct primary key in an INSDC primary data database.
type XsdGoPkgHasElems_SecondaryIDsequenceIdentifierTypeschema_SecondaryId_TNameAndLabelType_ struct {
	//	A secondary or defunct primary key in an INSDC primary data database.
	SecondaryIds []*TNameAndLabelType `xml:"SECONDARY_ID"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_SecondaryIDsequenceIdentifierTypeschema_SecondaryId_TNameAndLabelType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_SecondaryIDsequenceIdentifierTypeschema_SecondaryId_TNameAndLabelType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_SecondaryIDsequenceIdentifierTypeschema_SecondaryId_TNameAndLabelType_ instance.
func (me *XsdGoPkgHasElems_SecondaryIDsequenceIdentifierTypeschema_SecondaryId_TNameAndLabelType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_SecondaryIDsequenceIdentifierTypeschema_SecondaryId_TNameAndLabelType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.SecondaryIds {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	An identifier from a public non-SRA resource. @namespace would be an official short name of that
//	resource.
//	A string value that constrains the domain of named identifiers (namespace).
type XsdGoPkgHasAttr_Namespace_XsdtString_ struct {
	//	A string value that constrains the domain of named identifiers (namespace).
	Namespace xsdt.String `xml:"namespace,attr"`
}

type TQualifiedNameType struct {
	TNameAndLabelType

	//	A string value that constrains the domain of named identifiers (namespace).
	XsdGoPkgHasAttr_Namespace_XsdtString_
}

//	If the WalkHandlers.TQualifiedNameType function is not nil (ie. was set by outside code), calls it with this TQualifiedNameType instance as the single argument. Then calls the Walk() method on 1/2 embed(s) and 0/0 field(s) belonging to this TQualifiedNameType instance.
func (me *TQualifiedNameType) Walk() (err error) {
	if fn := WalkHandlers.TQualifiedNameType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TNameAndLabelType.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_ExternalIDsequenceIdentifierTypeschema_ExternalId_TQualifiedNameType_ struct {
	//	An identifier from a public non-SRA resource. @namespace would be an official short name of that
	//	resource.
	ExternalIds []*TQualifiedNameType `xml:"EXTERNAL_ID"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_ExternalIDsequenceIdentifierTypeschema_ExternalId_TQualifiedNameType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ExternalIDsequenceIdentifierTypeschema_ExternalId_TQualifiedNameType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ExternalIDsequenceIdentifierTypeschema_ExternalId_TQualifiedNameType_ instance.
func (me *XsdGoPkgHasElems_ExternalIDsequenceIdentifierTypeschema_ExternalId_TQualifiedNameType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_ExternalIDsequenceIdentifierTypeschema_ExternalId_TQualifiedNameType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.ExternalIds {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	A submitter provided identifier of the (new) record. used in submisison process and replaced by primary archive
//	id on successfull load. @namespace is optional and may refer to submitter private database or LIMS
//	identifier.
type XsdGoPkgHasElems_SubmitterIDsequenceIdentifierTypeschema_SubmitterId_TQualifiedNameType_ struct {
	//	A submitter provided identifier of the (new) record. used in submisison process and replaced by primary archive
	//	id on successfull load. @namespace is optional and may refer to submitter private database or LIMS
	//	identifier.
	SubmitterIds []*TQualifiedNameType `xml:"SUBMITTER_ID"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_SubmitterIDsequenceIdentifierTypeschema_SubmitterId_TQualifiedNameType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_SubmitterIDsequenceIdentifierTypeschema_SubmitterId_TQualifiedNameType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_SubmitterIDsequenceIdentifierTypeschema_SubmitterId_TQualifiedNameType_ instance.
func (me *XsdGoPkgHasElems_SubmitterIDsequenceIdentifierTypeschema_SubmitterId_TQualifiedNameType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_SubmitterIDsequenceIdentifierTypeschema_SubmitterId_TQualifiedNameType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.SubmitterIds {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	A universally unique identifier that requires no namespace.
type XsdGoPkgHasElems_UUIDsequenceIdentifierTypeschema_Uuid_TNameAndLabelType_ struct {
	//	A universally unique identifier that requires no namespace.
	Uuids []*TNameAndLabelType `xml:"UUID"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_UUIDsequenceIdentifierTypeschema_Uuid_TNameAndLabelType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_UUIDsequenceIdentifierTypeschema_Uuid_TNameAndLabelType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_UUIDsequenceIdentifierTypeschema_Uuid_TNameAndLabelType_ instance.
func (me *XsdGoPkgHasElems_UUIDsequenceIdentifierTypeschema_Uuid_TNameAndLabelType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_UUIDsequenceIdentifierTypeschema_Uuid_TNameAndLabelType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Uuids {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TIdentifierType struct {
	//	A submitter provided identifier of the (new) record. used in submisison process and replaced by primary archive
	//	id on successfull load. @namespace is optional and may refer to submitter private database or LIMS
	//	identifier.
	XsdGoPkgHasElems_SubmitterIDsequenceIdentifierTypeschema_SubmitterId_TQualifiedNameType_

	//	A universally unique identifier that requires no namespace.
	XsdGoPkgHasElems_UUIDsequenceIdentifierTypeschema_Uuid_TNameAndLabelType_

	//	primary accession of the record in one of INSDC SRA archives.
	XsdGoPkgHasElem_PrimaryIDsequenceIdentifierTypeschema_PrimaryId_TNameAndLabelType_

	//	A secondary or defunct primary key in an INSDC primary data database.
	XsdGoPkgHasElems_SecondaryIDsequenceIdentifierTypeschema_SecondaryId_TNameAndLabelType_

	//	An identifier from a public non-SRA resource. @namespace would be an official short name of that
	//	resource.
	XsdGoPkgHasElems_ExternalIDsequenceIdentifierTypeschema_ExternalId_TQualifiedNameType_
}

//	If the WalkHandlers.TIdentifierType function is not nil (ie. was set by outside code), calls it with this TIdentifierType instance as the single argument. Then calls the Walk() method on 5/5 embed(s) and 0/0 field(s) belonging to this TIdentifierType instance.
func (me *TIdentifierType) Walk() (err error) {
	if fn := WalkHandlers.TIdentifierType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_PrimaryIDsequenceIdentifierTypeschema_PrimaryId_TNameAndLabelType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_SecondaryIDsequenceIdentifierTypeschema_SecondaryId_TNameAndLabelType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_ExternalIDsequenceIdentifierTypeschema_ExternalId_TQualifiedNameType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_SubmitterIDsequenceIdentifierTypeschema_SubmitterId_TQualifiedNameType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_UUIDsequenceIdentifierTypeschema_Uuid_TNameAndLabelType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_IDENTIFIERSsequenceAnalysisTypeschema_Identifiers_TIdentifierType_ struct {
	//	List of primary and alternate identifiers including those records replacing or replaced by this record.
	Identifiers *TIdentifierType `xml:"IDENTIFIERS"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_IDENTIFIERSsequenceAnalysisTypeschema_Identifiers_TIdentifierType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_IDENTIFIERSsequenceAnalysisTypeschema_Identifiers_TIdentifierType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_IDENTIFIERSsequenceAnalysisTypeschema_Identifiers_TIdentifierType_ instance.
func (me *XsdGoPkgHasElem_IDENTIFIERSsequenceAnalysisTypeschema_Identifiers_TIdentifierType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_IDENTIFIERSsequenceAnalysisTypeschema_Identifiers_TIdentifierType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Identifiers.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Title of the analyis object which will be displayed in short form in the Analysis browser and in database
//	search results.
type XsdGoPkgHasElem_TITLEsequenceAnalysisTypeschema_Title_XsdtString_ struct {
	//	Title of the analyis object which will be displayed in short form in the Analysis browser and in database
	//	search results.
	Title xsdt.String `xml:"TITLE"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_TITLEsequenceAnalysisTypeschema_Title_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_TITLEsequenceAnalysisTypeschema_Title_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_TITLEsequenceAnalysisTypeschema_Title_XsdtString_ instance.
func (me *XsdGoPkgHasElem_TITLEsequenceAnalysisTypeschema_Title_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_TITLEsequenceAnalysisTypeschema_Title_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Supported analysis types.
//	A placement of sequences including trace, SRA, GI records into a multiple alignment from which a
//	consensus is computed. This branch will be further specified in the future.
//	Identify the tools and processing steps used to produce the de novo assembly.
//	Identify the tools and processing steps used to produce the de novo assembly.
//	The PipelineType identifies the sequence or tree of actions to process the sequencing data.
//	Name of the program or process for primary analysis. This may include a test or condition that leads to
//	branching in the workflow.
type XsdGoPkgHasElem_PROGRAMsequencePIPESECTIONsequencePipelineTypeschema_Program_XsdtString_ struct {
	//	Name of the program or process for primary analysis. This may include a test or condition that leads to
	//	branching in the workflow.
	Program xsdt.String `xml:"PROGRAM"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_PROGRAMsequencePIPESECTIONsequencePipelineTypeschema_Program_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_PROGRAMsequencePIPESECTIONsequencePipelineTypeschema_Program_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_PROGRAMsequencePIPESECTIONsequencePipelineTypeschema_Program_XsdtString_ instance.
func (me *XsdGoPkgHasElem_PROGRAMsequencePIPESECTIONsequencePipelineTypeschema_Program_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_PROGRAMsequencePIPESECTIONsequencePipelineTypeschema_Program_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Version of the program or process for primary analysis.
type XsdGoPkgHasElem_VERSIONsequencePIPESECTIONsequencePipelineTypeschema_Version_XsdtString_ struct {
	//	Version of the program or process for primary analysis.
	Version xsdt.String `xml:"VERSION"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_VERSIONsequencePIPESECTIONsequencePipelineTypeschema_Version_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_VERSIONsequencePIPESECTIONsequencePipelineTypeschema_Version_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_VERSIONsequencePIPESECTIONsequencePipelineTypeschema_Version_XsdtString_ instance.
func (me *XsdGoPkgHasElem_VERSIONsequencePIPESECTIONsequencePipelineTypeschema_Version_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_VERSIONsequencePIPESECTIONsequencePipelineTypeschema_Version_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Notes about the program or process for primary analysis.
type XsdGoPkgHasElem_NOTESsequencePIPESECTIONsequencePipelineTypeschema_Notes_XsdtString_ struct {
	//	Notes about the program or process for primary analysis.
	Notes xsdt.String `xml:"NOTES"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_NOTESsequencePIPESECTIONsequencePipelineTypeschema_Notes_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_NOTESsequencePIPESECTIONsequencePipelineTypeschema_Notes_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_NOTESsequencePIPESECTIONsequencePipelineTypeschema_Notes_XsdtString_ instance.
func (me *XsdGoPkgHasElem_NOTESsequencePIPESECTIONsequencePipelineTypeschema_Notes_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_NOTESsequencePIPESECTIONsequencePipelineTypeschema_Notes_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Name of the processing pipeline section.
type XsdGoPkgHasAttr_SectionName_XsdtString_ struct {
	//	Name of the processing pipeline section.
	SectionName xsdt.String `xml:"section_name,attr"`
}

//	Lexically ordered value that allows for the pipe section to be hierarchically ordered. The float
//	primitive data type is used to allow for pipe sections to be inserted later on.
type XsdGoPkgHasElem_StepINDEXsequencePIPESECTIONsequencePipelineTypeschema_StepIndex_XsdtString_ struct {
	//	Lexically ordered value that allows for the pipe section to be hierarchically ordered. The float
	//	primitive data type is used to allow for pipe sections to be inserted later on.
	StepIndex xsdt.String `xml:"STEP_INDEX"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_StepINDEXsequencePIPESECTIONsequencePipelineTypeschema_StepIndex_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_StepINDEXsequencePIPESECTIONsequencePipelineTypeschema_StepIndex_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_StepINDEXsequencePIPESECTIONsequencePipelineTypeschema_StepIndex_XsdtString_ instance.
func (me *XsdGoPkgHasElem_StepINDEXsequencePIPESECTIONsequencePipelineTypeschema_StepIndex_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_StepINDEXsequencePIPESECTIONsequencePipelineTypeschema_StepIndex_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	STEP_INDEX of the previous step in the workflow. Set toNIL if the first pipe section.
type XsdGoPkgHasElems_PrevStepINDEXsequencePIPESECTIONsequencePipelineTypeschema_PrevStepIndex_XsdtString_ struct {
	//	STEP_INDEX of the previous step in the workflow. Set toNIL if the first pipe section.
	PrevStepIndexs []xsdt.String `xml:"PREV_STEP_INDEX"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_PrevStepINDEXsequencePIPESECTIONsequencePipelineTypeschema_PrevStepIndex_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_PrevStepINDEXsequencePIPESECTIONsequencePipelineTypeschema_PrevStepIndex_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_PrevStepINDEXsequencePIPESECTIONsequencePipelineTypeschema_PrevStepIndex_XsdtString_ instance.
func (me *XsdGoPkgHasElems_PrevStepINDEXsequencePIPESECTIONsequencePipelineTypeschema_PrevStepIndex_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_PrevStepINDEXsequencePIPESECTIONsequencePipelineTypeschema_PrevStepIndex_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdPipelineTypeSequencePipeSection struct {
	//	STEP_INDEX of the previous step in the workflow. Set toNIL if the first pipe section.
	XsdGoPkgHasElems_PrevStepINDEXsequencePIPESECTIONsequencePipelineTypeschema_PrevStepIndex_XsdtString_

	//	Name of the program or process for primary analysis. This may include a test or condition that leads to
	//	branching in the workflow.
	XsdGoPkgHasElem_PROGRAMsequencePIPESECTIONsequencePipelineTypeschema_Program_XsdtString_

	//	Version of the program or process for primary analysis.
	XsdGoPkgHasElem_VERSIONsequencePIPESECTIONsequencePipelineTypeschema_Version_XsdtString_

	//	Notes about the program or process for primary analysis.
	XsdGoPkgHasElem_NOTESsequencePIPESECTIONsequencePipelineTypeschema_Notes_XsdtString_

	//	Name of the processing pipeline section.
	XsdGoPkgHasAttr_SectionName_XsdtString_

	//	Lexically ordered value that allows for the pipe section to be hierarchically ordered. The float
	//	primitive data type is used to allow for pipe sections to be inserted later on.
	XsdGoPkgHasElem_StepINDEXsequencePIPESECTIONsequencePipelineTypeschema_StepIndex_XsdtString_
}

//	If the WalkHandlers.TxsdPipelineTypeSequencePipeSection function is not nil (ie. was set by outside code), calls it with this TxsdPipelineTypeSequencePipeSection instance as the single argument. Then calls the Walk() method on 5/6 embed(s) and 0/0 field(s) belonging to this TxsdPipelineTypeSequencePipeSection instance.
func (me *TxsdPipelineTypeSequencePipeSection) Walk() (err error) {
	if fn := WalkHandlers.TxsdPipelineTypeSequencePipeSection; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_NOTESsequencePIPESECTIONsequencePipelineTypeschema_Notes_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_StepINDEXsequencePIPESECTIONsequencePipelineTypeschema_StepIndex_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_PrevStepINDEXsequencePIPESECTIONsequencePipelineTypeschema_PrevStepIndex_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_PROGRAMsequencePIPESECTIONsequencePipelineTypeschema_Program_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_VERSIONsequencePIPESECTIONsequencePipelineTypeschema_Version_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_PipeSECTIONsequencePipelineTypeschema_PipeSection_TxsdPipelineTypeSequencePipeSection_ struct {
	PipeSections []*TxsdPipelineTypeSequencePipeSection `xml:"PIPE_SECTION"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_PipeSECTIONsequencePipelineTypeschema_PipeSection_TxsdPipelineTypeSequencePipeSection_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_PipeSECTIONsequencePipelineTypeschema_PipeSection_TxsdPipelineTypeSequencePipeSection_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_PipeSECTIONsequencePipelineTypeschema_PipeSection_TxsdPipelineTypeSequencePipeSection_ instance.
func (me *XsdGoPkgHasElems_PipeSECTIONsequencePipelineTypeschema_PipeSection_TxsdPipelineTypeSequencePipeSection_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_PipeSECTIONsequencePipelineTypeschema_PipeSection_TxsdPipelineTypeSequencePipeSection_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.PipeSections {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TPipelineType struct {
	XsdGoPkgHasElems_PipeSECTIONsequencePipelineTypeschema_PipeSection_TxsdPipelineTypeSequencePipeSection_
}

//	If the WalkHandlers.TPipelineType function is not nil (ie. was set by outside code), calls it with this TPipelineType instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this TPipelineType instance.
func (me *TPipelineType) Walk() (err error) {
	if fn := WalkHandlers.TPipelineType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_PipeSECTIONsequencePipelineTypeschema_PipeSection_TxsdPipelineTypeSequencePipeSection_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_PIPELINEallDefaultProcessingTypeschema_Pipeline_TPipelineType_ struct {
	Pipeline *TPipelineType `xml:"PIPELINE"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_PIPELINEallDefaultProcessingTypeschema_Pipeline_TPipelineType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_PIPELINEallDefaultProcessingTypeschema_Pipeline_TPipelineType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_PIPELINEallDefaultProcessingTypeschema_Pipeline_TPipelineType_ instance.
func (me *XsdGoPkgHasElem_PIPELINEallDefaultProcessingTypeschema_Pipeline_TPipelineType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_PIPELINEallDefaultProcessingTypeschema_Pipeline_TPipelineType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Pipeline.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TDefaultProcessingType struct {
	XsdGoPkgHasElem_PIPELINEallDefaultProcessingTypeschema_Pipeline_TPipelineType_
}

//	If the WalkHandlers.TDefaultProcessingType function is not nil (ie. was set by outside code), calls it with this TDefaultProcessingType instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this TDefaultProcessingType instance.
func (me *TDefaultProcessingType) Walk() (err error) {
	if fn := WalkHandlers.TDefaultProcessingType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_PIPELINEallDefaultProcessingTypeschema_Pipeline_TPipelineType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_PROCESSINGsequenceTxsdAnalysisTypeSequenceAnalysisTypeChoiceDeNovoAssemblyDENovoASSEMBLYchoiceTxsdAnalysisTypeSequenceAnalysisTypeANALYSISTYPEsequenceAnalysisTypeschema_Processing_TDefaultProcessingType_ struct {
	//	Identify the tools and processing steps used to produce the de novo assembly.
	Processing *TDefaultProcessingType `xml:"PROCESSING"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_PROCESSINGsequenceTxsdAnalysisTypeSequenceAnalysisTypeChoiceDeNovoAssemblyDENovoASSEMBLYchoiceTxsdAnalysisTypeSequenceAnalysisTypeANALYSISTYPEsequenceAnalysisTypeschema_Processing_TDefaultProcessingType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_PROCESSINGsequenceTxsdAnalysisTypeSequenceAnalysisTypeChoiceDeNovoAssemblyDENovoASSEMBLYchoiceTxsdAnalysisTypeSequenceAnalysisTypeANALYSISTYPEsequenceAnalysisTypeschema_Processing_TDefaultProcessingType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_PROCESSINGsequenceTxsdAnalysisTypeSequenceAnalysisTypeChoiceDeNovoAssemblyDENovoASSEMBLYchoiceTxsdAnalysisTypeSequenceAnalysisTypeANALYSISTYPEsequenceAnalysisTypeschema_Processing_TDefaultProcessingType_ instance.
func (me *XsdGoPkgHasElem_PROCESSINGsequenceTxsdAnalysisTypeSequenceAnalysisTypeChoiceDeNovoAssemblyDENovoASSEMBLYchoiceTxsdAnalysisTypeSequenceAnalysisTypeANALYSISTYPEsequenceAnalysisTypeschema_Processing_TDefaultProcessingType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_PROCESSINGsequenceTxsdAnalysisTypeSequenceAnalysisTypeChoiceDeNovoAssemblyDENovoASSEMBLYchoiceTxsdAnalysisTypeSequenceAnalysisTypeANALYSISTYPEsequenceAnalysisTypeschema_Processing_TDefaultProcessingType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Processing.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdAnalysisTypeSequenceAnalysisTypeChoiceDeNovoAssembly struct {
	//	Identify the tools and processing steps used to produce the de novo assembly.
	XsdGoPkgHasElem_PROCESSINGsequenceTxsdAnalysisTypeSequenceAnalysisTypeChoiceDeNovoAssemblyDENovoASSEMBLYchoiceTxsdAnalysisTypeSequenceAnalysisTypeANALYSISTYPEsequenceAnalysisTypeschema_Processing_TDefaultProcessingType_
}

//	If the WalkHandlers.TxsdAnalysisTypeSequenceAnalysisTypeChoiceDeNovoAssembly function is not nil (ie. was set by outside code), calls it with this TxsdAnalysisTypeSequenceAnalysisTypeChoiceDeNovoAssembly instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this TxsdAnalysisTypeSequenceAnalysisTypeChoiceDeNovoAssembly instance.
func (me *TxsdAnalysisTypeSequenceAnalysisTypeChoiceDeNovoAssembly) Walk() (err error) {
	if fn := WalkHandlers.TxsdAnalysisTypeSequenceAnalysisTypeChoiceDeNovoAssembly; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_PROCESSINGsequenceTxsdAnalysisTypeSequenceAnalysisTypeChoiceDeNovoAssemblyDENovoASSEMBLYchoiceTxsdAnalysisTypeSequenceAnalysisTypeANALYSISTYPEsequenceAnalysisTypeschema_Processing_TDefaultProcessingType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_DeNovoASSEMBLYchoiceTxsdAnalysisTypeSequenceAnalysisTypeANALYSISTYPEsequenceAnalysisTypeschema_DeNovoAssembly_TxsdAnalysisTypeSequenceAnalysisTypeChoiceDeNovoAssembly_ struct {
	//	A placement of sequences including trace, SRA, GI records into a multiple alignment from which a
	//	consensus is computed. This branch will be further specified in the future.
	DeNovoAssembly *TxsdAnalysisTypeSequenceAnalysisTypeChoiceDeNovoAssembly `xml:"DE_NOVO_ASSEMBLY"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_DeNovoASSEMBLYchoiceTxsdAnalysisTypeSequenceAnalysisTypeANALYSISTYPEsequenceAnalysisTypeschema_DeNovoAssembly_TxsdAnalysisTypeSequenceAnalysisTypeChoiceDeNovoAssembly_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_DeNovoASSEMBLYchoiceTxsdAnalysisTypeSequenceAnalysisTypeANALYSISTYPEsequenceAnalysisTypeschema_DeNovoAssembly_TxsdAnalysisTypeSequenceAnalysisTypeChoiceDeNovoAssembly_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_DeNovoASSEMBLYchoiceTxsdAnalysisTypeSequenceAnalysisTypeANALYSISTYPEsequenceAnalysisTypeschema_DeNovoAssembly_TxsdAnalysisTypeSequenceAnalysisTypeChoiceDeNovoAssembly_ instance.
func (me *XsdGoPkgHasElem_DeNovoASSEMBLYchoiceTxsdAnalysisTypeSequenceAnalysisTypeANALYSISTYPEsequenceAnalysisTypeschema_DeNovoAssembly_TxsdAnalysisTypeSequenceAnalysisTypeChoiceDeNovoAssembly_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_DeNovoASSEMBLYchoiceTxsdAnalysisTypeSequenceAnalysisTypeANALYSISTYPEsequenceAnalysisTypeschema_DeNovoAssembly_TxsdAnalysisTypeSequenceAnalysisTypeChoiceDeNovoAssembly_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.DeNovoAssembly.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	A multiple alignment of short reads against a reference substrate.
//	Specification of the reference collection of sequences used in the alignment.
//	Short name for the standard reference assembly used in the alignment. This should resolve
//	into community accepted collection of reference sequences.
//	Synonym Names additional to or in place of short_name. For example genbank, gecoll
//	accession.version.
//	INSDC controlled vocabulary of permitted cross references. Please see http://www.insdc.org/db_xref.html . For
//	example, FLYBASE.
type XsdGoPkgHasElem_DBallXRefTypeschema_Db_XsdtString_ struct {
	//	INSDC controlled vocabulary of permitted cross references. Please see http://www.insdc.org/db_xref.html . For
	//	example, FLYBASE.
	Db xsdt.String `xml:"DB"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_DBallXRefTypeschema_Db_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_DBallXRefTypeschema_Db_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_DBallXRefTypeschema_Db_XsdtString_ instance.
func (me *XsdGoPkgHasElem_DBallXRefTypeschema_Db_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_DBallXRefTypeschema_Db_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Accession in the referenced database. For example, FBtr0080008 (in FLYBASE).
type XsdGoPkgHasElem_IDallXRefTypeschema_Id_XsdtString_ struct {
	//	Accession in the referenced database. For example, FBtr0080008 (in FLYBASE).
	Id xsdt.String `xml:"ID"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_IDallXRefTypeschema_Id_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_IDallXRefTypeschema_Id_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_IDallXRefTypeschema_Id_XsdtString_ instance.
func (me *XsdGoPkgHasElem_IDallXRefTypeschema_Id_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_IDallXRefTypeschema_Id_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Text label to display for the link.
type XsdGoPkgHasElem_LABELallXRefTypeschema_Label_XsdtString_ struct {
	//	Text label to display for the link.
	Label xsdt.String `xml:"LABEL"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_LABELallXRefTypeschema_Label_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_LABELallXRefTypeschema_Label_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_LABELallXRefTypeschema_Label_XsdtString_ instance.
func (me *XsdGoPkgHasElem_LABELallXRefTypeschema_Label_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_LABELallXRefTypeschema_Label_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TXRefType struct {
	//	INSDC controlled vocabulary of permitted cross references. Please see http://www.insdc.org/db_xref.html . For
	//	example, FLYBASE.
	XsdGoPkgHasElem_DBallXRefTypeschema_Db_XsdtString_

	//	Accession in the referenced database. For example, FBtr0080008 (in FLYBASE).
	XsdGoPkgHasElem_IDallXRefTypeschema_Id_XsdtString_

	//	Text label to display for the link.
	XsdGoPkgHasElem_LABELallXRefTypeschema_Label_XsdtString_
}

//	If the WalkHandlers.TXRefType function is not nil (ie. was set by outside code), calls it with this TXRefType instance as the single argument. Then calls the Walk() method on 3/3 embed(s) and 0/0 field(s) belonging to this TXRefType instance.
func (me *TXRefType) Walk() (err error) {
	if fn := WalkHandlers.TXRefType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_IDallXRefTypeschema_Id_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_LABELallXRefTypeschema_Label_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_DBallXRefTypeschema_Db_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_NAMEsequenceTxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceAssemblyChoiceStandardSTANDARDchoiceTxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceAssemblyASSEMBLYsequenceTxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentREFERENCEALIGNMENTchoiceTxsdAnalysisTypeSequenceAnalysisTypeANALYSISTYPEsequenceAnalysisTypeschema_Name_TXRefType_ struct {
	//	Synonym Names additional to or in place of short_name. For example genbank, gecoll
	//	accession.version.
	Names []*TXRefType `xml:"NAME"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_NAMEsequenceTxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceAssemblyChoiceStandardSTANDARDchoiceTxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceAssemblyASSEMBLYsequenceTxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentREFERENCEALIGNMENTchoiceTxsdAnalysisTypeSequenceAnalysisTypeANALYSISTYPEsequenceAnalysisTypeschema_Name_TXRefType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_NAMEsequenceTxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceAssemblyChoiceStandardSTANDARDchoiceTxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceAssemblyASSEMBLYsequenceTxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentREFERENCEALIGNMENTchoiceTxsdAnalysisTypeSequenceAnalysisTypeANALYSISTYPEsequenceAnalysisTypeschema_Name_TXRefType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_NAMEsequenceTxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceAssemblyChoiceStandardSTANDARDchoiceTxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceAssemblyASSEMBLYsequenceTxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentREFERENCEALIGNMENTchoiceTxsdAnalysisTypeSequenceAnalysisTypeANALYSISTYPEsequenceAnalysisTypeschema_Name_TXRefType_ instance.
func (me *XsdGoPkgHasElems_NAMEsequenceTxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceAssemblyChoiceStandardSTANDARDchoiceTxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceAssemblyASSEMBLYsequenceTxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentREFERENCEALIGNMENTchoiceTxsdAnalysisTypeSequenceAnalysisTypeANALYSISTYPEsequenceAnalysisTypeschema_Name_TXRefType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_NAMEsequenceTxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceAssemblyChoiceStandardSTANDARDchoiceTxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceAssemblyASSEMBLYsequenceTxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentREFERENCEALIGNMENTchoiceTxsdAnalysisTypeSequenceAnalysisTypeANALYSISTYPEsequenceAnalysisTypeschema_Name_TXRefType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Names {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Short name for standard reference assembly. The Home Archive shall implement further
//	business rules governing the usage of short_name in conjunction with or in lieu of explicit references.
type XsdGoPkgHasAttr_ShortName_XsdtString_ struct {
	//	Short name for standard reference assembly. The Home Archive shall implement further
	//	business rules governing the usage of short_name in conjunction with or in lieu of explicit references.
	ShortName xsdt.String `xml:"short_name,attr"`
}

type TxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceAssemblyChoiceStandard struct {
	//	Synonym Names additional to or in place of short_name. For example genbank, gecoll
	//	accession.version.
	XsdGoPkgHasElems_NAMEsequenceTxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceAssemblyChoiceStandardSTANDARDchoiceTxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceAssemblyASSEMBLYsequenceTxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentREFERENCEALIGNMENTchoiceTxsdAnalysisTypeSequenceAnalysisTypeANALYSISTYPEsequenceAnalysisTypeschema_Name_TXRefType_

	//	Short name for standard reference assembly. The Home Archive shall implement further
	//	business rules governing the usage of short_name in conjunction with or in lieu of explicit references.
	XsdGoPkgHasAttr_ShortName_XsdtString_
}

//	If the WalkHandlers.TxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceAssemblyChoiceStandard function is not nil (ie. was set by outside code), calls it with this TxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceAssemblyChoiceStandard instance as the single argument. Then calls the Walk() method on 1/2 embed(s) and 0/0 field(s) belonging to this TxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceAssemblyChoiceStandard instance.
func (me *TxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceAssemblyChoiceStandard) Walk() (err error) {
	if fn := WalkHandlers.TxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceAssemblyChoiceStandard; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_NAMEsequenceTxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceAssemblyChoiceStandardSTANDARDchoiceTxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceAssemblyASSEMBLYsequenceTxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentREFERENCEALIGNMENTchoiceTxsdAnalysisTypeSequenceAnalysisTypeANALYSISTYPEsequenceAnalysisTypeschema_Name_TXRefType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_STANDARDchoiceTxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceAssemblyASSEMBLYsequenceTxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentREFERENCEALIGNMENTchoiceTxsdAnalysisTypeSequenceAnalysisTypeANALYSISTYPEsequenceAnalysisTypeschema_Standard_TxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceAssemblyChoiceStandard_ struct {
	//	Short name for the standard reference assembly used in the alignment. This should resolve
	//	into community accepted collection of reference sequences.
	Standard *TxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceAssemblyChoiceStandard `xml:"STANDARD"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_STANDARDchoiceTxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceAssemblyASSEMBLYsequenceTxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentREFERENCEALIGNMENTchoiceTxsdAnalysisTypeSequenceAnalysisTypeANALYSISTYPEsequenceAnalysisTypeschema_Standard_TxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceAssemblyChoiceStandard_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_STANDARDchoiceTxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceAssemblyASSEMBLYsequenceTxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentREFERENCEALIGNMENTchoiceTxsdAnalysisTypeSequenceAnalysisTypeANALYSISTYPEsequenceAnalysisTypeschema_Standard_TxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceAssemblyChoiceStandard_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_STANDARDchoiceTxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceAssemblyASSEMBLYsequenceTxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentREFERENCEALIGNMENTchoiceTxsdAnalysisTypeSequenceAnalysisTypeANALYSISTYPEsequenceAnalysisTypeschema_Standard_TxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceAssemblyChoiceStandard_ instance.
func (me *XsdGoPkgHasElem_STANDARDchoiceTxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceAssemblyASSEMBLYsequenceTxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentREFERENCEALIGNMENTchoiceTxsdAnalysisTypeSequenceAnalysisTypeANALYSISTYPEsequenceAnalysisTypeschema_Standard_TxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceAssemblyChoiceStandard_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_STANDARDchoiceTxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceAssemblyASSEMBLYsequenceTxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentREFERENCEALIGNMENTchoiceTxsdAnalysisTypeSequenceAnalysisTypeANALYSISTYPEsequenceAnalysisTypeschema_Standard_TxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceAssemblyChoiceStandard_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Standard.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	A list of ad-hoc reference sequences identified by database link.
//	Description of how the reference assembly was obtained especially when it is a
//	derivative of existing standards
type XsdGoPkgHasElem_DESCRIPTIONsequenceTxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceAssemblyChoiceCustomCUSTOMchoiceTxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceAssemblyASSEMBLYsequenceTxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentREFERENCEALIGNMENTchoiceTxsdAnalysisTypeSequenceAnalysisTypeANALYSISTYPEsequenceAnalysisTypeschema_Description_XsdtString_ struct {
	//	Description of how the reference assembly was obtained especially when it is a
	//	derivative of existing standards
	Description xsdt.String `xml:"DESCRIPTION"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_DESCRIPTIONsequenceTxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceAssemblyChoiceCustomCUSTOMchoiceTxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceAssemblyASSEMBLYsequenceTxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentREFERENCEALIGNMENTchoiceTxsdAnalysisTypeSequenceAnalysisTypeANALYSISTYPEsequenceAnalysisTypeschema_Description_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_DESCRIPTIONsequenceTxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceAssemblyChoiceCustomCUSTOMchoiceTxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceAssemblyASSEMBLYsequenceTxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentREFERENCEALIGNMENTchoiceTxsdAnalysisTypeSequenceAnalysisTypeANALYSISTYPEsequenceAnalysisTypeschema_Description_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_DESCRIPTIONsequenceTxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceAssemblyChoiceCustomCUSTOMchoiceTxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceAssemblyASSEMBLYsequenceTxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentREFERENCEALIGNMENTchoiceTxsdAnalysisTypeSequenceAnalysisTypeANALYSISTYPEsequenceAnalysisTypeschema_Description_XsdtString_ instance.
func (me *XsdGoPkgHasElem_DESCRIPTIONsequenceTxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceAssemblyChoiceCustomCUSTOMchoiceTxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceAssemblyASSEMBLYsequenceTxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentREFERENCEALIGNMENTchoiceTxsdAnalysisTypeSequenceAnalysisTypeANALYSISTYPEsequenceAnalysisTypeschema_Description_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_DESCRIPTIONsequenceTxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceAssemblyChoiceCustomCUSTOMchoiceTxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceAssemblyASSEMBLYsequenceTxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentREFERENCEALIGNMENTchoiceTxsdAnalysisTypeSequenceAnalysisTypeANALYSISTYPEsequenceAnalysisTypeschema_Description_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	A pointer to reference sequences using one of the Link mechanisms.
//	Reusable external links type to encode URL links, Entrez links, and db_xref links.
//	The internet service link (file:, http:, ftp:, etc).
type XsdGoPkgHasElem_URLallURLLINKchoiceLinkTypeschema_Url_XsdtAnyURI_ struct {
	//	The internet service link (file:, http:, ftp:, etc).
	Url xsdt.AnyURI `xml:"URL"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_URLallURLLINKchoiceLinkTypeschema_Url_XsdtAnyURI_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_URLallURLLINKchoiceLinkTypeschema_Url_XsdtAnyURI_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_URLallURLLINKchoiceLinkTypeschema_Url_XsdtAnyURI_ instance.
func (me *XsdGoPkgHasElem_URLallURLLINKchoiceLinkTypeschema_Url_XsdtAnyURI_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_URLallURLLINKchoiceLinkTypeschema_Url_XsdtAnyURI_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdLinkTypeChoiceUrlLink struct {
	//	Text label to display for the link.
	XsdGoPkgHasElem_LABELallXRefTypeschema_Label_XsdtString_

	//	The internet service link (file:, http:, ftp:, etc).
	XsdGoPkgHasElem_URLallURLLINKchoiceLinkTypeschema_Url_XsdtAnyURI_
}

//	If the WalkHandlers.TxsdLinkTypeChoiceUrlLink function is not nil (ie. was set by outside code), calls it with this TxsdLinkTypeChoiceUrlLink instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TxsdLinkTypeChoiceUrlLink instance.
func (me *TxsdLinkTypeChoiceUrlLink) Walk() (err error) {
	if fn := WalkHandlers.TxsdLinkTypeChoiceUrlLink; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_LABELallXRefTypeschema_Label_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_URLallURLLINKchoiceLinkTypeschema_Url_XsdtAnyURI_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_UrlLINKchoiceLinkTypeschema_UrlLink_TxsdLinkTypeChoiceUrlLink_ struct {
	UrlLink *TxsdLinkTypeChoiceUrlLink `xml:"URL_LINK"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_UrlLINKchoiceLinkTypeschema_UrlLink_TxsdLinkTypeChoiceUrlLink_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_UrlLINKchoiceLinkTypeschema_UrlLink_TxsdLinkTypeChoiceUrlLink_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_UrlLINKchoiceLinkTypeschema_UrlLink_TxsdLinkTypeChoiceUrlLink_ instance.
func (me *XsdGoPkgHasElem_UrlLINKchoiceLinkTypeschema_UrlLink_TxsdLinkTypeChoiceUrlLink_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_UrlLINKchoiceLinkTypeschema_UrlLink_TxsdLinkTypeChoiceUrlLink_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.UrlLink.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_XrefLINKchoiceLinkTypeschema_XrefLink_TXRefType_ struct {
	XrefLink *TXRefType `xml:"XREF_LINK"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_XrefLINKchoiceLinkTypeschema_XrefLink_TXRefType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_XrefLINKchoiceLinkTypeschema_XrefLink_TXRefType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_XrefLINKchoiceLinkTypeschema_XrefLink_TXRefType_ instance.
func (me *XsdGoPkgHasElem_XrefLINKchoiceLinkTypeschema_XrefLink_TXRefType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_XrefLINKchoiceLinkTypeschema_XrefLink_TXRefType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XrefLink.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Numeric record id meaningful to the NCBI Entrez system.
type XsdGoPkgHasElem_IDchoicesequenceENTREZLINKchoiceLinkTypeschema_Id_XsdtNonNegativeInteger_ struct {
	//	Numeric record id meaningful to the NCBI Entrez system.
	Id *xsdt.NonNegativeInteger `xml:"ID"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_IDchoicesequenceENTREZLINKchoiceLinkTypeschema_Id_XsdtNonNegativeInteger_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_IDchoicesequenceENTREZLINKchoiceLinkTypeschema_Id_XsdtNonNegativeInteger_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_IDchoicesequenceENTREZLINKchoiceLinkTypeschema_Id_XsdtNonNegativeInteger_ instance.
func (me *XsdGoPkgHasElem_IDchoicesequenceENTREZLINKchoiceLinkTypeschema_Id_XsdtNonNegativeInteger_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_IDchoicesequenceENTREZLINKchoiceLinkTypeschema_Id_XsdtNonNegativeInteger_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Accession string meaningful to the NCBI Entrez system.
type XsdGoPkgHasElem_QUERYchoicesequenceENTREZLINKchoiceLinkTypeschema_Query_XsdtString_ struct {
	//	Accession string meaningful to the NCBI Entrez system.
	Query xsdt.String `xml:"QUERY"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_QUERYchoicesequenceENTREZLINKchoiceLinkTypeschema_Query_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_QUERYchoicesequenceENTREZLINKchoiceLinkTypeschema_Query_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_QUERYchoicesequenceENTREZLINKchoiceLinkTypeschema_Query_XsdtString_ instance.
func (me *XsdGoPkgHasElem_QUERYchoicesequenceENTREZLINKchoiceLinkTypeschema_Query_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_QUERYchoicesequenceENTREZLINKchoiceLinkTypeschema_Query_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdLinkTypeChoiceEntrezLink struct {
	//	How to label the link.
	XsdGoPkgHasElem_LABELallXRefTypeschema_Label_XsdtString_

	//	Numeric record id meaningful to the NCBI Entrez system.
	XsdGoPkgHasElem_IDchoicesequenceENTREZLINKchoiceLinkTypeschema_Id_XsdtNonNegativeInteger_

	//	Accession string meaningful to the NCBI Entrez system.
	XsdGoPkgHasElem_QUERYchoicesequenceENTREZLINKchoiceLinkTypeschema_Query_XsdtString_

	//	NCBI controlled vocabulary of permitted cross references. Please see
	//	http://www.ncbi.nlm.nih.gov/entrez/eutils/einfo.fcgi? .
	XsdGoPkgHasElem_DBallXRefTypeschema_Db_XsdtString_
}

//	If the WalkHandlers.TxsdLinkTypeChoiceEntrezLink function is not nil (ie. was set by outside code), calls it with this TxsdLinkTypeChoiceEntrezLink instance as the single argument. Then calls the Walk() method on 4/4 embed(s) and 0/0 field(s) belonging to this TxsdLinkTypeChoiceEntrezLink instance.
func (me *TxsdLinkTypeChoiceEntrezLink) Walk() (err error) {
	if fn := WalkHandlers.TxsdLinkTypeChoiceEntrezLink; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_QUERYchoicesequenceENTREZLINKchoiceLinkTypeschema_Query_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_DBallXRefTypeschema_Db_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_LABELallXRefTypeschema_Label_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_IDchoicesequenceENTREZLINKchoiceLinkTypeschema_Id_XsdtNonNegativeInteger_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_EntrezLINKchoiceLinkTypeschema_EntrezLink_TxsdLinkTypeChoiceEntrezLink_ struct {
	EntrezLink *TxsdLinkTypeChoiceEntrezLink `xml:"ENTREZ_LINK"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_EntrezLINKchoiceLinkTypeschema_EntrezLink_TxsdLinkTypeChoiceEntrezLink_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_EntrezLINKchoiceLinkTypeschema_EntrezLink_TxsdLinkTypeChoiceEntrezLink_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_EntrezLINKchoiceLinkTypeschema_EntrezLink_TxsdLinkTypeChoiceEntrezLink_ instance.
func (me *XsdGoPkgHasElem_EntrezLINKchoiceLinkTypeschema_EntrezLink_TxsdLinkTypeChoiceEntrezLink_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_EntrezLINKchoiceLinkTypeschema_EntrezLink_TxsdLinkTypeChoiceEntrezLink_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.EntrezLink.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TLinkType struct {
	XsdGoPkgHasElem_UrlLINKchoiceLinkTypeschema_UrlLink_TxsdLinkTypeChoiceUrlLink_

	XsdGoPkgHasElem_XrefLINKchoiceLinkTypeschema_XrefLink_TXRefType_

	XsdGoPkgHasElem_EntrezLINKchoiceLinkTypeschema_EntrezLink_TxsdLinkTypeChoiceEntrezLink_
}

//	If the WalkHandlers.TLinkType function is not nil (ie. was set by outside code), calls it with this TLinkType instance as the single argument. Then calls the Walk() method on 3/3 embed(s) and 0/0 field(s) belonging to this TLinkType instance.
func (me *TLinkType) Walk() (err error) {
	if fn := WalkHandlers.TLinkType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_UrlLINKchoiceLinkTypeschema_UrlLink_TxsdLinkTypeChoiceUrlLink_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_XrefLINKchoiceLinkTypeschema_XrefLink_TXRefType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_EntrezLINKchoiceLinkTypeschema_EntrezLink_TxsdLinkTypeChoiceEntrezLink_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_ReferenceSOURCEsequenceTxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceAssemblyChoiceCustomCUSTOMchoiceTxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceAssemblyASSEMBLYsequenceTxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentREFERENCEALIGNMENTchoiceTxsdAnalysisTypeSequenceAnalysisTypeANALYSISTYPEsequenceAnalysisTypeschema_ReferenceSource_TLinkType_ struct {
	//	A pointer to reference sequences using one of the Link mechanisms.
	ReferenceSources []*TLinkType `xml:"REFERENCE_SOURCE"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_ReferenceSOURCEsequenceTxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceAssemblyChoiceCustomCUSTOMchoiceTxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceAssemblyASSEMBLYsequenceTxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentREFERENCEALIGNMENTchoiceTxsdAnalysisTypeSequenceAnalysisTypeANALYSISTYPEsequenceAnalysisTypeschema_ReferenceSource_TLinkType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ReferenceSOURCEsequenceTxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceAssemblyChoiceCustomCUSTOMchoiceTxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceAssemblyASSEMBLYsequenceTxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentREFERENCEALIGNMENTchoiceTxsdAnalysisTypeSequenceAnalysisTypeANALYSISTYPEsequenceAnalysisTypeschema_ReferenceSource_TLinkType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ReferenceSOURCEsequenceTxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceAssemblyChoiceCustomCUSTOMchoiceTxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceAssemblyASSEMBLYsequenceTxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentREFERENCEALIGNMENTchoiceTxsdAnalysisTypeSequenceAnalysisTypeANALYSISTYPEsequenceAnalysisTypeschema_ReferenceSource_TLinkType_ instance.
func (me *XsdGoPkgHasElems_ReferenceSOURCEsequenceTxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceAssemblyChoiceCustomCUSTOMchoiceTxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceAssemblyASSEMBLYsequenceTxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentREFERENCEALIGNMENTchoiceTxsdAnalysisTypeSequenceAnalysisTypeANALYSISTYPEsequenceAnalysisTypeschema_ReferenceSource_TLinkType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_ReferenceSOURCEsequenceTxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceAssemblyChoiceCustomCUSTOMchoiceTxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceAssemblyASSEMBLYsequenceTxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentREFERENCEALIGNMENTchoiceTxsdAnalysisTypeSequenceAnalysisTypeANALYSISTYPEsequenceAnalysisTypeschema_ReferenceSource_TLinkType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.ReferenceSources {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceAssemblyChoiceCustom struct {
	//	Description of how the reference assembly was obtained especially when it is a
	//	derivative of existing standards
	XsdGoPkgHasElem_DESCRIPTIONsequenceTxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceAssemblyChoiceCustomCUSTOMchoiceTxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceAssemblyASSEMBLYsequenceTxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentREFERENCEALIGNMENTchoiceTxsdAnalysisTypeSequenceAnalysisTypeANALYSISTYPEsequenceAnalysisTypeschema_Description_XsdtString_

	//	A pointer to reference sequences using one of the Link mechanisms.
	XsdGoPkgHasElems_ReferenceSOURCEsequenceTxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceAssemblyChoiceCustomCUSTOMchoiceTxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceAssemblyASSEMBLYsequenceTxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentREFERENCEALIGNMENTchoiceTxsdAnalysisTypeSequenceAnalysisTypeANALYSISTYPEsequenceAnalysisTypeschema_ReferenceSource_TLinkType_
}

//	If the WalkHandlers.TxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceAssemblyChoiceCustom function is not nil (ie. was set by outside code), calls it with this TxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceAssemblyChoiceCustom instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceAssemblyChoiceCustom instance.
func (me *TxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceAssemblyChoiceCustom) Walk() (err error) {
	if fn := WalkHandlers.TxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceAssemblyChoiceCustom; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_DESCRIPTIONsequenceTxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceAssemblyChoiceCustomCUSTOMchoiceTxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceAssemblyASSEMBLYsequenceTxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentREFERENCEALIGNMENTchoiceTxsdAnalysisTypeSequenceAnalysisTypeANALYSISTYPEsequenceAnalysisTypeschema_Description_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_ReferenceSOURCEsequenceTxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceAssemblyChoiceCustomCUSTOMchoiceTxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceAssemblyASSEMBLYsequenceTxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentREFERENCEALIGNMENTchoiceTxsdAnalysisTypeSequenceAnalysisTypeANALYSISTYPEsequenceAnalysisTypeschema_ReferenceSource_TLinkType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_CUSTOMchoiceTxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceAssemblyASSEMBLYsequenceTxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentREFERENCEALIGNMENTchoiceTxsdAnalysisTypeSequenceAnalysisTypeANALYSISTYPEsequenceAnalysisTypeschema_Custom_TxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceAssemblyChoiceCustom_ struct {
	//	A list of ad-hoc reference sequences identified by database link.
	Custom *TxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceAssemblyChoiceCustom `xml:"CUSTOM"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_CUSTOMchoiceTxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceAssemblyASSEMBLYsequenceTxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentREFERENCEALIGNMENTchoiceTxsdAnalysisTypeSequenceAnalysisTypeANALYSISTYPEsequenceAnalysisTypeschema_Custom_TxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceAssemblyChoiceCustom_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_CUSTOMchoiceTxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceAssemblyASSEMBLYsequenceTxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentREFERENCEALIGNMENTchoiceTxsdAnalysisTypeSequenceAnalysisTypeANALYSISTYPEsequenceAnalysisTypeschema_Custom_TxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceAssemblyChoiceCustom_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_CUSTOMchoiceTxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceAssemblyASSEMBLYsequenceTxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentREFERENCEALIGNMENTchoiceTxsdAnalysisTypeSequenceAnalysisTypeANALYSISTYPEsequenceAnalysisTypeschema_Custom_TxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceAssemblyChoiceCustom_ instance.
func (me *XsdGoPkgHasElem_CUSTOMchoiceTxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceAssemblyASSEMBLYsequenceTxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentREFERENCEALIGNMENTchoiceTxsdAnalysisTypeSequenceAnalysisTypeANALYSISTYPEsequenceAnalysisTypeschema_Custom_TxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceAssemblyChoiceCustom_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_CUSTOMchoiceTxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceAssemblyASSEMBLYsequenceTxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentREFERENCEALIGNMENTchoiceTxsdAnalysisTypeSequenceAnalysisTypeANALYSISTYPEsequenceAnalysisTypeschema_Custom_TxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceAssemblyChoiceCustom_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Custom.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceAssembly struct {
	//	Short name for the standard reference assembly used in the alignment. This should resolve
	//	into community accepted collection of reference sequences.
	XsdGoPkgHasElem_STANDARDchoiceTxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceAssemblyASSEMBLYsequenceTxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentREFERENCEALIGNMENTchoiceTxsdAnalysisTypeSequenceAnalysisTypeANALYSISTYPEsequenceAnalysisTypeschema_Standard_TxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceAssemblyChoiceStandard_

	//	A list of ad-hoc reference sequences identified by database link.
	XsdGoPkgHasElem_CUSTOMchoiceTxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceAssemblyASSEMBLYsequenceTxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentREFERENCEALIGNMENTchoiceTxsdAnalysisTypeSequenceAnalysisTypeANALYSISTYPEsequenceAnalysisTypeschema_Custom_TxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceAssemblyChoiceCustom_
}

//	If the WalkHandlers.TxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceAssembly function is not nil (ie. was set by outside code), calls it with this TxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceAssembly instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceAssembly instance.
func (me *TxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceAssembly) Walk() (err error) {
	if fn := WalkHandlers.TxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceAssembly; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_STANDARDchoiceTxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceAssemblyASSEMBLYsequenceTxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentREFERENCEALIGNMENTchoiceTxsdAnalysisTypeSequenceAnalysisTypeANALYSISTYPEsequenceAnalysisTypeschema_Standard_TxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceAssemblyChoiceStandard_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_CUSTOMchoiceTxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceAssemblyASSEMBLYsequenceTxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentREFERENCEALIGNMENTchoiceTxsdAnalysisTypeSequenceAnalysisTypeANALYSISTYPEsequenceAnalysisTypeschema_Custom_TxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceAssemblyChoiceCustom_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_ASSEMBLYsequenceTxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentREFERENCEALIGNMENTchoiceTxsdAnalysisTypeSequenceAnalysisTypeANALYSISTYPEsequenceAnalysisTypeschema_Assembly_TxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceAssembly_ struct {
	//	Specification of the reference collection of sequences used in the alignment.
	Assembly *TxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceAssembly `xml:"ASSEMBLY"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_ASSEMBLYsequenceTxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentREFERENCEALIGNMENTchoiceTxsdAnalysisTypeSequenceAnalysisTypeANALYSISTYPEsequenceAnalysisTypeschema_Assembly_TxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceAssembly_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ASSEMBLYsequenceTxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentREFERENCEALIGNMENTchoiceTxsdAnalysisTypeSequenceAnalysisTypeANALYSISTYPEsequenceAnalysisTypeschema_Assembly_TxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceAssembly_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_ASSEMBLYsequenceTxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentREFERENCEALIGNMENTchoiceTxsdAnalysisTypeSequenceAnalysisTypeANALYSISTYPEsequenceAnalysisTypeschema_Assembly_TxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceAssembly_ instance.
func (me *XsdGoPkgHasElem_ASSEMBLYsequenceTxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentREFERENCEALIGNMENTchoiceTxsdAnalysisTypeSequenceAnalysisTypeANALYSISTYPEsequenceAnalysisTypeschema_Assembly_TxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceAssembly_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_ASSEMBLYsequenceTxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentREFERENCEALIGNMENTchoiceTxsdAnalysisTypeSequenceAnalysisTypeANALYSISTYPEsequenceAnalysisTypeschema_Assembly_TxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceAssembly_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Assembly.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Mapping between the run (read group) labels used in the alignment data file, and the runs in the
//	Archive. This is optional when SRA runs are reffered by accession in submitted data.
//	RUNs which are labeled by SRA Accession are optional in the list
//	This is how SRA run is labeled in submission file(s). It is equivalent to read group (RG)
//	labeling in BAM. Optional when submitted file use SRA accessions as labels
type XsdGoPkgHasAttr_ReadGroupLabel_XsdtString_ struct {
	//	This is how SRA run is labeled in submission file(s). It is equivalent to read group (RG)
	//	labeling in BAM. Optional when submitted file use SRA accessions as labels
	ReadGroupLabel xsdt.String `xml:"read_group_label,attr"`
}

//	An optional attrtibute matching DATA_BLOCK/@name for a particular data file. This is only
//	needed when the same SRA RUN has different labeling in the submission.
type XsdGoPkgHasAttr_DataBlockName_XsdtString_ struct {
	//	An optional attrtibute matching DATA_BLOCK/@name for a particular data file. This is only
	//	needed when the same SRA RUN has different labeling in the submission.
	DataBlockName xsdt.String `xml:"data_block_name,attr"`
}

type TxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceRunLabelsSequenceRun struct {
	//	Identifies an SRA Run either by SRA Accession or by refname+refcenter
	XsdGoPkgHasAtts_RefNameGroup

	//	An optional attrtibute matching DATA_BLOCK/@name for a particular data file. This is only
	//	needed when the same SRA RUN has different labeling in the submission.
	XsdGoPkgHasAttr_DataBlockName_XsdtString_

	//	This is how SRA run is labeled in submission file(s). It is equivalent to read group (RG)
	//	labeling in BAM. Optional when submitted file use SRA accessions as labels
	XsdGoPkgHasAttr_ReadGroupLabel_XsdtString_
}

//	If the WalkHandlers.TxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceRunLabelsSequenceRun function is not nil (ie. was set by outside code), calls it with this TxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceRunLabelsSequenceRun instance as the single argument. Then calls the Walk() method on 0/3 embed(s) and 0/0 field(s) belonging to this TxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceRunLabelsSequenceRun instance.
func (me *TxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceRunLabelsSequenceRun) Walk() (err error) {
	if fn := WalkHandlers.TxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceRunLabelsSequenceRun; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_RUNsequenceTxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceRunLabelsRUNLABELSsequenceTxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentREFERENCEALIGNMENTchoiceTxsdAnalysisTypeSequenceAnalysisTypeANALYSISTYPEsequenceAnalysisTypeschema_Run_TxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceRunLabelsSequenceRun_ struct {
	Runs []*TxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceRunLabelsSequenceRun `xml:"RUN"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_RUNsequenceTxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceRunLabelsRUNLABELSsequenceTxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentREFERENCEALIGNMENTchoiceTxsdAnalysisTypeSequenceAnalysisTypeANALYSISTYPEsequenceAnalysisTypeschema_Run_TxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceRunLabelsSequenceRun_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_RUNsequenceTxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceRunLabelsRUNLABELSsequenceTxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentREFERENCEALIGNMENTchoiceTxsdAnalysisTypeSequenceAnalysisTypeANALYSISTYPEsequenceAnalysisTypeschema_Run_TxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceRunLabelsSequenceRun_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_RUNsequenceTxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceRunLabelsRUNLABELSsequenceTxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentREFERENCEALIGNMENTchoiceTxsdAnalysisTypeSequenceAnalysisTypeANALYSISTYPEsequenceAnalysisTypeschema_Run_TxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceRunLabelsSequenceRun_ instance.
func (me *XsdGoPkgHasElems_RUNsequenceTxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceRunLabelsRUNLABELSsequenceTxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentREFERENCEALIGNMENTchoiceTxsdAnalysisTypeSequenceAnalysisTypeANALYSISTYPEsequenceAnalysisTypeschema_Run_TxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceRunLabelsSequenceRun_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_RUNsequenceTxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceRunLabelsRUNLABELSsequenceTxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentREFERENCEALIGNMENTchoiceTxsdAnalysisTypeSequenceAnalysisTypeANALYSISTYPEsequenceAnalysisTypeschema_Run_TxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceRunLabelsSequenceRun_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Runs {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceRunLabels struct {
	XsdGoPkgHasElems_RUNsequenceTxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceRunLabelsRUNLABELSsequenceTxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentREFERENCEALIGNMENTchoiceTxsdAnalysisTypeSequenceAnalysisTypeANALYSISTYPEsequenceAnalysisTypeschema_Run_TxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceRunLabelsSequenceRun_
}

//	If the WalkHandlers.TxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceRunLabels function is not nil (ie. was set by outside code), calls it with this TxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceRunLabels instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this TxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceRunLabels instance.
func (me *TxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceRunLabels) Walk() (err error) {
	if fn := WalkHandlers.TxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceRunLabels; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_RUNsequenceTxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceRunLabelsRUNLABELSsequenceTxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentREFERENCEALIGNMENTchoiceTxsdAnalysisTypeSequenceAnalysisTypeANALYSISTYPEsequenceAnalysisTypeschema_Run_TxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceRunLabelsSequenceRun_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_RunLABELSsequenceTxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentREFERENCEALIGNMENTchoiceTxsdAnalysisTypeSequenceAnalysisTypeANALYSISTYPEsequenceAnalysisTypeschema_RunLabels_TxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceRunLabels_ struct {
	//	Mapping between the run (read group) labels used in the alignment data file, and the runs in the
	//	Archive. This is optional when SRA runs are reffered by accession in submitted data.
	RunLabels *TxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceRunLabels `xml:"RUN_LABELS"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_RunLABELSsequenceTxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentREFERENCEALIGNMENTchoiceTxsdAnalysisTypeSequenceAnalysisTypeANALYSISTYPEsequenceAnalysisTypeschema_RunLabels_TxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceRunLabels_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_RunLABELSsequenceTxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentREFERENCEALIGNMENTchoiceTxsdAnalysisTypeSequenceAnalysisTypeANALYSISTYPEsequenceAnalysisTypeschema_RunLabels_TxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceRunLabels_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_RunLABELSsequenceTxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentREFERENCEALIGNMENTchoiceTxsdAnalysisTypeSequenceAnalysisTypeANALYSISTYPEsequenceAnalysisTypeschema_RunLabels_TxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceRunLabels_ instance.
func (me *XsdGoPkgHasElem_RunLABELSsequenceTxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentREFERENCEALIGNMENTchoiceTxsdAnalysisTypeSequenceAnalysisTypeANALYSISTYPEsequenceAnalysisTypeschema_RunLabels_TxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceRunLabels_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_RunLABELSsequenceTxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentREFERENCEALIGNMENTchoiceTxsdAnalysisTypeSequenceAnalysisTypeANALYSISTYPEsequenceAnalysisTypeschema_RunLabels_TxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceRunLabels_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.RunLabels.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Mapping between the reference (sequence dictionary) labels used in the alignment data file, and
//	the reference sequences in the Archive. The whole element is optional when Sequences are referenced by
//	accession.version in submitted data.
//	Sequences which are labeled by Accession.version are optional in the list
//	This is how Reference Sequence is labeled in submission file(s). It is equivalent to SQ
//	label in BAM. Optional when submitted file uses INSDC accession.version
type XsdGoPkgHasAttr_SeqLabel_XsdtString_ struct {
	//	This is how Reference Sequence is labeled in submission file(s). It is equivalent to SQ
	//	label in BAM. Optional when submitted file uses INSDC accession.version
	SeqLabel xsdt.String `xml:"seq_label,attr"`
}

//	Accession.version with version being mandatory
type XsdGoPkgHasAttr_Accession_XsdtToken_ struct {
	//	Accession.version with version being mandatory
	Accession xsdt.Token `xml:"accession,attr"`
}

//	NCBI - assigned gi
type XsdGoPkgHasAttr_Gi_XsdtInteger_ struct {
	//	NCBI - assigned gi
	Gi xsdt.Integer `xml:"gi,attr"`
}

type TxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceSeqLabelsSequenceSequence struct {
	//	An optional attrtibute matching DATA_BLOCK/@name for a particular data file. This is only
	//	needed when the same reference sequence has different labeling in the submission.
	XsdGoPkgHasAttr_DataBlockName_XsdtString_

	//	This is how Reference Sequence is labeled in submission file(s). It is equivalent to SQ
	//	label in BAM. Optional when submitted file uses INSDC accession.version
	XsdGoPkgHasAttr_SeqLabel_XsdtString_

	//	Accession.version with version being mandatory
	XsdGoPkgHasAttr_Accession_XsdtToken_

	//	NCBI - assigned gi
	XsdGoPkgHasAttr_Gi_XsdtInteger_
}

//	If the WalkHandlers.TxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceSeqLabelsSequenceSequence function is not nil (ie. was set by outside code), calls it with this TxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceSeqLabelsSequenceSequence instance as the single argument. Then calls the Walk() method on 0/4 embed(s) and 0/0 field(s) belonging to this TxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceSeqLabelsSequenceSequence instance.
func (me *TxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceSeqLabelsSequenceSequence) Walk() (err error) {
	if fn := WalkHandlers.TxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceSeqLabelsSequenceSequence; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_SEQUENCEsequenceTxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceSeqLabelsSEQLABELSsequenceTxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentREFERENCEALIGNMENTchoiceTxsdAnalysisTypeSequenceAnalysisTypeANALYSISTYPEsequenceAnalysisTypeschema_Sequence_TxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceSeqLabelsSequenceSequence_ struct {
	//	Sequences which are labeled by Accession.version are optional in the list
	Sequences []*TxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceSeqLabelsSequenceSequence `xml:"SEQUENCE"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_SEQUENCEsequenceTxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceSeqLabelsSEQLABELSsequenceTxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentREFERENCEALIGNMENTchoiceTxsdAnalysisTypeSequenceAnalysisTypeANALYSISTYPEsequenceAnalysisTypeschema_Sequence_TxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceSeqLabelsSequenceSequence_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_SEQUENCEsequenceTxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceSeqLabelsSEQLABELSsequenceTxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentREFERENCEALIGNMENTchoiceTxsdAnalysisTypeSequenceAnalysisTypeANALYSISTYPEsequenceAnalysisTypeschema_Sequence_TxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceSeqLabelsSequenceSequence_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_SEQUENCEsequenceTxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceSeqLabelsSEQLABELSsequenceTxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentREFERENCEALIGNMENTchoiceTxsdAnalysisTypeSequenceAnalysisTypeANALYSISTYPEsequenceAnalysisTypeschema_Sequence_TxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceSeqLabelsSequenceSequence_ instance.
func (me *XsdGoPkgHasElems_SEQUENCEsequenceTxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceSeqLabelsSEQLABELSsequenceTxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentREFERENCEALIGNMENTchoiceTxsdAnalysisTypeSequenceAnalysisTypeANALYSISTYPEsequenceAnalysisTypeschema_Sequence_TxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceSeqLabelsSequenceSequence_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_SEQUENCEsequenceTxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceSeqLabelsSEQLABELSsequenceTxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentREFERENCEALIGNMENTchoiceTxsdAnalysisTypeSequenceAnalysisTypeANALYSISTYPEsequenceAnalysisTypeschema_Sequence_TxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceSeqLabelsSequenceSequence_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Sequences {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceSeqLabels struct {
	//	Sequences which are labeled by Accession.version are optional in the list
	XsdGoPkgHasElems_SEQUENCEsequenceTxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceSeqLabelsSEQLABELSsequenceTxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentREFERENCEALIGNMENTchoiceTxsdAnalysisTypeSequenceAnalysisTypeANALYSISTYPEsequenceAnalysisTypeschema_Sequence_TxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceSeqLabelsSequenceSequence_
}

//	If the WalkHandlers.TxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceSeqLabels function is not nil (ie. was set by outside code), calls it with this TxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceSeqLabels instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this TxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceSeqLabels instance.
func (me *TxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceSeqLabels) Walk() (err error) {
	if fn := WalkHandlers.TxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceSeqLabels; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_SEQUENCEsequenceTxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceSeqLabelsSEQLABELSsequenceTxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentREFERENCEALIGNMENTchoiceTxsdAnalysisTypeSequenceAnalysisTypeANALYSISTYPEsequenceAnalysisTypeschema_Sequence_TxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceSeqLabelsSequenceSequence_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_SeqLABELSsequenceTxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentREFERENCEALIGNMENTchoiceTxsdAnalysisTypeSequenceAnalysisTypeANALYSISTYPEsequenceAnalysisTypeschema_SeqLabels_TxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceSeqLabels_ struct {
	SeqLabels *TxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceSeqLabels `xml:"SEQ_LABELS"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_SeqLABELSsequenceTxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentREFERENCEALIGNMENTchoiceTxsdAnalysisTypeSequenceAnalysisTypeANALYSISTYPEsequenceAnalysisTypeschema_SeqLabels_TxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceSeqLabels_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_SeqLABELSsequenceTxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentREFERENCEALIGNMENTchoiceTxsdAnalysisTypeSequenceAnalysisTypeANALYSISTYPEsequenceAnalysisTypeschema_SeqLabels_TxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceSeqLabels_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_SeqLABELSsequenceTxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentREFERENCEALIGNMENTchoiceTxsdAnalysisTypeSequenceAnalysisTypeANALYSISTYPEsequenceAnalysisTypeschema_SeqLabels_TxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceSeqLabels_ instance.
func (me *XsdGoPkgHasElem_SeqLABELSsequenceTxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentREFERENCEALIGNMENTchoiceTxsdAnalysisTypeSequenceAnalysisTypeANALYSISTYPEsequenceAnalysisTypeschema_SeqLabels_TxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceSeqLabels_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_SeqLABELSsequenceTxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentREFERENCEALIGNMENTchoiceTxsdAnalysisTypeSequenceAnalysisTypeANALYSISTYPEsequenceAnalysisTypeschema_SeqLabels_TxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceSeqLabels_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.SeqLabels.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Identify the tools and processing steps used to produce the reference alignment, and specify
//	directives used to load and interpret the data supplied by the submitter.
//	Identify the tools and processing steps used to produce the reference alignment.
//	Whether the reference alignment identifies reads that appear to be duplicates.
type XsdGoPkgHasElem_AlignmentMarksDuplicateReadsallAlignmentDirectivesTypeschema_AlignmentMarksDuplicateReads_XsdtBoolean_ struct {
	//	Whether the reference alignment identifies reads that appear to be duplicates.
	AlignmentMarksDuplicateReads xsdt.Boolean `xml:"alignment_marks_duplicate_reads"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_AlignmentMarksDuplicateReadsallAlignmentDirectivesTypeschema_AlignmentMarksDuplicateReads_XsdtBoolean_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_AlignmentMarksDuplicateReadsallAlignmentDirectivesTypeschema_AlignmentMarksDuplicateReads_XsdtBoolean_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_AlignmentMarksDuplicateReadsallAlignmentDirectivesTypeschema_AlignmentMarksDuplicateReads_XsdtBoolean_ instance.
func (me *XsdGoPkgHasElem_AlignmentMarksDuplicateReadsallAlignmentDirectivesTypeschema_AlignmentMarksDuplicateReads_XsdtBoolean_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_AlignmentMarksDuplicateReadsallAlignmentDirectivesTypeschema_AlignmentMarksDuplicateReads_XsdtBoolean_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Whether the reference alignment includes all reads regardless of whether they fail the instrument vendor's
//	quality check.
type XsdGoPkgHasElem_AlignmentIncludesFailedReadsallAlignmentDirectivesTypeschema_AlignmentIncludesFailedReads_XsdtBoolean_ struct {
	//	Whether the reference alignment includes all reads regardless of whether they fail the instrument vendor's
	//	quality check.
	AlignmentIncludesFailedReads xsdt.Boolean `xml:"alignment_includes_failed_reads"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_AlignmentIncludesFailedReadsallAlignmentDirectivesTypeschema_AlignmentIncludesFailedReads_XsdtBoolean_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_AlignmentIncludesFailedReadsallAlignmentDirectivesTypeschema_AlignmentIncludesFailedReads_XsdtBoolean_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_AlignmentIncludesFailedReadsallAlignmentDirectivesTypeschema_AlignmentIncludesFailedReads_XsdtBoolean_ instance.
func (me *XsdGoPkgHasElem_AlignmentIncludesFailedReadsallAlignmentDirectivesTypeschema_AlignmentIncludesFailedReads_XsdtBoolean_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_AlignmentIncludesFailedReadsallAlignmentDirectivesTypeschema_AlignmentIncludesFailedReads_XsdtBoolean_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Whether the reference alignment includes unaligned reads.
type XsdGoPkgHasElem_AlignmentIncludesUnalignedReadsallAlignmentDirectivesTypeschema_AlignmentIncludesUnalignedReads_XsdtBoolean_ struct {
	//	Whether the reference alignment includes unaligned reads.
	AlignmentIncludesUnalignedReads xsdt.Boolean `xml:"alignment_includes_unaligned_reads"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_AlignmentIncludesUnalignedReadsallAlignmentDirectivesTypeschema_AlignmentIncludesUnalignedReads_XsdtBoolean_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_AlignmentIncludesUnalignedReadsallAlignmentDirectivesTypeschema_AlignmentIncludesUnalignedReads_XsdtBoolean_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_AlignmentIncludesUnalignedReadsallAlignmentDirectivesTypeschema_AlignmentIncludesUnalignedReads_XsdtBoolean_ instance.
func (me *XsdGoPkgHasElem_AlignmentIncludesUnalignedReadsallAlignmentDirectivesTypeschema_AlignmentIncludesUnalignedReads_XsdtBoolean_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_AlignmentIncludesUnalignedReadsallAlignmentDirectivesTypeschema_AlignmentIncludesUnalignedReads_XsdtBoolean_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TAlignmentDirectivesType struct {
	//	Whether the reference alignment identifies reads that appear to be duplicates.
	XsdGoPkgHasElem_AlignmentMarksDuplicateReadsallAlignmentDirectivesTypeschema_AlignmentMarksDuplicateReads_XsdtBoolean_

	//	Whether the reference alignment includes all reads regardless of whether they fail the instrument vendor's
	//	quality check.
	XsdGoPkgHasElem_AlignmentIncludesFailedReadsallAlignmentDirectivesTypeschema_AlignmentIncludesFailedReads_XsdtBoolean_

	//	Whether the reference alignment includes unaligned reads.
	XsdGoPkgHasElem_AlignmentIncludesUnalignedReadsallAlignmentDirectivesTypeschema_AlignmentIncludesUnalignedReads_XsdtBoolean_
}

//	If the WalkHandlers.TAlignmentDirectivesType function is not nil (ie. was set by outside code), calls it with this TAlignmentDirectivesType instance as the single argument. Then calls the Walk() method on 3/3 embed(s) and 0/0 field(s) belonging to this TAlignmentDirectivesType instance.
func (me *TAlignmentDirectivesType) Walk() (err error) {
	if fn := WalkHandlers.TAlignmentDirectivesType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_AlignmentIncludesFailedReadsallAlignmentDirectivesTypeschema_AlignmentIncludesFailedReads_XsdtBoolean_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_AlignmentIncludesUnalignedReadsallAlignmentDirectivesTypeschema_AlignmentIncludesUnalignedReads_XsdtBoolean_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_AlignmentMarksDuplicateReadsallAlignmentDirectivesTypeschema_AlignmentMarksDuplicateReads_XsdtBoolean_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_DIRECTIVESallAlignmentProcessingTypeschema_Directives_TAlignmentDirectivesType_ struct {
	Directives *TAlignmentDirectivesType `xml:"DIRECTIVES"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_DIRECTIVESallAlignmentProcessingTypeschema_Directives_TAlignmentDirectivesType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_DIRECTIVESallAlignmentProcessingTypeschema_Directives_TAlignmentDirectivesType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_DIRECTIVESallAlignmentProcessingTypeschema_Directives_TAlignmentDirectivesType_ instance.
func (me *XsdGoPkgHasElem_DIRECTIVESallAlignmentProcessingTypeschema_Directives_TAlignmentDirectivesType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_DIRECTIVESallAlignmentProcessingTypeschema_Directives_TAlignmentDirectivesType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Directives.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TAlignmentProcessingType struct {
	XsdGoPkgHasElem_PIPELINEallDefaultProcessingTypeschema_Pipeline_TPipelineType_

	XsdGoPkgHasElem_DIRECTIVESallAlignmentProcessingTypeschema_Directives_TAlignmentDirectivesType_
}

//	If the WalkHandlers.TAlignmentProcessingType function is not nil (ie. was set by outside code), calls it with this TAlignmentProcessingType instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TAlignmentProcessingType instance.
func (me *TAlignmentProcessingType) Walk() (err error) {
	if fn := WalkHandlers.TAlignmentProcessingType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_PIPELINEallDefaultProcessingTypeschema_Pipeline_TPipelineType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_DIRECTIVESallAlignmentProcessingTypeschema_Directives_TAlignmentDirectivesType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_PROCESSINGsequenceTxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentREFERENCEALIGNMENTchoiceTxsdAnalysisTypeSequenceAnalysisTypeANALYSISTYPEsequenceAnalysisTypeschema_Processing_TAlignmentProcessingType_ struct {
	//	Identify the tools and processing steps used to produce the reference alignment, and specify
	//	directives used to load and interpret the data supplied by the submitter.
	Processing *TAlignmentProcessingType `xml:"PROCESSING"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_PROCESSINGsequenceTxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentREFERENCEALIGNMENTchoiceTxsdAnalysisTypeSequenceAnalysisTypeANALYSISTYPEsequenceAnalysisTypeschema_Processing_TAlignmentProcessingType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_PROCESSINGsequenceTxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentREFERENCEALIGNMENTchoiceTxsdAnalysisTypeSequenceAnalysisTypeANALYSISTYPEsequenceAnalysisTypeschema_Processing_TAlignmentProcessingType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_PROCESSINGsequenceTxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentREFERENCEALIGNMENTchoiceTxsdAnalysisTypeSequenceAnalysisTypeANALYSISTYPEsequenceAnalysisTypeschema_Processing_TAlignmentProcessingType_ instance.
func (me *XsdGoPkgHasElem_PROCESSINGsequenceTxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentREFERENCEALIGNMENTchoiceTxsdAnalysisTypeSequenceAnalysisTypeANALYSISTYPEsequenceAnalysisTypeschema_Processing_TAlignmentProcessingType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_PROCESSINGsequenceTxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentREFERENCEALIGNMENTchoiceTxsdAnalysisTypeSequenceAnalysisTypeANALYSISTYPEsequenceAnalysisTypeschema_Processing_TAlignmentProcessingType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Processing.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignment struct {
	//	Specification of the reference collection of sequences used in the alignment.
	XsdGoPkgHasElem_ASSEMBLYsequenceTxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentREFERENCEALIGNMENTchoiceTxsdAnalysisTypeSequenceAnalysisTypeANALYSISTYPEsequenceAnalysisTypeschema_Assembly_TxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceAssembly_

	//	Mapping between the run (read group) labels used in the alignment data file, and the runs in the
	//	Archive. This is optional when SRA runs are reffered by accession in submitted data.
	XsdGoPkgHasElem_RunLABELSsequenceTxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentREFERENCEALIGNMENTchoiceTxsdAnalysisTypeSequenceAnalysisTypeANALYSISTYPEsequenceAnalysisTypeschema_RunLabels_TxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceRunLabels_

	XsdGoPkgHasElem_SeqLABELSsequenceTxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentREFERENCEALIGNMENTchoiceTxsdAnalysisTypeSequenceAnalysisTypeANALYSISTYPEsequenceAnalysisTypeschema_SeqLabels_TxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceSeqLabels_

	//	Identify the tools and processing steps used to produce the reference alignment, and specify
	//	directives used to load and interpret the data supplied by the submitter.
	XsdGoPkgHasElem_PROCESSINGsequenceTxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentREFERENCEALIGNMENTchoiceTxsdAnalysisTypeSequenceAnalysisTypeANALYSISTYPEsequenceAnalysisTypeschema_Processing_TAlignmentProcessingType_
}

//	If the WalkHandlers.TxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignment function is not nil (ie. was set by outside code), calls it with this TxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignment instance as the single argument. Then calls the Walk() method on 4/4 embed(s) and 0/0 field(s) belonging to this TxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignment instance.
func (me *TxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignment) Walk() (err error) {
	if fn := WalkHandlers.TxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignment; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_ASSEMBLYsequenceTxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentREFERENCEALIGNMENTchoiceTxsdAnalysisTypeSequenceAnalysisTypeANALYSISTYPEsequenceAnalysisTypeschema_Assembly_TxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceAssembly_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_RunLABELSsequenceTxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentREFERENCEALIGNMENTchoiceTxsdAnalysisTypeSequenceAnalysisTypeANALYSISTYPEsequenceAnalysisTypeschema_RunLabels_TxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceRunLabels_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_SeqLABELSsequenceTxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentREFERENCEALIGNMENTchoiceTxsdAnalysisTypeSequenceAnalysisTypeANALYSISTYPEsequenceAnalysisTypeschema_SeqLabels_TxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceSeqLabels_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_PROCESSINGsequenceTxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentREFERENCEALIGNMENTchoiceTxsdAnalysisTypeSequenceAnalysisTypeANALYSISTYPEsequenceAnalysisTypeschema_Processing_TAlignmentProcessingType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_ReferenceALIGNMENTchoiceTxsdAnalysisTypeSequenceAnalysisTypeANALYSISTYPEsequenceAnalysisTypeschema_ReferenceAlignment_TxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignment_ struct {
	//	A multiple alignment of short reads against a reference substrate.
	ReferenceAlignment *TxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignment `xml:"REFERENCE_ALIGNMENT"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_ReferenceALIGNMENTchoiceTxsdAnalysisTypeSequenceAnalysisTypeANALYSISTYPEsequenceAnalysisTypeschema_ReferenceAlignment_TxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignment_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ReferenceALIGNMENTchoiceTxsdAnalysisTypeSequenceAnalysisTypeANALYSISTYPEsequenceAnalysisTypeschema_ReferenceAlignment_TxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignment_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_ReferenceALIGNMENTchoiceTxsdAnalysisTypeSequenceAnalysisTypeANALYSISTYPEsequenceAnalysisTypeschema_ReferenceAlignment_TxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignment_ instance.
func (me *XsdGoPkgHasElem_ReferenceALIGNMENTchoiceTxsdAnalysisTypeSequenceAnalysisTypeANALYSISTYPEsequenceAnalysisTypeschema_ReferenceAlignment_TxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignment_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_ReferenceALIGNMENTchoiceTxsdAnalysisTypeSequenceAnalysisTypeANALYSISTYPEsequenceAnalysisTypeschema_ReferenceAlignment_TxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignment_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.ReferenceAlignment.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Per sequence annotation of named attributes and values. Example: Processed sequencing data for submission
//	to dbEST without assembly. Reads have already been submitted to one of the sequence read archives in raw form. The fasta
//	data submitted under this analysis object result from the following treatments, which may serve to filter reads from the
//	raw dataset: - sequencing adapter removal - low quality trimming - poly-A tail removal - strand orientation - contaminant
//	removal This branch will be further specified in the future.
type TxsdAnalysisTypeSequenceAnalysisTypeChoiceSequenceAnnotation struct {
	//	Identify the tools and processing steps used to produce the sequence annotations.
	XsdGoPkgHasElem_PROCESSINGsequenceTxsdAnalysisTypeSequenceAnalysisTypeChoiceDeNovoAssemblyDENovoASSEMBLYchoiceTxsdAnalysisTypeSequenceAnalysisTypeANALYSISTYPEsequenceAnalysisTypeschema_Processing_TDefaultProcessingType_
}

//	If the WalkHandlers.TxsdAnalysisTypeSequenceAnalysisTypeChoiceSequenceAnnotation function is not nil (ie. was set by outside code), calls it with this TxsdAnalysisTypeSequenceAnalysisTypeChoiceSequenceAnnotation instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this TxsdAnalysisTypeSequenceAnalysisTypeChoiceSequenceAnnotation instance.
func (me *TxsdAnalysisTypeSequenceAnalysisTypeChoiceSequenceAnnotation) Walk() (err error) {
	if fn := WalkHandlers.TxsdAnalysisTypeSequenceAnalysisTypeChoiceSequenceAnnotation; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_PROCESSINGsequenceTxsdAnalysisTypeSequenceAnalysisTypeChoiceDeNovoAssemblyDENovoASSEMBLYchoiceTxsdAnalysisTypeSequenceAnalysisTypeANALYSISTYPEsequenceAnalysisTypeschema_Processing_TDefaultProcessingType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_SequenceANNOTATIONchoiceTxsdAnalysisTypeSequenceAnalysisTypeANALYSISTYPEsequenceAnalysisTypeschema_SequenceAnnotation_TxsdAnalysisTypeSequenceAnalysisTypeChoiceSequenceAnnotation_ struct {
	//	Per sequence annotation of named attributes and values. Example: Processed sequencing data for submission
	//	to dbEST without assembly. Reads have already been submitted to one of the sequence read archives in raw form. The fasta
	//	data submitted under this analysis object result from the following treatments, which may serve to filter reads from the
	//	raw dataset: - sequencing adapter removal - low quality trimming - poly-A tail removal - strand orientation - contaminant
	//	removal This branch will be further specified in the future.
	SequenceAnnotation *TxsdAnalysisTypeSequenceAnalysisTypeChoiceSequenceAnnotation `xml:"SEQUENCE_ANNOTATION"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_SequenceANNOTATIONchoiceTxsdAnalysisTypeSequenceAnalysisTypeANALYSISTYPEsequenceAnalysisTypeschema_SequenceAnnotation_TxsdAnalysisTypeSequenceAnalysisTypeChoiceSequenceAnnotation_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_SequenceANNOTATIONchoiceTxsdAnalysisTypeSequenceAnalysisTypeANALYSISTYPEsequenceAnalysisTypeschema_SequenceAnnotation_TxsdAnalysisTypeSequenceAnalysisTypeChoiceSequenceAnnotation_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_SequenceANNOTATIONchoiceTxsdAnalysisTypeSequenceAnalysisTypeANALYSISTYPEsequenceAnalysisTypeschema_SequenceAnnotation_TxsdAnalysisTypeSequenceAnalysisTypeChoiceSequenceAnnotation_ instance.
func (me *XsdGoPkgHasElem_SequenceANNOTATIONchoiceTxsdAnalysisTypeSequenceAnalysisTypeANALYSISTYPEsequenceAnalysisTypeschema_SequenceAnnotation_TxsdAnalysisTypeSequenceAnalysisTypeChoiceSequenceAnnotation_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_SequenceANNOTATIONchoiceTxsdAnalysisTypeSequenceAnalysisTypeANALYSISTYPEsequenceAnalysisTypeschema_SequenceAnnotation_TxsdAnalysisTypeSequenceAnalysisTypeChoiceSequenceAnnotation_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.SequenceAnnotation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	A track of read placement coverage used to measure abundance of a library with respect to a reference.
//	This branch will be further specified in the future.
type TxsdAnalysisTypeSequenceAnalysisTypeChoiceAbundanceMeasurement struct {
	//	Identify the tools and processing steps used to produce the abundance measurements (coverage
	//	tracks).
	XsdGoPkgHasElem_PROCESSINGsequenceTxsdAnalysisTypeSequenceAnalysisTypeChoiceDeNovoAssemblyDENovoASSEMBLYchoiceTxsdAnalysisTypeSequenceAnalysisTypeANALYSISTYPEsequenceAnalysisTypeschema_Processing_TDefaultProcessingType_
}

//	If the WalkHandlers.TxsdAnalysisTypeSequenceAnalysisTypeChoiceAbundanceMeasurement function is not nil (ie. was set by outside code), calls it with this TxsdAnalysisTypeSequenceAnalysisTypeChoiceAbundanceMeasurement instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this TxsdAnalysisTypeSequenceAnalysisTypeChoiceAbundanceMeasurement instance.
func (me *TxsdAnalysisTypeSequenceAnalysisTypeChoiceAbundanceMeasurement) Walk() (err error) {
	if fn := WalkHandlers.TxsdAnalysisTypeSequenceAnalysisTypeChoiceAbundanceMeasurement; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_PROCESSINGsequenceTxsdAnalysisTypeSequenceAnalysisTypeChoiceDeNovoAssemblyDENovoASSEMBLYchoiceTxsdAnalysisTypeSequenceAnalysisTypeANALYSISTYPEsequenceAnalysisTypeschema_Processing_TDefaultProcessingType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_AbundanceMEASUREMENTchoiceTxsdAnalysisTypeSequenceAnalysisTypeANALYSISTYPEsequenceAnalysisTypeschema_AbundanceMeasurement_TxsdAnalysisTypeSequenceAnalysisTypeChoiceAbundanceMeasurement_ struct {
	//	A track of read placement coverage used to measure abundance of a library with respect to a reference.
	//	This branch will be further specified in the future.
	AbundanceMeasurement *TxsdAnalysisTypeSequenceAnalysisTypeChoiceAbundanceMeasurement `xml:"ABUNDANCE_MEASUREMENT"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_AbundanceMEASUREMENTchoiceTxsdAnalysisTypeSequenceAnalysisTypeANALYSISTYPEsequenceAnalysisTypeschema_AbundanceMeasurement_TxsdAnalysisTypeSequenceAnalysisTypeChoiceAbundanceMeasurement_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_AbundanceMEASUREMENTchoiceTxsdAnalysisTypeSequenceAnalysisTypeANALYSISTYPEsequenceAnalysisTypeschema_AbundanceMeasurement_TxsdAnalysisTypeSequenceAnalysisTypeChoiceAbundanceMeasurement_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_AbundanceMEASUREMENTchoiceTxsdAnalysisTypeSequenceAnalysisTypeANALYSISTYPEsequenceAnalysisTypeschema_AbundanceMeasurement_TxsdAnalysisTypeSequenceAnalysisTypeChoiceAbundanceMeasurement_ instance.
func (me *XsdGoPkgHasElem_AbundanceMEASUREMENTchoiceTxsdAnalysisTypeSequenceAnalysisTypeANALYSISTYPEsequenceAnalysisTypeschema_AbundanceMeasurement_TxsdAnalysisTypeSequenceAnalysisTypeChoiceAbundanceMeasurement_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_AbundanceMEASUREMENTchoiceTxsdAnalysisTypeSequenceAnalysisTypeANALYSISTYPEsequenceAnalysisTypeschema_AbundanceMeasurement_TxsdAnalysisTypeSequenceAnalysisTypeChoiceAbundanceMeasurement_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.AbundanceMeasurement.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdAnalysisTypeSequenceAnalysisType struct {
	//	A placement of sequences including trace, SRA, GI records into a multiple alignment from which a
	//	consensus is computed. This branch will be further specified in the future.
	XsdGoPkgHasElem_DeNovoASSEMBLYchoiceTxsdAnalysisTypeSequenceAnalysisTypeANALYSISTYPEsequenceAnalysisTypeschema_DeNovoAssembly_TxsdAnalysisTypeSequenceAnalysisTypeChoiceDeNovoAssembly_

	//	A multiple alignment of short reads against a reference substrate.
	XsdGoPkgHasElem_ReferenceALIGNMENTchoiceTxsdAnalysisTypeSequenceAnalysisTypeANALYSISTYPEsequenceAnalysisTypeschema_ReferenceAlignment_TxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignment_

	//	Per sequence annotation of named attributes and values. Example: Processed sequencing data for submission
	//	to dbEST without assembly. Reads have already been submitted to one of the sequence read archives in raw form. The fasta
	//	data submitted under this analysis object result from the following treatments, which may serve to filter reads from the
	//	raw dataset: - sequencing adapter removal - low quality trimming - poly-A tail removal - strand orientation - contaminant
	//	removal This branch will be further specified in the future.
	XsdGoPkgHasElem_SequenceANNOTATIONchoiceTxsdAnalysisTypeSequenceAnalysisTypeANALYSISTYPEsequenceAnalysisTypeschema_SequenceAnnotation_TxsdAnalysisTypeSequenceAnalysisTypeChoiceSequenceAnnotation_

	//	A track of read placement coverage used to measure abundance of a library with respect to a reference.
	//	This branch will be further specified in the future.
	XsdGoPkgHasElem_AbundanceMEASUREMENTchoiceTxsdAnalysisTypeSequenceAnalysisTypeANALYSISTYPEsequenceAnalysisTypeschema_AbundanceMeasurement_TxsdAnalysisTypeSequenceAnalysisTypeChoiceAbundanceMeasurement_
}

//	If the WalkHandlers.TxsdAnalysisTypeSequenceAnalysisType function is not nil (ie. was set by outside code), calls it with this TxsdAnalysisTypeSequenceAnalysisType instance as the single argument. Then calls the Walk() method on 4/4 embed(s) and 0/0 field(s) belonging to this TxsdAnalysisTypeSequenceAnalysisType instance.
func (me *TxsdAnalysisTypeSequenceAnalysisType) Walk() (err error) {
	if fn := WalkHandlers.TxsdAnalysisTypeSequenceAnalysisType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_SequenceANNOTATIONchoiceTxsdAnalysisTypeSequenceAnalysisTypeANALYSISTYPEsequenceAnalysisTypeschema_SequenceAnnotation_TxsdAnalysisTypeSequenceAnalysisTypeChoiceSequenceAnnotation_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_AbundanceMEASUREMENTchoiceTxsdAnalysisTypeSequenceAnalysisTypeANALYSISTYPEsequenceAnalysisTypeschema_AbundanceMeasurement_TxsdAnalysisTypeSequenceAnalysisTypeChoiceAbundanceMeasurement_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_DeNovoASSEMBLYchoiceTxsdAnalysisTypeSequenceAnalysisTypeANALYSISTYPEsequenceAnalysisTypeschema_DeNovoAssembly_TxsdAnalysisTypeSequenceAnalysisTypeChoiceDeNovoAssembly_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_ReferenceALIGNMENTchoiceTxsdAnalysisTypeSequenceAnalysisTypeANALYSISTYPEsequenceAnalysisTypeschema_ReferenceAlignment_TxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignment_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_AnalysisTYPEsequenceAnalysisTypeschema_AnalysisType_TxsdAnalysisTypeSequenceAnalysisType_ struct {
	//	Supported analysis types.
	AnalysisType *TxsdAnalysisTypeSequenceAnalysisType `xml:"ANALYSIS_TYPE"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_AnalysisTYPEsequenceAnalysisTypeschema_AnalysisType_TxsdAnalysisTypeSequenceAnalysisType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_AnalysisTYPEsequenceAnalysisTypeschema_AnalysisType_TxsdAnalysisTypeSequenceAnalysisType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_AnalysisTYPEsequenceAnalysisTypeschema_AnalysisType_TxsdAnalysisTypeSequenceAnalysisType_ instance.
func (me *XsdGoPkgHasElem_AnalysisTYPEsequenceAnalysisTypeschema_AnalysisType_TxsdAnalysisTypeSequenceAnalysisType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_AnalysisTYPEsequenceAnalysisTypeschema_AnalysisType_TxsdAnalysisTypeSequenceAnalysisType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.AnalysisType.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	SRA object(s) targeted for analysis. Run - One or more runs that are assembled, aligned, or analyzed. Sample -
//	All the sequencing data for this sample are being assembled, aligned, or analyzed. Experiment - All the sequencing data for this
//	experiment are being assembled, aligned, or analyzed. Study - All the sequencing data for this study are being assembled,
//	aligned, or analyzed.
//	Set of reference IDs to target record. This block is intended to replace the use of the less structured
//	RefNameGroup identifiers.
type XsdGoPkgHasElems_IDENTIFIERSsequenceTxsdAnalysisTypeSequenceTargetsTARGETSsequenceAnalysisTypeschema_Identifiers_TIdentifierType_ struct {
	//	Set of reference IDs to target record. This block is intended to replace the use of the less structured
	//	RefNameGroup identifiers.
	Identifierses []*TIdentifierType `xml:"IDENTIFIERS"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_IDENTIFIERSsequenceTxsdAnalysisTypeSequenceTargetsTARGETSsequenceAnalysisTypeschema_Identifiers_TIdentifierType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_IDENTIFIERSsequenceTxsdAnalysisTypeSequenceTargetsTARGETSsequenceAnalysisTypeschema_Identifiers_TIdentifierType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_IDENTIFIERSsequenceTxsdAnalysisTypeSequenceTargetsTARGETSsequenceAnalysisTypeschema_Identifiers_TIdentifierType_ instance.
func (me *XsdGoPkgHasElems_IDENTIFIERSsequenceTxsdAnalysisTypeSequenceTargetsTARGETSsequenceAnalysisTypeschema_Identifiers_TIdentifierType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_IDENTIFIERSsequenceTxsdAnalysisTypeSequenceTargetsTARGETSsequenceAnalysisTypeschema_Identifiers_TIdentifierType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Identifierses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	A SRA object that is the target of the analysis records. For example, a run, sample, or sequence can be
//	the object of the analysis.
//	The SraLinkType mechanism encodes local references between SRA objects. These references are local to the Home
//	Archive and during archival are resolved to exportable references suitable for mirroring between Archives. SraLinks can be used as
//	temporary place holders for pre-published or post-suppressed relationships that will not be mirrored between Archives.
//	SRA link type.
type TxsdSraLinkTypeSraObjectType xsdt.String

//	This convenience method just performs a simple type conversion to TxsdSraLinkTypeSraObjectType's alias type xsdt.String.
func (me TxsdSraLinkTypeSraObjectType) ToXsdtString() xsdt.String { return xsdt.String(me) }

//	Returns true if the value of this enumerated TxsdSraLinkTypeSraObjectType is "STUDY".
func (me TxsdSraLinkTypeSraObjectType) IsStudy() bool { return me.String() == "STUDY" }

//	Returns true if the value of this enumerated TxsdSraLinkTypeSraObjectType is "SAMPLE".
func (me TxsdSraLinkTypeSraObjectType) IsSample() bool { return me.String() == "SAMPLE" }

//	Returns true if the value of this enumerated TxsdSraLinkTypeSraObjectType is "ANALYSIS".
func (me TxsdSraLinkTypeSraObjectType) IsAnalysis() bool { return me.String() == "ANALYSIS" }

//	Returns true if the value of this enumerated TxsdSraLinkTypeSraObjectType is "EXPERIMENT".
func (me TxsdSraLinkTypeSraObjectType) IsExperiment() bool { return me.String() == "EXPERIMENT" }

//	Returns true if the value of this enumerated TxsdSraLinkTypeSraObjectType is "RUN".
func (me TxsdSraLinkTypeSraObjectType) IsRun() bool { return me.String() == "RUN" }

//	Since TxsdSraLinkTypeSraObjectType is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdSraLinkTypeSraObjectType) Set(s string) { (*xsdt.String)(me).Set(s) }

//	Since TxsdSraLinkTypeSraObjectType is just a simple String type, this merely returns the current string value.
func (me TxsdSraLinkTypeSraObjectType) String() string { return xsdt.String(me).String() }

type XsdGoPkgHasAttr_SraObjectType_TxsdSraLinkTypeSraObjectType_ struct {
	//	SRA link type.
	SraObjectType TxsdSraLinkTypeSraObjectType `xml:"sra_object_type,attr"`
}

type TSraLinkType struct {
	XsdGoPkgHasAtts_RefNameGroup

	//	SRA link type.
	XsdGoPkgHasAttr_SraObjectType_TxsdSraLinkTypeSraObjectType_
}

//	If the WalkHandlers.TSraLinkType function is not nil (ie. was set by outside code), calls it with this TSraLinkType instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TSraLinkType instance.
func (me *TSraLinkType) Walk() (err error) {
	if fn := WalkHandlers.TSraLinkType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_TARGETsequenceTxsdAnalysisTypeSequenceTargetsTARGETSsequenceAnalysisTypeschema_Target_TSraLinkType_ struct {
	//	A SRA object that is the target of the analysis records. For example, a run, sample, or sequence can be
	//	the object of the analysis.
	Targets []*TSraLinkType `xml:"TARGET"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_TARGETsequenceTxsdAnalysisTypeSequenceTargetsTARGETSsequenceAnalysisTypeschema_Target_TSraLinkType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_TARGETsequenceTxsdAnalysisTypeSequenceTargetsTARGETSsequenceAnalysisTypeschema_Target_TSraLinkType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_TARGETsequenceTxsdAnalysisTypeSequenceTargetsTARGETSsequenceAnalysisTypeschema_Target_TSraLinkType_ instance.
func (me *XsdGoPkgHasElems_TARGETsequenceTxsdAnalysisTypeSequenceTargetsTARGETSsequenceAnalysisTypeschema_Target_TSraLinkType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_TARGETsequenceTxsdAnalysisTypeSequenceTargetsTARGETSsequenceAnalysisTypeschema_Target_TSraLinkType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Targets {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdAnalysisTypeSequenceTargets struct {
	//	A SRA object that is the target of the analysis records. For example, a run, sample, or sequence can be
	//	the object of the analysis.
	XsdGoPkgHasElems_TARGETsequenceTxsdAnalysisTypeSequenceTargetsTARGETSsequenceAnalysisTypeschema_Target_TSraLinkType_

	//	Set of reference IDs to target record. This block is intended to replace the use of the less structured
	//	RefNameGroup identifiers.
	XsdGoPkgHasElems_IDENTIFIERSsequenceTxsdAnalysisTypeSequenceTargetsTARGETSsequenceAnalysisTypeschema_Identifiers_TIdentifierType_
}

//	If the WalkHandlers.TxsdAnalysisTypeSequenceTargets function is not nil (ie. was set by outside code), calls it with this TxsdAnalysisTypeSequenceTargets instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TxsdAnalysisTypeSequenceTargets instance.
func (me *TxsdAnalysisTypeSequenceTargets) Walk() (err error) {
	if fn := WalkHandlers.TxsdAnalysisTypeSequenceTargets; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_IDENTIFIERSsequenceTxsdAnalysisTypeSequenceTargetsTARGETSsequenceAnalysisTypeschema_Identifiers_TIdentifierType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_TARGETsequenceTxsdAnalysisTypeSequenceTargetsTARGETSsequenceAnalysisTypeschema_Target_TSraLinkType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_TARGETSsequenceAnalysisTypeschema_Targets_TxsdAnalysisTypeSequenceTargets_ struct {
	//	SRA object(s) targeted for analysis. Run - One or more runs that are assembled, aligned, or analyzed. Sample -
	//	All the sequencing data for this sample are being assembled, aligned, or analyzed. Experiment - All the sequencing data for this
	//	experiment are being assembled, aligned, or analyzed. Study - All the sequencing data for this study are being assembled,
	//	aligned, or analyzed.
	Targets *TxsdAnalysisTypeSequenceTargets `xml:"TARGETS"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_TARGETSsequenceAnalysisTypeschema_Targets_TxsdAnalysisTypeSequenceTargets_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_TARGETSsequenceAnalysisTypeschema_Targets_TxsdAnalysisTypeSequenceTargets_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_TARGETSsequenceAnalysisTypeschema_Targets_TxsdAnalysisTypeSequenceTargets_ instance.
func (me *XsdGoPkgHasElem_TARGETSsequenceAnalysisTypeschema_Targets_TxsdAnalysisTypeSequenceTargets_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_TARGETSsequenceAnalysisTypeschema_Targets_TxsdAnalysisTypeSequenceTargets_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Targets.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The ISO date when this analysis was produced.
type XsdGoPkgHasAttr_AnalysisDate_XsdtDateTime_ struct {
	//	The ISO date when this analysis was produced.
	AnalysisDate xsdt.DateTime `xml:"analysis_date,attr"`
}

//	The STUDY_REF descriptor establishes the relationship of the analysis to the parent study. This can either be
//	the accession of an existing archived study record, or a reference to a new study record in the same submission or same center
//	(which does not yet have an accession).
type TxsdAnalysisTypeSequenceStudyRef struct {
	//	Set of reference IDs to parent study record. This block is intended to replace the use of the less
	//	structured RefNameGroup identifiers.
	XsdGoPkgHasElem_IDENTIFIERSsequenceAnalysisTypeschema_Identifiers_TIdentifierType_

	XsdGoPkgHasAtts_RefNameGroup
}

//	If the WalkHandlers.TxsdAnalysisTypeSequenceStudyRef function is not nil (ie. was set by outside code), calls it with this TxsdAnalysisTypeSequenceStudyRef instance as the single argument. Then calls the Walk() method on 1/2 embed(s) and 0/0 field(s) belonging to this TxsdAnalysisTypeSequenceStudyRef instance.
func (me *TxsdAnalysisTypeSequenceStudyRef) Walk() (err error) {
	if fn := WalkHandlers.TxsdAnalysisTypeSequenceStudyRef; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_IDENTIFIERSsequenceAnalysisTypeschema_Identifiers_TIdentifierType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_StudyREFsequenceAnalysisTypeschema_StudyRef_TxsdAnalysisTypeSequenceStudyRef_ struct {
	//	The STUDY_REF descriptor establishes the relationship of the analysis to the parent study. This can either be
	//	the accession of an existing archived study record, or a reference to a new study record in the same submission or same center
	//	(which does not yet have an accession).
	StudyRef *TxsdAnalysisTypeSequenceStudyRef `xml:"STUDY_REF"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_StudyREFsequenceAnalysisTypeschema_StudyRef_TxsdAnalysisTypeSequenceStudyRef_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_StudyREFsequenceAnalysisTypeschema_StudyRef_TxsdAnalysisTypeSequenceStudyRef_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_StudyREFsequenceAnalysisTypeschema_StudyRef_TxsdAnalysisTypeSequenceStudyRef_ instance.
func (me *XsdGoPkgHasElem_StudyREFsequenceAnalysisTypeschema_StudyRef_TxsdAnalysisTypeSequenceStudyRef_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_StudyREFsequenceAnalysisTypeschema_StudyRef_TxsdAnalysisTypeSequenceStudyRef_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.StudyRef.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Links to resources related to this analysis or analysis set (publication, datasets, online databases).
type XsdGoPkgHasElems_AnalysisLINKsequenceTxsdAnalysisTypeSequenceAnalysisLinksANALYSISLINKSsequenceAnalysisTypeschema_AnalysisLink_TLinkType_ struct {
	AnalysisLinks []*TLinkType `xml:"ANALYSIS_LINK"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_AnalysisLINKsequenceTxsdAnalysisTypeSequenceAnalysisLinksANALYSISLINKSsequenceAnalysisTypeschema_AnalysisLink_TLinkType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_AnalysisLINKsequenceTxsdAnalysisTypeSequenceAnalysisLinksANALYSISLINKSsequenceAnalysisTypeschema_AnalysisLink_TLinkType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_AnalysisLINKsequenceTxsdAnalysisTypeSequenceAnalysisLinksANALYSISLINKSsequenceAnalysisTypeschema_AnalysisLink_TLinkType_ instance.
func (me *XsdGoPkgHasElems_AnalysisLINKsequenceTxsdAnalysisTypeSequenceAnalysisLinksANALYSISLINKSsequenceAnalysisTypeschema_AnalysisLink_TLinkType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_AnalysisLINKsequenceTxsdAnalysisTypeSequenceAnalysisLinksANALYSISLINKSsequenceAnalysisTypeschema_AnalysisLink_TLinkType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.AnalysisLinks {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdAnalysisTypeSequenceAnalysisLinks struct {
	XsdGoPkgHasElems_AnalysisLINKsequenceTxsdAnalysisTypeSequenceAnalysisLinksANALYSISLINKSsequenceAnalysisTypeschema_AnalysisLink_TLinkType_
}

//	If the WalkHandlers.TxsdAnalysisTypeSequenceAnalysisLinks function is not nil (ie. was set by outside code), calls it with this TxsdAnalysisTypeSequenceAnalysisLinks instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this TxsdAnalysisTypeSequenceAnalysisLinks instance.
func (me *TxsdAnalysisTypeSequenceAnalysisLinks) Walk() (err error) {
	if fn := WalkHandlers.TxsdAnalysisTypeSequenceAnalysisLinks; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_AnalysisLINKsequenceTxsdAnalysisTypeSequenceAnalysisLinksANALYSISLINKSsequenceAnalysisTypeschema_AnalysisLink_TLinkType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_AnalysisLINKSsequenceAnalysisTypeschema_AnalysisLinks_TxsdAnalysisTypeSequenceAnalysisLinks_ struct {
	//	Links to resources related to this analysis or analysis set (publication, datasets, online databases).
	AnalysisLinks *TxsdAnalysisTypeSequenceAnalysisLinks `xml:"ANALYSIS_LINKS"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_AnalysisLINKSsequenceAnalysisTypeschema_AnalysisLinks_TxsdAnalysisTypeSequenceAnalysisLinks_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_AnalysisLINKSsequenceAnalysisTypeschema_AnalysisLinks_TxsdAnalysisTypeSequenceAnalysisLinks_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_AnalysisLINKSsequenceAnalysisTypeschema_AnalysisLinks_TxsdAnalysisTypeSequenceAnalysisLinks_ instance.
func (me *XsdGoPkgHasElem_AnalysisLINKSsequenceAnalysisTypeschema_AnalysisLinks_TxsdAnalysisTypeSequenceAnalysisLinks_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_AnalysisLINKSsequenceAnalysisTypeschema_AnalysisLinks_TxsdAnalysisTypeSequenceAnalysisLinks_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.AnalysisLinks.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Properties and attributes of an analysis. These can be entered as free-form tag-value pairs. For certain
//	studies, submitters may be asked to follow a community established ontology when describing the work.
//	Reusable attributes to encode tag-value pairs with optional units.
//	Optional scientific units.
type XsdGoPkgHasElem_UNITSallAttributeTypeschema_Units_XsdtString_ struct {
	//	Optional scientific units.
	Units xsdt.String `xml:"UNITS"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_UNITSallAttributeTypeschema_Units_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_UNITSallAttributeTypeschema_Units_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_UNITSallAttributeTypeschema_Units_XsdtString_ instance.
func (me *XsdGoPkgHasElem_UNITSallAttributeTypeschema_Units_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_UNITSallAttributeTypeschema_Units_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Name of the attribute.
type XsdGoPkgHasElem_TAGallAttributeTypeschema_Tag_XsdtString_ struct {
	//	Name of the attribute.
	Tag xsdt.String `xml:"TAG"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_TAGallAttributeTypeschema_Tag_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_TAGallAttributeTypeschema_Tag_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_TAGallAttributeTypeschema_Tag_XsdtString_ instance.
func (me *XsdGoPkgHasElem_TAGallAttributeTypeschema_Tag_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_TAGallAttributeTypeschema_Tag_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Value of the attribute.
type XsdGoPkgHasElem_VALUEallAttributeTypeschema_Value_XsdtString_ struct {
	//	Value of the attribute.
	Value xsdt.String `xml:"VALUE"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_VALUEallAttributeTypeschema_Value_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_VALUEallAttributeTypeschema_Value_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_VALUEallAttributeTypeschema_Value_XsdtString_ instance.
func (me *XsdGoPkgHasElem_VALUEallAttributeTypeschema_Value_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_VALUEallAttributeTypeschema_Value_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TAttributeType struct {
	//	Value of the attribute.
	XsdGoPkgHasElem_VALUEallAttributeTypeschema_Value_XsdtString_

	//	Optional scientific units.
	XsdGoPkgHasElem_UNITSallAttributeTypeschema_Units_XsdtString_

	//	Name of the attribute.
	XsdGoPkgHasElem_TAGallAttributeTypeschema_Tag_XsdtString_
}

//	If the WalkHandlers.TAttributeType function is not nil (ie. was set by outside code), calls it with this TAttributeType instance as the single argument. Then calls the Walk() method on 3/3 embed(s) and 0/0 field(s) belonging to this TAttributeType instance.
func (me *TAttributeType) Walk() (err error) {
	if fn := WalkHandlers.TAttributeType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_TAGallAttributeTypeschema_Tag_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_VALUEallAttributeTypeschema_Value_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_UNITSallAttributeTypeschema_Units_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_AnalysisATTRIBUTEsequenceTxsdAnalysisTypeSequenceAnalysisAttributesANALYSISATTRIBUTESsequenceAnalysisTypeschema_AnalysisAttribute_TAttributeType_ struct {
	AnalysisAttributes []*TAttributeType `xml:"ANALYSIS_ATTRIBUTE"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_AnalysisATTRIBUTEsequenceTxsdAnalysisTypeSequenceAnalysisAttributesANALYSISATTRIBUTESsequenceAnalysisTypeschema_AnalysisAttribute_TAttributeType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_AnalysisATTRIBUTEsequenceTxsdAnalysisTypeSequenceAnalysisAttributesANALYSISATTRIBUTESsequenceAnalysisTypeschema_AnalysisAttribute_TAttributeType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_AnalysisATTRIBUTEsequenceTxsdAnalysisTypeSequenceAnalysisAttributesANALYSISATTRIBUTESsequenceAnalysisTypeschema_AnalysisAttribute_TAttributeType_ instance.
func (me *XsdGoPkgHasElems_AnalysisATTRIBUTEsequenceTxsdAnalysisTypeSequenceAnalysisAttributesANALYSISATTRIBUTESsequenceAnalysisTypeschema_AnalysisAttribute_TAttributeType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_AnalysisATTRIBUTEsequenceTxsdAnalysisTypeSequenceAnalysisAttributesANALYSISATTRIBUTESsequenceAnalysisTypeschema_AnalysisAttribute_TAttributeType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.AnalysisAttributes {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdAnalysisTypeSequenceAnalysisAttributes struct {
	XsdGoPkgHasElems_AnalysisATTRIBUTEsequenceTxsdAnalysisTypeSequenceAnalysisAttributesANALYSISATTRIBUTESsequenceAnalysisTypeschema_AnalysisAttribute_TAttributeType_
}

//	If the WalkHandlers.TxsdAnalysisTypeSequenceAnalysisAttributes function is not nil (ie. was set by outside code), calls it with this TxsdAnalysisTypeSequenceAnalysisAttributes instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this TxsdAnalysisTypeSequenceAnalysisAttributes instance.
func (me *TxsdAnalysisTypeSequenceAnalysisAttributes) Walk() (err error) {
	if fn := WalkHandlers.TxsdAnalysisTypeSequenceAnalysisAttributes; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_AnalysisATTRIBUTEsequenceTxsdAnalysisTypeSequenceAnalysisAttributesANALYSISATTRIBUTESsequenceAnalysisTypeschema_AnalysisAttribute_TAttributeType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_AnalysisATTRIBUTESsequenceAnalysisTypeschema_AnalysisAttributes_TxsdAnalysisTypeSequenceAnalysisAttributes_ struct {
	//	Properties and attributes of an analysis. These can be entered as free-form tag-value pairs. For certain
	//	studies, submitters may be asked to follow a community established ontology when describing the work.
	AnalysisAttributes *TxsdAnalysisTypeSequenceAnalysisAttributes `xml:"ANALYSIS_ATTRIBUTES"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_AnalysisATTRIBUTESsequenceAnalysisTypeschema_AnalysisAttributes_TxsdAnalysisTypeSequenceAnalysisAttributes_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_AnalysisATTRIBUTESsequenceAnalysisTypeschema_AnalysisAttributes_TxsdAnalysisTypeSequenceAnalysisAttributes_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_AnalysisATTRIBUTESsequenceAnalysisTypeschema_AnalysisAttributes_TxsdAnalysisTypeSequenceAnalysisAttributes_ instance.
func (me *XsdGoPkgHasElem_AnalysisATTRIBUTESsequenceAnalysisTypeschema_AnalysisAttributes_TxsdAnalysisTypeSequenceAnalysisAttributes_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_AnalysisATTRIBUTESsequenceAnalysisTypeschema_AnalysisAttributes_TxsdAnalysisTypeSequenceAnalysisAttributes_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.AnalysisAttributes.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	One or more blocks of data and associated file(s). Each data block may be a partition of the overall analysis
//	object.
//	Actual run data are contained in one of the files listed in the submission manifest. Each data block is
//	represented by one SRF file, one SFF file, one compressed fastq file, or one compressed tar archive file.
//	The name or relative pathname of an analysis file. The actual file name extension is irrelevant so long as the
//	filetype is correctly indicated, and in the case of binary files the correct magic number is embedded in the file.
type XsdGoPkgHasAttr_Filename_XsdtString_ struct {
	//	The name or relative pathname of an analysis file. The actual file name extension is irrelevant so long as the
	//	filetype is correctly indicated, and in the case of binary files the correct magic number is embedded in the file.
	Filename xsdt.String `xml:"filename,attr"`
}

type TxsdAnalysisFileTypeFiletype xsdt.String

//	Since TxsdAnalysisFileTypeFiletype is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdAnalysisFileTypeFiletype) Set(s string) { (*xsdt.String)(me).Set(s) }

//	This convenience method just performs a simple type conversion to TxsdAnalysisFileTypeFiletype's alias type xsdt.String.
func (me TxsdAnalysisFileTypeFiletype) ToXsdtString() xsdt.String { return xsdt.String(me) }

//	Returns true if the value of this enumerated TxsdAnalysisFileTypeFiletype is "wig".
func (me TxsdAnalysisFileTypeFiletype) IsWig() bool { return me.String() == "wig" }

//	Returns true if the value of this enumerated TxsdAnalysisFileTypeFiletype is "VCF".
func (me TxsdAnalysisFileTypeFiletype) IsVcf() bool { return me.String() == "VCF" }

//	Returns true if the value of this enumerated TxsdAnalysisFileTypeFiletype is "MAF".
func (me TxsdAnalysisFileTypeFiletype) IsMaf() bool { return me.String() == "MAF" }

//	Returns true if the value of this enumerated TxsdAnalysisFileTypeFiletype is "tsv".
func (me TxsdAnalysisFileTypeFiletype) IsTsv() bool { return me.String() == "tsv" }

//	Returns true if the value of this enumerated TxsdAnalysisFileTypeFiletype is "ace".
func (me TxsdAnalysisFileTypeFiletype) IsAce() bool { return me.String() == "ace" }

//	Returns true if the value of this enumerated TxsdAnalysisFileTypeFiletype is "tab".
func (me TxsdAnalysisFileTypeFiletype) IsTab() bool { return me.String() == "tab" }

//	Returns true if the value of this enumerated TxsdAnalysisFileTypeFiletype is "csv".
func (me TxsdAnalysisFileTypeFiletype) IsCsv() bool { return me.String() == "csv" }

//	Since TxsdAnalysisFileTypeFiletype is just a simple String type, this merely returns the current string value.
func (me TxsdAnalysisFileTypeFiletype) String() string { return xsdt.String(me).String() }

//	Returns true if the value of this enumerated TxsdAnalysisFileTypeFiletype is "bam".
func (me TxsdAnalysisFileTypeFiletype) IsBam() bool { return me.String() == "bam" }

//	Returns true if the value of this enumerated TxsdAnalysisFileTypeFiletype is "GFF".
func (me TxsdAnalysisFileTypeFiletype) IsGff() bool { return me.String() == "GFF" }

//	Returns true if the value of this enumerated TxsdAnalysisFileTypeFiletype is "fasta".
func (me TxsdAnalysisFileTypeFiletype) IsFasta() bool { return me.String() == "fasta" }

//	Returns true if the value of this enumerated TxsdAnalysisFileTypeFiletype is "BED".
func (me TxsdAnalysisFileTypeFiletype) IsBed() bool { return me.String() == "BED" }

type XsdGoPkgHasAttr_Filetype_TxsdAnalysisFileTypeFiletype_ struct {
	Filetype TxsdAnalysisFileTypeFiletype `xml:"filetype,attr"`
}

//	Checksum method used.
type TxsdAnalysisFileTypeChecksumMethod xsdt.String

//	Since TxsdAnalysisFileTypeChecksumMethod is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdAnalysisFileTypeChecksumMethod) Set(s string) { (*xsdt.String)(me).Set(s) }

//	Since TxsdAnalysisFileTypeChecksumMethod is just a simple String type, this merely returns the current string value.
func (me TxsdAnalysisFileTypeChecksumMethod) String() string { return xsdt.String(me).String() }

//	This convenience method just performs a simple type conversion to TxsdAnalysisFileTypeChecksumMethod's alias type xsdt.String.
func (me TxsdAnalysisFileTypeChecksumMethod) ToXsdtString() xsdt.String { return xsdt.String(me) }

//	Returns true if the value of this enumerated TxsdAnalysisFileTypeChecksumMethod is "MD5".
func (me TxsdAnalysisFileTypeChecksumMethod) IsMd5() bool { return me.String() == "MD5" }

type XsdGoPkgHasAttr_ChecksumMethod_TxsdAnalysisFileTypeChecksumMethod_ struct {
	//	Checksum method used.
	ChecksumMethod TxsdAnalysisFileTypeChecksumMethod `xml:"checksum_method,attr"`
}

//	Checksum of the file.
type XsdGoPkgHasAttr_Checksum_XsdtString_ struct {
	//	Checksum of the file.
	Checksum xsdt.String `xml:"checksum,attr"`
}

type TAnalysisFileType struct {
	//	Checksum of the file.
	XsdGoPkgHasAttr_Checksum_XsdtString_

	//	The name or relative pathname of an analysis file. The actual file name extension is irrelevant so long as the
	//	filetype is correctly indicated, and in the case of binary files the correct magic number is embedded in the file.
	XsdGoPkgHasAttr_Filename_XsdtString_

	XsdGoPkgHasAttr_Filetype_TxsdAnalysisFileTypeFiletype_

	//	Checksum method used.
	XsdGoPkgHasAttr_ChecksumMethod_TxsdAnalysisFileTypeChecksumMethod_
}

//	If the WalkHandlers.TAnalysisFileType function is not nil (ie. was set by outside code), calls it with this TAnalysisFileType instance as the single argument. Then calls the Walk() method on 0/4 embed(s) and 0/0 field(s) belonging to this TAnalysisFileType instance.
func (me *TAnalysisFileType) Walk() (err error) {
	if fn := WalkHandlers.TAnalysisFileType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_FILEsequenceTxsdAnalysisTypeSequenceSequenceDataBlockAllFilesFILESallTxsdAnalysisTypeSequenceSequenceDataBlockDATABLOCKsequencesequenceAnalysisTypeschema_File_TAnalysisFileType_ struct {
	Files []*TAnalysisFileType `xml:"FILE"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_FILEsequenceTxsdAnalysisTypeSequenceSequenceDataBlockAllFilesFILESallTxsdAnalysisTypeSequenceSequenceDataBlockDATABLOCKsequencesequenceAnalysisTypeschema_File_TAnalysisFileType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_FILEsequenceTxsdAnalysisTypeSequenceSequenceDataBlockAllFilesFILESallTxsdAnalysisTypeSequenceSequenceDataBlockDATABLOCKsequencesequenceAnalysisTypeschema_File_TAnalysisFileType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_FILEsequenceTxsdAnalysisTypeSequenceSequenceDataBlockAllFilesFILESallTxsdAnalysisTypeSequenceSequenceDataBlockDATABLOCKsequencesequenceAnalysisTypeschema_File_TAnalysisFileType_ instance.
func (me *XsdGoPkgHasElems_FILEsequenceTxsdAnalysisTypeSequenceSequenceDataBlockAllFilesFILESallTxsdAnalysisTypeSequenceSequenceDataBlockDATABLOCKsequencesequenceAnalysisTypeschema_File_TAnalysisFileType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_FILEsequenceTxsdAnalysisTypeSequenceSequenceDataBlockAllFilesFILESallTxsdAnalysisTypeSequenceSequenceDataBlockDATABLOCKsequencesequenceAnalysisTypeschema_File_TAnalysisFileType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Files {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdAnalysisTypeSequenceSequenceDataBlockAllFiles struct {
	XsdGoPkgHasElems_FILEsequenceTxsdAnalysisTypeSequenceSequenceDataBlockAllFilesFILESallTxsdAnalysisTypeSequenceSequenceDataBlockDATABLOCKsequencesequenceAnalysisTypeschema_File_TAnalysisFileType_
}

//	If the WalkHandlers.TxsdAnalysisTypeSequenceSequenceDataBlockAllFiles function is not nil (ie. was set by outside code), calls it with this TxsdAnalysisTypeSequenceSequenceDataBlockAllFiles instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this TxsdAnalysisTypeSequenceSequenceDataBlockAllFiles instance.
func (me *TxsdAnalysisTypeSequenceSequenceDataBlockAllFiles) Walk() (err error) {
	if fn := WalkHandlers.TxsdAnalysisTypeSequenceSequenceDataBlockAllFiles; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_FILEsequenceTxsdAnalysisTypeSequenceSequenceDataBlockAllFilesFILESallTxsdAnalysisTypeSequenceSequenceDataBlockDATABLOCKsequencesequenceAnalysisTypeschema_File_TAnalysisFileType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_FILESallTxsdAnalysisTypeSequenceSequenceDataBlockDATABLOCKsequencesequenceAnalysisTypeschema_Files_TxsdAnalysisTypeSequenceSequenceDataBlockAllFiles_ struct {
	//	Actual run data are contained in one of the files listed in the submission manifest. Each data block is
	//	represented by one SRF file, one SFF file, one compressed fastq file, or one compressed tar archive file.
	Files *TxsdAnalysisTypeSequenceSequenceDataBlockAllFiles `xml:"FILES"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_FILESallTxsdAnalysisTypeSequenceSequenceDataBlockDATABLOCKsequencesequenceAnalysisTypeschema_Files_TxsdAnalysisTypeSequenceSequenceDataBlockAllFiles_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_FILESallTxsdAnalysisTypeSequenceSequenceDataBlockDATABLOCKsequencesequenceAnalysisTypeschema_Files_TxsdAnalysisTypeSequenceSequenceDataBlockAllFiles_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_FILESallTxsdAnalysisTypeSequenceSequenceDataBlockDATABLOCKsequencesequenceAnalysisTypeschema_Files_TxsdAnalysisTypeSequenceSequenceDataBlockAllFiles_ instance.
func (me *XsdGoPkgHasElem_FILESallTxsdAnalysisTypeSequenceSequenceDataBlockDATABLOCKsequencesequenceAnalysisTypeschema_Files_TxsdAnalysisTypeSequenceSequenceDataBlockAllFiles_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_FILESallTxsdAnalysisTypeSequenceSequenceDataBlockDATABLOCKsequencesequenceAnalysisTypeschema_Files_TxsdAnalysisTypeSequenceSequenceDataBlockAllFiles_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Files.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Data block name, for use in mapping multiple analysis files to a single analysis object. This attribute is
//	not needed if there is only one analysis file loaded for the analysis object.
type XsdGoPkgHasAttr_Name_XsdtString_ struct {
	//	Data block name, for use in mapping multiple analysis files to a single analysis object. This attribute is
	//	not needed if there is only one analysis file loaded for the analysis object.
	Name xsdt.String `xml:"name,attr"`
}

//	Specifies the order in which analysis files should be loaded, if needed.
type XsdGoPkgHasAttr_Serial_XsdtInteger_ struct {
	//	Specifies the order in which analysis files should be loaded, if needed.
	Serial xsdt.Integer `xml:"serial,attr"`
}

//	Member name of the fraction of the analysis file that should be loaded for this data block. Used for
//	sample multiplexed studies where the analysis data has been demultiplexed by the submitter.
type XsdGoPkgHasAttr_Member_XsdtString_ struct {
	//	Member name of the fraction of the analysis file that should be loaded for this data block. Used for
	//	sample multiplexed studies where the analysis data has been demultiplexed by the submitter.
	Member xsdt.String `xml:"member,attr"`
}

type TxsdAnalysisTypeSequenceSequenceDataBlock struct {
	//	Actual run data are contained in one of the files listed in the submission manifest. Each data block is
	//	represented by one SRF file, one SFF file, one compressed fastq file, or one compressed tar archive file.
	XsdGoPkgHasElem_FILESallTxsdAnalysisTypeSequenceSequenceDataBlockDATABLOCKsequencesequenceAnalysisTypeschema_Files_TxsdAnalysisTypeSequenceSequenceDataBlockAllFiles_

	//	Data block name, for use in mapping multiple analysis files to a single analysis object. This attribute is
	//	not needed if there is only one analysis file loaded for the analysis object.
	XsdGoPkgHasAttr_Name_XsdtString_

	//	Specifies the order in which analysis files should be loaded, if needed.
	XsdGoPkgHasAttr_Serial_XsdtInteger_

	//	Member name of the fraction of the analysis file that should be loaded for this data block. Used for
	//	sample multiplexed studies where the analysis data has been demultiplexed by the submitter.
	XsdGoPkgHasAttr_Member_XsdtString_
}

//	If the WalkHandlers.TxsdAnalysisTypeSequenceSequenceDataBlock function is not nil (ie. was set by outside code), calls it with this TxsdAnalysisTypeSequenceSequenceDataBlock instance as the single argument. Then calls the Walk() method on 1/4 embed(s) and 0/0 field(s) belonging to this TxsdAnalysisTypeSequenceSequenceDataBlock instance.
func (me *TxsdAnalysisTypeSequenceSequenceDataBlock) Walk() (err error) {
	if fn := WalkHandlers.TxsdAnalysisTypeSequenceSequenceDataBlock; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_FILESallTxsdAnalysisTypeSequenceSequenceDataBlockDATABLOCKsequencesequenceAnalysisTypeschema_Files_TxsdAnalysisTypeSequenceSequenceDataBlockAllFiles_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_DataBLOCKsequencesequenceAnalysisTypeschema_DataBlock_TxsdAnalysisTypeSequenceSequenceDataBlock_ struct {
	//	One or more blocks of data and associated file(s). Each data block may be a partition of the overall analysis
	//	object.
	DataBlocks []*TxsdAnalysisTypeSequenceSequenceDataBlock `xml:"DATA_BLOCK"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_DataBLOCKsequencesequenceAnalysisTypeschema_DataBlock_TxsdAnalysisTypeSequenceSequenceDataBlock_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_DataBLOCKsequencesequenceAnalysisTypeschema_DataBlock_TxsdAnalysisTypeSequenceSequenceDataBlock_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_DataBLOCKsequencesequenceAnalysisTypeschema_DataBlock_TxsdAnalysisTypeSequenceSequenceDataBlock_ instance.
func (me *XsdGoPkgHasElems_DataBLOCKsequencesequenceAnalysisTypeschema_DataBlock_TxsdAnalysisTypeSequenceSequenceDataBlock_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_DataBLOCKsequencesequenceAnalysisTypeschema_DataBlock_TxsdAnalysisTypeSequenceSequenceDataBlock_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.DataBlocks {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Use SRA center_name. If applicable, the center name of the institution responsible for this analysis.
type XsdGoPkgHasAttr_AnalysisCenter_XsdtString_ struct {
	//	Use SRA center_name. If applicable, the center name of the institution responsible for this analysis.
	AnalysisCenter xsdt.String `xml:"analysis_center,attr"`
}

type TAnalysisType struct {
	//	List of primary and alternate identifiers including those records replacing or replaced by this record.
	XsdGoPkgHasElem_IDENTIFIERSsequenceAnalysisTypeschema_Identifiers_TIdentifierType_

	//	Title of the analyis object which will be displayed in short form in the Analysis browser and in database
	//	search results.
	XsdGoPkgHasElem_TITLEsequenceAnalysisTypeschema_Title_XsdtString_

	//	Supported analysis types.
	XsdGoPkgHasElem_AnalysisTYPEsequenceAnalysisTypeschema_AnalysisType_TxsdAnalysisTypeSequenceAnalysisType_

	//	SRA object(s) targeted for analysis. Run - One or more runs that are assembled, aligned, or analyzed. Sample -
	//	All the sequencing data for this sample are being assembled, aligned, or analyzed. Experiment - All the sequencing data for this
	//	experiment are being assembled, aligned, or analyzed. Study - All the sequencing data for this study are being assembled,
	//	aligned, or analyzed.
	XsdGoPkgHasElem_TARGETSsequenceAnalysisTypeschema_Targets_TxsdAnalysisTypeSequenceTargets_

	XsdGoPkgHasAtts_NameGroup

	//	The ISO date when this analysis was produced.
	XsdGoPkgHasAttr_AnalysisDate_XsdtDateTime_

	//	The STUDY_REF descriptor establishes the relationship of the analysis to the parent study. This can either be
	//	the accession of an existing archived study record, or a reference to a new study record in the same submission or same center
	//	(which does not yet have an accession).
	XsdGoPkgHasElem_StudyREFsequenceAnalysisTypeschema_StudyRef_TxsdAnalysisTypeSequenceStudyRef_

	//	Describes the contents of the analysis objects, their relationship with one another, the target objects, and
	//	their place in the overall study.
	XsdGoPkgHasElem_DESCRIPTIONsequenceTxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceAssemblyChoiceCustomCUSTOMchoiceTxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceAssemblyASSEMBLYsequenceTxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentREFERENCEALIGNMENTchoiceTxsdAnalysisTypeSequenceAnalysisTypeANALYSISTYPEsequenceAnalysisTypeschema_Description_XsdtString_

	//	Links to resources related to this analysis or analysis set (publication, datasets, online databases).
	XsdGoPkgHasElem_AnalysisLINKSsequenceAnalysisTypeschema_AnalysisLinks_TxsdAnalysisTypeSequenceAnalysisLinks_

	//	Properties and attributes of an analysis. These can be entered as free-form tag-value pairs. For certain
	//	studies, submitters may be asked to follow a community established ontology when describing the work.
	XsdGoPkgHasElem_AnalysisATTRIBUTESsequenceAnalysisTypeschema_AnalysisAttributes_TxsdAnalysisTypeSequenceAnalysisAttributes_

	//	One or more blocks of data and associated file(s). Each data block may be a partition of the overall analysis
	//	object.
	XsdGoPkgHasElems_DataBLOCKsequencesequenceAnalysisTypeschema_DataBlock_TxsdAnalysisTypeSequenceSequenceDataBlock_

	//	Use SRA center_name. If applicable, the center name of the institution responsible for this analysis.
	XsdGoPkgHasAttr_AnalysisCenter_XsdtString_
}

//	If the WalkHandlers.TAnalysisType function is not nil (ie. was set by outside code), calls it with this TAnalysisType instance as the single argument. Then calls the Walk() method on 9/12 embed(s) and 0/0 field(s) belonging to this TAnalysisType instance.
func (me *TAnalysisType) Walk() (err error) {
	if fn := WalkHandlers.TAnalysisType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_IDENTIFIERSsequenceAnalysisTypeschema_Identifiers_TIdentifierType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_TITLEsequenceAnalysisTypeschema_Title_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_AnalysisTYPEsequenceAnalysisTypeschema_AnalysisType_TxsdAnalysisTypeSequenceAnalysisType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_TARGETSsequenceAnalysisTypeschema_Targets_TxsdAnalysisTypeSequenceTargets_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_StudyREFsequenceAnalysisTypeschema_StudyRef_TxsdAnalysisTypeSequenceStudyRef_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_DESCRIPTIONsequenceTxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceAssemblyChoiceCustomCUSTOMchoiceTxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceAssemblyASSEMBLYsequenceTxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentREFERENCEALIGNMENTchoiceTxsdAnalysisTypeSequenceAnalysisTypeANALYSISTYPEsequenceAnalysisTypeschema_Description_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_AnalysisLINKSsequenceAnalysisTypeschema_AnalysisLinks_TxsdAnalysisTypeSequenceAnalysisLinks_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_AnalysisATTRIBUTESsequenceAnalysisTypeschema_AnalysisAttributes_TxsdAnalysisTypeSequenceAnalysisAttributes_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_DataBLOCKsequencesequenceAnalysisTypeschema_DataBlock_TxsdAnalysisTypeSequenceSequenceDataBlock_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_ANALYSISsequenceAnalysisSetTypeschema_Analysis_TAnalysisType_ struct {
	Analysises []*TAnalysisType `xml:"ANALYSIS"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_ANALYSISsequenceAnalysisSetTypeschema_Analysis_TAnalysisType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ANALYSISsequenceAnalysisSetTypeschema_Analysis_TAnalysisType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ANALYSISsequenceAnalysisSetTypeschema_Analysis_TAnalysisType_ instance.
func (me *XsdGoPkgHasElems_ANALYSISsequenceAnalysisSetTypeschema_Analysis_TAnalysisType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_ANALYSISsequenceAnalysisSetTypeschema_Analysis_TAnalysisType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Analysises {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TAnalysisSetType struct {
	XsdGoPkgHasElems_ANALYSISsequenceAnalysisSetTypeschema_Analysis_TAnalysisType_
}

//	If the WalkHandlers.TAnalysisSetType function is not nil (ie. was set by outside code), calls it with this TAnalysisSetType instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this TAnalysisSetType instance.
func (me *TAnalysisSetType) Walk() (err error) {
	if fn := WalkHandlers.TAnalysisSetType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_ANALYSISsequenceAnalysisSetTypeschema_Analysis_TAnalysisType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_AnalysisSet struct {
	//	An ANALYSIS_SET is a container of analysis objects with a shared namespace.
	AnalysisSet *TAnalysisSetType `xml:"ANALYSIS_SET"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_AnalysisSet function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_AnalysisSet instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_AnalysisSet instance.
func (me *XsdGoPkgHasElem_AnalysisSet) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_AnalysisSet; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.AnalysisSet.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	An ANALYSIS_SET is a container of analysis objects with a shared namespace.
type XsdGoPkgHasElems_AnalysisSet struct {
	//	An ANALYSIS_SET is a container of analysis objects with a shared namespace.
	AnalysisSets []*TAnalysisSetType `xml:"ANALYSIS_SET"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_AnalysisSet function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_AnalysisSet instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_AnalysisSet instance.
func (me *XsdGoPkgHasElems_AnalysisSet) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_AnalysisSet; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.AnalysisSets {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Analysis struct {
	Analysis *TAnalysisType `xml:"ANALYSIS"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Analysis function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Analysis instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Analysis instance.
func (me *XsdGoPkgHasElem_Analysis) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Analysis; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Analysis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	A track of read placement coverage used to measure abundance of a library with respect to a reference.
//	This branch will be further specified in the future.
type XsdGoPkgHasElems_AbundanceMEASUREMENTchoiceANALYSISTYPEsequenceAnalysisTypeschema_AbundanceMeasurement_TxsdAnalysisTypeSequenceAnalysisTypeChoiceAbundanceMeasurement_ struct {
	//	A track of read placement coverage used to measure abundance of a library with respect to a reference.
	//	This branch will be further specified in the future.
	AbundanceMeasurements []*TxsdAnalysisTypeSequenceAnalysisTypeChoiceAbundanceMeasurement `xml:"ABUNDANCE_MEASUREMENT"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_AbundanceMEASUREMENTchoiceANALYSISTYPEsequenceAnalysisTypeschema_AbundanceMeasurement_TxsdAnalysisTypeSequenceAnalysisTypeChoiceAbundanceMeasurement_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_AbundanceMEASUREMENTchoiceANALYSISTYPEsequenceAnalysisTypeschema_AbundanceMeasurement_TxsdAnalysisTypeSequenceAnalysisTypeChoiceAbundanceMeasurement_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_AbundanceMEASUREMENTchoiceANALYSISTYPEsequenceAnalysisTypeschema_AbundanceMeasurement_TxsdAnalysisTypeSequenceAnalysisTypeChoiceAbundanceMeasurement_ instance.
func (me *XsdGoPkgHasElems_AbundanceMEASUREMENTchoiceANALYSISTYPEsequenceAnalysisTypeschema_AbundanceMeasurement_TxsdAnalysisTypeSequenceAnalysisTypeChoiceAbundanceMeasurement_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_AbundanceMEASUREMENTchoiceANALYSISTYPEsequenceAnalysisTypeschema_AbundanceMeasurement_TxsdAnalysisTypeSequenceAnalysisTypeChoiceAbundanceMeasurement_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.AbundanceMeasurements {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Description of how the reference assembly was obtained especially when it is a
//	derivative of existing standards
type XsdGoPkgHasElems_DESCRIPTIONsequenceCUSTOMchoiceASSEMBLYsequenceREFERENCEALIGNMENTchoiceANALYSISTYPEsequenceAnalysisTypeschema_Description_XsdtString_ struct {
	//	Description of how the reference assembly was obtained especially when it is a
	//	derivative of existing standards
	Descriptions []xsdt.String `xml:"DESCRIPTION"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_DESCRIPTIONsequenceCUSTOMchoiceASSEMBLYsequenceREFERENCEALIGNMENTchoiceANALYSISTYPEsequenceAnalysisTypeschema_Description_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_DESCRIPTIONsequenceCUSTOMchoiceASSEMBLYsequenceREFERENCEALIGNMENTchoiceANALYSISTYPEsequenceAnalysisTypeschema_Description_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_DESCRIPTIONsequenceCUSTOMchoiceASSEMBLYsequenceREFERENCEALIGNMENTchoiceANALYSISTYPEsequenceAnalysisTypeschema_Description_XsdtString_ instance.
func (me *XsdGoPkgHasElems_DESCRIPTIONsequenceCUSTOMchoiceASSEMBLYsequenceREFERENCEALIGNMENTchoiceANALYSISTYPEsequenceAnalysisTypeschema_Description_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_DESCRIPTIONsequenceCUSTOMchoiceASSEMBLYsequenceREFERENCEALIGNMENTchoiceANALYSISTYPEsequenceAnalysisTypeschema_Description_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_SeqLABELSsequenceREFERENCEALIGNMENTchoiceANALYSISTYPEsequenceAnalysisTypeschema_SeqLabels_TxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceSeqLabels_ struct {
	SeqLabelses []*TxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceSeqLabels `xml:"SEQ_LABELS"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_SeqLABELSsequenceREFERENCEALIGNMENTchoiceANALYSISTYPEsequenceAnalysisTypeschema_SeqLabels_TxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceSeqLabels_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_SeqLABELSsequenceREFERENCEALIGNMENTchoiceANALYSISTYPEsequenceAnalysisTypeschema_SeqLabels_TxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceSeqLabels_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_SeqLABELSsequenceREFERENCEALIGNMENTchoiceANALYSISTYPEsequenceAnalysisTypeschema_SeqLabels_TxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceSeqLabels_ instance.
func (me *XsdGoPkgHasElems_SeqLABELSsequenceREFERENCEALIGNMENTchoiceANALYSISTYPEsequenceAnalysisTypeschema_SeqLabels_TxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceSeqLabels_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_SeqLABELSsequenceREFERENCEALIGNMENTchoiceANALYSISTYPEsequenceAnalysisTypeschema_SeqLabels_TxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceSeqLabels_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.SeqLabelses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Accession in the referenced database. For example, FBtr0080008 (in FLYBASE).
type XsdGoPkgHasElems_IDallXRefTypeschema_Id_XsdtString_ struct {
	//	Accession in the referenced database. For example, FBtr0080008 (in FLYBASE).
	Ids []xsdt.String `xml:"ID"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_IDallXRefTypeschema_Id_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_IDallXRefTypeschema_Id_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_IDallXRefTypeschema_Id_XsdtString_ instance.
func (me *XsdGoPkgHasElems_IDallXRefTypeschema_Id_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_IDallXRefTypeschema_Id_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdPlatformTypeChoiceHelicosAllInstrumentModel xsdt.String

//	Since TxsdPlatformTypeChoiceHelicosAllInstrumentModel is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdPlatformTypeChoiceHelicosAllInstrumentModel) Set(s string) { (*xsdt.String)(me).Set(s) }

//	Since TxsdPlatformTypeChoiceHelicosAllInstrumentModel is just a simple String type, this merely returns the current string value.
func (me TxsdPlatformTypeChoiceHelicosAllInstrumentModel) String() string {
	return xsdt.String(me).String()
}

//	This convenience method just performs a simple type conversion to TxsdPlatformTypeChoiceHelicosAllInstrumentModel's alias type xsdt.String.
func (me TxsdPlatformTypeChoiceHelicosAllInstrumentModel) ToXsdtString() xsdt.String {
	return xsdt.String(me)
}

//	Returns true if the value of this enumerated TxsdPlatformTypeChoiceHelicosAllInstrumentModel is "Helicos HeliScope".
func (me TxsdPlatformTypeChoiceHelicosAllInstrumentModel) IsHelicosHeliScope() bool {
	return me.String() == "Helicos HeliScope"
}

//	Returns true if the value of this enumerated TxsdPlatformTypeChoiceHelicosAllInstrumentModel is "unspecified".
func (me TxsdPlatformTypeChoiceHelicosAllInstrumentModel) IsUnspecified() bool {
	return me.String() == "unspecified"
}

//	Actual run data are contained in one of the files listed in the submission manifest. Each data block is
//	represented by one SRF file, one SFF file, one compressed fastq file, or one compressed tar archive file.
type XsdGoPkgHasElems_FILESallTxsdAnalysisTypeSequenceSequenceDataBlockDATABLOCKsequencesequenceAnalysisTypeschema_Files_TxsdAnalysisTypeSequenceSequenceDataBlockAllFiles_ struct {
	//	Actual run data are contained in one of the files listed in the submission manifest. Each data block is
	//	represented by one SRF file, one SFF file, one compressed fastq file, or one compressed tar archive file.
	Fileses []*TxsdAnalysisTypeSequenceSequenceDataBlockAllFiles `xml:"FILES"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_FILESallTxsdAnalysisTypeSequenceSequenceDataBlockDATABLOCKsequencesequenceAnalysisTypeschema_Files_TxsdAnalysisTypeSequenceSequenceDataBlockAllFiles_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_FILESallTxsdAnalysisTypeSequenceSequenceDataBlockDATABLOCKsequencesequenceAnalysisTypeschema_Files_TxsdAnalysisTypeSequenceSequenceDataBlockAllFiles_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_FILESallTxsdAnalysisTypeSequenceSequenceDataBlockDATABLOCKsequencesequenceAnalysisTypeschema_Files_TxsdAnalysisTypeSequenceSequenceDataBlockAllFiles_ instance.
func (me *XsdGoPkgHasElems_FILESallTxsdAnalysisTypeSequenceSequenceDataBlockDATABLOCKsequencesequenceAnalysisTypeschema_Files_TxsdAnalysisTypeSequenceSequenceDataBlockAllFiles_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_FILESallTxsdAnalysisTypeSequenceSequenceDataBlockDATABLOCKsequencesequenceAnalysisTypeschema_Files_TxsdAnalysisTypeSequenceSequenceDataBlockAllFiles_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Fileses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Specify the read index that precedes this read.
type XsdGoPkgHasAttr_FollowsReadIndex_XsdtNonNegativeInteger_ struct {
	//	Specify the read index that precedes this read.
	FollowsReadIndex xsdt.NonNegativeInteger `xml:"follows_read_index,attr"`
}

//	Oxford Nanopore platform type. nanopore-based electronic single molecule analysis
type TxsdPlatformTypeChoiceOxfordNanoporeSequenceInstrumentModel xsdt.String

//	Since TxsdPlatformTypeChoiceOxfordNanoporeSequenceInstrumentModel is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdPlatformTypeChoiceOxfordNanoporeSequenceInstrumentModel) Set(s string) {
	(*xsdt.String)(me).Set(s)
}

//	Since TxsdPlatformTypeChoiceOxfordNanoporeSequenceInstrumentModel is just a simple String type, this merely returns the current string value.
func (me TxsdPlatformTypeChoiceOxfordNanoporeSequenceInstrumentModel) String() string {
	return xsdt.String(me).String()
}

//	This convenience method just performs a simple type conversion to TxsdPlatformTypeChoiceOxfordNanoporeSequenceInstrumentModel's alias type xsdt.String.
func (me TxsdPlatformTypeChoiceOxfordNanoporeSequenceInstrumentModel) ToXsdtString() xsdt.String {
	return xsdt.String(me)
}

//	Returns true if the value of this enumerated TxsdPlatformTypeChoiceOxfordNanoporeSequenceInstrumentModel is "MinION".
func (me TxsdPlatformTypeChoiceOxfordNanoporeSequenceInstrumentModel) IsMinION() bool {
	return me.String() == "MinION"
}

//	Returns true if the value of this enumerated TxsdPlatformTypeChoiceOxfordNanoporeSequenceInstrumentModel is "GridION".
func (me TxsdPlatformTypeChoiceOxfordNanoporeSequenceInstrumentModel) IsGridION() bool {
	return me.String() == "GridION"
}

type XsdGoPkgHasElem_InstrumentMODELsequenceOXFORDNANOPOREchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceOxfordNanoporeSequenceInstrumentModel_ struct {
	InstrumentModel TxsdPlatformTypeChoiceOxfordNanoporeSequenceInstrumentModel `xml:"INSTRUMENT_MODEL"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_InstrumentMODELsequenceOXFORDNANOPOREchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceOxfordNanoporeSequenceInstrumentModel_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_InstrumentMODELsequenceOXFORDNANOPOREchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceOxfordNanoporeSequenceInstrumentModel_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_InstrumentMODELsequenceOXFORDNANOPOREchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceOxfordNanoporeSequenceInstrumentModel_ instance.
func (me *XsdGoPkgHasElem_InstrumentMODELsequenceOXFORDNANOPOREchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceOxfordNanoporeSequenceInstrumentModel_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_InstrumentMODELsequenceOXFORDNANOPOREchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceOxfordNanoporeSequenceInstrumentModel_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdPlatformTypeChoiceOxfordNanopore struct {
	XsdGoPkgHasElem_InstrumentMODELsequenceOXFORDNANOPOREchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceOxfordNanoporeSequenceInstrumentModel_
}

//	If the WalkHandlers.TxsdPlatformTypeChoiceOxfordNanopore function is not nil (ie. was set by outside code), calls it with this TxsdPlatformTypeChoiceOxfordNanopore instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this TxsdPlatformTypeChoiceOxfordNanopore instance.
func (me *TxsdPlatformTypeChoiceOxfordNanopore) Walk() (err error) {
	if fn := WalkHandlers.TxsdPlatformTypeChoiceOxfordNanopore; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_InstrumentMODELsequenceOXFORDNANOPOREchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceOxfordNanoporeSequenceInstrumentModel_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_OxfordNANOPOREchoicePlatformTypeschema_OxfordNanopore_TxsdPlatformTypeChoiceOxfordNanopore_ struct {
	//	Oxford Nanopore platform type. nanopore-based electronic single molecule analysis
	OxfordNanopore *TxsdPlatformTypeChoiceOxfordNanopore `xml:"OXFORD_NANOPORE"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_OxfordNANOPOREchoicePlatformTypeschema_OxfordNanopore_TxsdPlatformTypeChoiceOxfordNanopore_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_OxfordNANOPOREchoicePlatformTypeschema_OxfordNanopore_TxsdPlatformTypeChoiceOxfordNanopore_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_OxfordNANOPOREchoicePlatformTypeschema_OxfordNanopore_TxsdPlatformTypeChoiceOxfordNanopore_ instance.
func (me *XsdGoPkgHasElem_OxfordNANOPOREchoicePlatformTypeschema_OxfordNanopore_TxsdPlatformTypeChoiceOxfordNanopore_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_OxfordNANOPOREchoicePlatformTypeschema_OxfordNanopore_TxsdPlatformTypeChoiceOxfordNanopore_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.OxfordNanopore.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdPlatformTypeChoiceIonTorrentSequenceInstrumentModel xsdt.String

//	Since TxsdPlatformTypeChoiceIonTorrentSequenceInstrumentModel is just a simple String type, this merely returns the current string value.
func (me TxsdPlatformTypeChoiceIonTorrentSequenceInstrumentModel) String() string {
	return xsdt.String(me).String()
}

//	This convenience method just performs a simple type conversion to TxsdPlatformTypeChoiceIonTorrentSequenceInstrumentModel's alias type xsdt.String.
func (me TxsdPlatformTypeChoiceIonTorrentSequenceInstrumentModel) ToXsdtString() xsdt.String {
	return xsdt.String(me)
}

//	Returns true if the value of this enumerated TxsdPlatformTypeChoiceIonTorrentSequenceInstrumentModel is "Ion Torrent PGM".
func (me TxsdPlatformTypeChoiceIonTorrentSequenceInstrumentModel) IsIonTorrentPgm() bool {
	return me.String() == "Ion Torrent PGM"
}

//	Returns true if the value of this enumerated TxsdPlatformTypeChoiceIonTorrentSequenceInstrumentModel is "Ion Torrent Proton".
func (me TxsdPlatformTypeChoiceIonTorrentSequenceInstrumentModel) IsIonTorrentProton() bool {
	return me.String() == "Ion Torrent Proton"
}

//	Returns true if the value of this enumerated TxsdPlatformTypeChoiceIonTorrentSequenceInstrumentModel is "unspecified".
func (me TxsdPlatformTypeChoiceIonTorrentSequenceInstrumentModel) IsUnspecified() bool {
	return me.String() == "unspecified"
}

//	Since TxsdPlatformTypeChoiceIonTorrentSequenceInstrumentModel is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdPlatformTypeChoiceIonTorrentSequenceInstrumentModel) Set(s string) {
	(*xsdt.String)(me).Set(s)
}

type XsdGoPkgHasElem_InstrumentMODELsequenceIONTORRENTchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceIonTorrentSequenceInstrumentModel_ struct {
	InstrumentModel TxsdPlatformTypeChoiceIonTorrentSequenceInstrumentModel `xml:"INSTRUMENT_MODEL"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_InstrumentMODELsequenceIONTORRENTchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceIonTorrentSequenceInstrumentModel_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_InstrumentMODELsequenceIONTORRENTchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceIonTorrentSequenceInstrumentModel_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_InstrumentMODELsequenceIONTORRENTchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceIonTorrentSequenceInstrumentModel_ instance.
func (me *XsdGoPkgHasElem_InstrumentMODELsequenceIONTORRENTchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceIonTorrentSequenceInstrumentModel_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_InstrumentMODELsequenceIONTORRENTchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceIonTorrentSequenceInstrumentModel_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdPlatformTypeChoiceIonTorrent struct {
	XsdGoPkgHasElem_InstrumentMODELsequenceIONTORRENTchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceIonTorrentSequenceInstrumentModel_
}

//	If the WalkHandlers.TxsdPlatformTypeChoiceIonTorrent function is not nil (ie. was set by outside code), calls it with this TxsdPlatformTypeChoiceIonTorrent instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this TxsdPlatformTypeChoiceIonTorrent instance.
func (me *TxsdPlatformTypeChoiceIonTorrent) Walk() (err error) {
	if fn := WalkHandlers.TxsdPlatformTypeChoiceIonTorrent; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_InstrumentMODELsequenceIONTORRENTchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceIonTorrentSequenceInstrumentModel_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	STEP_INDEX of the previous step in the workflow. Set toNIL if the first pipe section.
type XsdGoPkgHasElem_PrevStepINDEXsequencePIPESECTIONsequencePipelineTypeschema_PrevStepIndex_XsdtString_ struct {
	//	STEP_INDEX of the previous step in the workflow. Set toNIL if the first pipe section.
	PrevStepIndex xsdt.String `xml:"PREV_STEP_INDEX"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_PrevStepINDEXsequencePIPESECTIONsequencePipelineTypeschema_PrevStepIndex_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_PrevStepINDEXsequencePIPESECTIONsequencePipelineTypeschema_PrevStepIndex_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_PrevStepINDEXsequencePIPESECTIONsequencePipelineTypeschema_PrevStepIndex_XsdtString_ instance.
func (me *XsdGoPkgHasElem_PrevStepINDEXsequencePIPESECTIONsequencePipelineTypeschema_PrevStepIndex_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_PrevStepINDEXsequencePIPESECTIONsequencePipelineTypeschema_PrevStepIndex_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_PipeSECTIONsequencePipelineTypeschema_PipeSection_TxsdPipelineTypeSequencePipeSection_ struct {
	PipeSection *TxsdPipelineTypeSequencePipeSection `xml:"PIPE_SECTION"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_PipeSECTIONsequencePipelineTypeschema_PipeSection_TxsdPipelineTypeSequencePipeSection_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_PipeSECTIONsequencePipelineTypeschema_PipeSection_TxsdPipelineTypeSequencePipeSection_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_PipeSECTIONsequencePipelineTypeschema_PipeSection_TxsdPipelineTypeSequencePipeSection_ instance.
func (me *XsdGoPkgHasElem_PipeSECTIONsequencePipelineTypeschema_PipeSection_TxsdPipelineTypeSequencePipeSection_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_PipeSECTIONsequencePipelineTypeschema_PipeSection_TxsdPipelineTypeSequencePipeSection_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.PipeSection.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Links to resources related to this analysis or analysis set (publication, datasets, online databases).
type XsdGoPkgHasElems_AnalysisLINKSsequenceAnalysisTypeschema_AnalysisLinks_TxsdAnalysisTypeSequenceAnalysisLinks_ struct {
	//	Links to resources related to this analysis or analysis set (publication, datasets, online databases).
	AnalysisLinkses []*TxsdAnalysisTypeSequenceAnalysisLinks `xml:"ANALYSIS_LINKS"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_AnalysisLINKSsequenceAnalysisTypeschema_AnalysisLinks_TxsdAnalysisTypeSequenceAnalysisLinks_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_AnalysisLINKSsequenceAnalysisTypeschema_AnalysisLinks_TxsdAnalysisTypeSequenceAnalysisLinks_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_AnalysisLINKSsequenceAnalysisTypeschema_AnalysisLinks_TxsdAnalysisTypeSequenceAnalysisLinks_ instance.
func (me *XsdGoPkgHasElems_AnalysisLINKSsequenceAnalysisTypeschema_AnalysisLinks_TxsdAnalysisTypeSequenceAnalysisLinks_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_AnalysisLINKSsequenceAnalysisTypeschema_AnalysisLinks_TxsdAnalysisTypeSequenceAnalysisLinks_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.AnalysisLinkses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Sequences which are labeled by Accession.version are optional in the list
type XsdGoPkgHasElem_SEQUENCEsequenceSEQLABELSsequenceREFERENCEALIGNMENTchoiceANALYSISTYPEsequenceAnalysisTypeschema_Sequence_TxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceSeqLabelsSequenceSequence_ struct {
	//	Sequences which are labeled by Accession.version are optional in the list
	Sequence *TxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceSeqLabelsSequenceSequence `xml:"SEQUENCE"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_SEQUENCEsequenceSEQLABELSsequenceREFERENCEALIGNMENTchoiceANALYSISTYPEsequenceAnalysisTypeschema_Sequence_TxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceSeqLabelsSequenceSequence_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_SEQUENCEsequenceSEQLABELSsequenceREFERENCEALIGNMENTchoiceANALYSISTYPEsequenceAnalysisTypeschema_Sequence_TxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceSeqLabelsSequenceSequence_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_SEQUENCEsequenceSEQLABELSsequenceREFERENCEALIGNMENTchoiceANALYSISTYPEsequenceAnalysisTypeschema_Sequence_TxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceSeqLabelsSequenceSequence_ instance.
func (me *XsdGoPkgHasElem_SEQUENCEsequenceSEQLABELSsequenceREFERENCEALIGNMENTchoiceANALYSISTYPEsequenceAnalysisTypeschema_Sequence_TxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceSeqLabelsSequenceSequence_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_SEQUENCEsequenceSEQLABELSsequenceREFERENCEALIGNMENTchoiceANALYSISTYPEsequenceAnalysisTypeschema_Sequence_TxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceSeqLabelsSequenceSequence_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Sequence.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Specify the read index that follows this read.
type XsdGoPkgHasAttr_PrecedesReadIndex_XsdtNonNegativeInteger_ struct {
	//	Specify the read index that follows this read.
	PrecedesReadIndex xsdt.NonNegativeInteger `xml:"precedes_read_index,attr"`
}

type TxsdPlatformTypeChoicePacbioSmrtSequenceInstrumentModel xsdt.String

//	Since TxsdPlatformTypeChoicePacbioSmrtSequenceInstrumentModel is just a simple String type, this merely returns the current string value.
func (me TxsdPlatformTypeChoicePacbioSmrtSequenceInstrumentModel) String() string {
	return xsdt.String(me).String()
}

//	This convenience method just performs a simple type conversion to TxsdPlatformTypeChoicePacbioSmrtSequenceInstrumentModel's alias type xsdt.String.
func (me TxsdPlatformTypeChoicePacbioSmrtSequenceInstrumentModel) ToXsdtString() xsdt.String {
	return xsdt.String(me)
}

//	Returns true if the value of this enumerated TxsdPlatformTypeChoicePacbioSmrtSequenceInstrumentModel is "PacBio RS".
func (me TxsdPlatformTypeChoicePacbioSmrtSequenceInstrumentModel) IsPacBioRs() bool {
	return me.String() == "PacBio RS"
}

//	Returns true if the value of this enumerated TxsdPlatformTypeChoicePacbioSmrtSequenceInstrumentModel is "PacBio RS II".
func (me TxsdPlatformTypeChoicePacbioSmrtSequenceInstrumentModel) IsPacBioRsIi() bool {
	return me.String() == "PacBio RS II"
}

//	Since TxsdPlatformTypeChoicePacbioSmrtSequenceInstrumentModel is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdPlatformTypeChoicePacbioSmrtSequenceInstrumentModel) Set(s string) {
	(*xsdt.String)(me).Set(s)
}

type XsdGoPkgHasElems_InstrumentMODELsequencePACBIOSMRTchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoicePacbioSmrtSequenceInstrumentModel_ struct {
	InstrumentModels []TxsdPlatformTypeChoicePacbioSmrtSequenceInstrumentModel `xml:"INSTRUMENT_MODEL"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_InstrumentMODELsequencePACBIOSMRTchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoicePacbioSmrtSequenceInstrumentModel_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_InstrumentMODELsequencePACBIOSMRTchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoicePacbioSmrtSequenceInstrumentModel_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_InstrumentMODELsequencePACBIOSMRTchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoicePacbioSmrtSequenceInstrumentModel_ instance.
func (me *XsdGoPkgHasElems_InstrumentMODELsequencePACBIOSMRTchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoicePacbioSmrtSequenceInstrumentModel_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_InstrumentMODELsequencePACBIOSMRTchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoicePacbioSmrtSequenceInstrumentModel_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	A submitter provided identifier of the (new) record. used in submisison process and replaced by primary archive
//	id on successfull load. @namespace is optional and may refer to submitter private database or LIMS
//	identifier.
type XsdGoPkgHasElem_SubmitterIDsequenceIdentifierTypeschema_SubmitterId_TQualifiedNameType_ struct {
	//	A submitter provided identifier of the (new) record. used in submisison process and replaced by primary archive
	//	id on successfull load. @namespace is optional and may refer to submitter private database or LIMS
	//	identifier.
	SubmitterId *TQualifiedNameType `xml:"SUBMITTER_ID"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_SubmitterIDsequenceIdentifierTypeschema_SubmitterId_TQualifiedNameType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_SubmitterIDsequenceIdentifierTypeschema_SubmitterId_TQualifiedNameType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_SubmitterIDsequenceIdentifierTypeschema_SubmitterId_TQualifiedNameType_ instance.
func (me *XsdGoPkgHasElem_SubmitterIDsequenceIdentifierTypeschema_SubmitterId_TQualifiedNameType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_SubmitterIDsequenceIdentifierTypeschema_SubmitterId_TQualifiedNameType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.SubmitterId.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	A universally unique identifier that requires no namespace.
type XsdGoPkgHasElem_UUIDsequenceIdentifierTypeschema_Uuid_TNameAndLabelType_ struct {
	//	A universally unique identifier that requires no namespace.
	Uuid *TNameAndLabelType `xml:"UUID"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_UUIDsequenceIdentifierTypeschema_Uuid_TNameAndLabelType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_UUIDsequenceIdentifierTypeschema_Uuid_TNameAndLabelType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_UUIDsequenceIdentifierTypeschema_Uuid_TNameAndLabelType_ instance.
func (me *XsdGoPkgHasElem_UUIDsequenceIdentifierTypeschema_Uuid_TNameAndLabelType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_UUIDsequenceIdentifierTypeschema_Uuid_TNameAndLabelType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Uuid.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The internet service link (file:, http:, ftp:, etc).
type XsdGoPkgHasElems_URLallURLLINKchoiceLinkTypeschema_Url_XsdtAnyURI_ struct {
	//	The internet service link (file:, http:, ftp:, etc).
	Urls []xsdt.AnyURI `xml:"URL"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_URLallURLLINKchoiceLinkTypeschema_Url_XsdtAnyURI_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_URLallURLLINKchoiceLinkTypeschema_Url_XsdtAnyURI_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_URLallURLLINKchoiceLinkTypeschema_Url_XsdtAnyURI_ instance.
func (me *XsdGoPkgHasElems_URLallURLLINKchoiceLinkTypeschema_Url_XsdtAnyURI_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_URLallURLLINKchoiceLinkTypeschema_Url_XsdtAnyURI_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Number of base/color calls, cycles, or flows per spot (raw sequence length or flow length including all
//	application and technical tags and mate pairs, but not including gap lengths). This value will be platform dependent,
//	library dependent, and possibly run dependent. Variable length platforms will still have a constant flow/cycle length.
type XsdGoPkgHasElems_SpotLENGTHsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_SpotLength_XsdtNonNegativeInteger_ struct {
	//	Number of base/color calls, cycles, or flows per spot (raw sequence length or flow length including all
	//	application and technical tags and mate pairs, but not including gap lengths). This value will be platform dependent,
	//	library dependent, and possibly run dependent. Variable length platforms will still have a constant flow/cycle length.
	SpotLengths []xsdt.NonNegativeInteger `xml:"SPOT_LENGTH"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_SpotLENGTHsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_SpotLength_XsdtNonNegativeInteger_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_SpotLENGTHsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_SpotLength_XsdtNonNegativeInteger_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_SpotLENGTHsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_SpotLength_XsdtNonNegativeInteger_ instance.
func (me *XsdGoPkgHasElems_SpotLENGTHsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_SpotLength_XsdtNonNegativeInteger_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_SpotLENGTHsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_SpotLength_XsdtNonNegativeInteger_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Per sequence annotation of named attributes and values. Example: Processed sequencing data for submission
//	to dbEST without assembly. Reads have already been submitted to one of the sequence read archives in raw form. The fasta
//	data submitted under this analysis object result from the following treatments, which may serve to filter reads from the
//	raw dataset: - sequencing adapter removal - low quality trimming - poly-A tail removal - strand orientation - contaminant
//	removal This branch will be further specified in the future.
type XsdGoPkgHasElems_SequenceANNOTATIONchoiceTxsdAnalysisTypeSequenceAnalysisTypeANALYSISTYPEsequenceAnalysisTypeschema_SequenceAnnotation_TxsdAnalysisTypeSequenceAnalysisTypeChoiceSequenceAnnotation_ struct {
	//	Per sequence annotation of named attributes and values. Example: Processed sequencing data for submission
	//	to dbEST without assembly. Reads have already been submitted to one of the sequence read archives in raw form. The fasta
	//	data submitted under this analysis object result from the following treatments, which may serve to filter reads from the
	//	raw dataset: - sequencing adapter removal - low quality trimming - poly-A tail removal - strand orientation - contaminant
	//	removal This branch will be further specified in the future.
	SequenceAnnotations []*TxsdAnalysisTypeSequenceAnalysisTypeChoiceSequenceAnnotation `xml:"SEQUENCE_ANNOTATION"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_SequenceANNOTATIONchoiceTxsdAnalysisTypeSequenceAnalysisTypeANALYSISTYPEsequenceAnalysisTypeschema_SequenceAnnotation_TxsdAnalysisTypeSequenceAnalysisTypeChoiceSequenceAnnotation_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_SequenceANNOTATIONchoiceTxsdAnalysisTypeSequenceAnalysisTypeANALYSISTYPEsequenceAnalysisTypeschema_SequenceAnnotation_TxsdAnalysisTypeSequenceAnalysisTypeChoiceSequenceAnnotation_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_SequenceANNOTATIONchoiceTxsdAnalysisTypeSequenceAnalysisTypeANALYSISTYPEsequenceAnalysisTypeschema_SequenceAnnotation_TxsdAnalysisTypeSequenceAnalysisTypeChoiceSequenceAnnotation_ instance.
func (me *XsdGoPkgHasElems_SequenceANNOTATIONchoiceTxsdAnalysisTypeSequenceAnalysisTypeANALYSISTYPEsequenceAnalysisTypeschema_SequenceAnnotation_TxsdAnalysisTypeSequenceAnalysisTypeChoiceSequenceAnnotation_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_SequenceANNOTATIONchoiceTxsdAnalysisTypeSequenceAnalysisTypeANALYSISTYPEsequenceAnalysisTypeschema_SequenceAnnotation_TxsdAnalysisTypeSequenceAnalysisTypeChoiceSequenceAnnotation_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.SequenceAnnotations {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Value of the attribute.
type XsdGoPkgHasElems_VALUEallAttributeTypeschema_Value_XsdtString_ struct {
	//	Value of the attribute.
	Values []xsdt.String `xml:"VALUE"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_VALUEallAttributeTypeschema_Value_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_VALUEallAttributeTypeschema_Value_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_VALUEallAttributeTypeschema_Value_XsdtString_ instance.
func (me *XsdGoPkgHasElems_VALUEallAttributeTypeschema_Value_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_VALUEallAttributeTypeschema_Value_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Helicos is similar to 454 technology - uses 1-color sequential flows
type XsdGoPkgHasElem_InstrumentMODELallHELICOSchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceHelicosAllInstrumentModel_ struct {
	InstrumentModel TxsdPlatformTypeChoiceHelicosAllInstrumentModel `xml:"INSTRUMENT_MODEL"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_InstrumentMODELallHELICOSchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceHelicosAllInstrumentModel_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_InstrumentMODELallHELICOSchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceHelicosAllInstrumentModel_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_InstrumentMODELallHELICOSchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceHelicosAllInstrumentModel_ instance.
func (me *XsdGoPkgHasElem_InstrumentMODELallHELICOSchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceHelicosAllInstrumentModel_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_InstrumentMODELallHELICOSchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceHelicosAllInstrumentModel_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdPlatformTypeChoiceHelicos struct {
	XsdGoPkgHasElem_InstrumentMODELallHELICOSchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceHelicosAllInstrumentModel_
}

//	If the WalkHandlers.TxsdPlatformTypeChoiceHelicos function is not nil (ie. was set by outside code), calls it with this TxsdPlatformTypeChoiceHelicos instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this TxsdPlatformTypeChoiceHelicos instance.
func (me *TxsdPlatformTypeChoiceHelicos) Walk() (err error) {
	if fn := WalkHandlers.TxsdPlatformTypeChoiceHelicos; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_InstrumentMODELallHELICOSchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceHelicosAllInstrumentModel_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_HELICOSchoicePlatformTypeschema_Helicos_TxsdPlatformTypeChoiceHelicos_ struct {
	//	Helicos is similar to 454 technology - uses 1-color sequential flows
	Helicoses []*TxsdPlatformTypeChoiceHelicos `xml:"HELICOS"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_HELICOSchoicePlatformTypeschema_Helicos_TxsdPlatformTypeChoiceHelicos_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_HELICOSchoicePlatformTypeschema_Helicos_TxsdPlatformTypeChoiceHelicos_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_HELICOSchoicePlatformTypeschema_Helicos_TxsdPlatformTypeChoiceHelicos_ instance.
func (me *XsdGoPkgHasElems_HELICOSchoicePlatformTypeschema_Helicos_TxsdPlatformTypeChoiceHelicos_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_HELICOSchoicePlatformTypeschema_Helicos_TxsdPlatformTypeChoiceHelicos_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Helicoses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Whether the reference alignment identifies reads that appear to be duplicates.
type XsdGoPkgHasElems_AlignmentMarksDuplicateReadsallAlignmentDirectivesTypeschema_AlignmentMarksDuplicateReads_XsdtBoolean_ struct {
	//	Whether the reference alignment identifies reads that appear to be duplicates.
	AlignmentMarksDuplicateReadses []xsdt.Boolean `xml:"alignment_marks_duplicate_reads"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_AlignmentMarksDuplicateReadsallAlignmentDirectivesTypeschema_AlignmentMarksDuplicateReads_XsdtBoolean_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_AlignmentMarksDuplicateReadsallAlignmentDirectivesTypeschema_AlignmentMarksDuplicateReads_XsdtBoolean_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_AlignmentMarksDuplicateReadsallAlignmentDirectivesTypeschema_AlignmentMarksDuplicateReads_XsdtBoolean_ instance.
func (me *XsdGoPkgHasElems_AlignmentMarksDuplicateReadsallAlignmentDirectivesTypeschema_AlignmentMarksDuplicateReads_XsdtBoolean_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_AlignmentMarksDuplicateReadsallAlignmentDirectivesTypeschema_AlignmentMarksDuplicateReads_XsdtBoolean_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Mapping between the run (read group) labels used in the alignment data file, and the runs in the
//	Archive. This is optional when SRA runs are reffered by accession in submitted data.
type XsdGoPkgHasElems_RunLABELSsequenceREFERENCEALIGNMENTchoiceANALYSISTYPEsequenceAnalysisTypeschema_RunLabels_TxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceRunLabels_ struct {
	//	Mapping between the run (read group) labels used in the alignment data file, and the runs in the
	//	Archive. This is optional when SRA runs are reffered by accession in submitted data.
	RunLabelses []*TxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceRunLabels `xml:"RUN_LABELS"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_RunLABELSsequenceREFERENCEALIGNMENTchoiceANALYSISTYPEsequenceAnalysisTypeschema_RunLabels_TxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceRunLabels_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_RunLABELSsequenceREFERENCEALIGNMENTchoiceANALYSISTYPEsequenceAnalysisTypeschema_RunLabels_TxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceRunLabels_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_RunLABELSsequenceREFERENCEALIGNMENTchoiceANALYSISTYPEsequenceAnalysisTypeschema_RunLabels_TxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceRunLabels_ instance.
func (me *XsdGoPkgHasElems_RunLABELSsequenceREFERENCEALIGNMENTchoiceANALYSISTYPEsequenceAnalysisTypeschema_RunLabels_TxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceRunLabels_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_RunLABELSsequenceREFERENCEALIGNMENTchoiceANALYSISTYPEsequenceAnalysisTypeschema_RunLabels_TxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceRunLabels_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.RunLabelses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The read is located beginning at the offset or cycle relative to another read. This choice is
//	appropriate for example when specifying a read that follows a variable length expected sequence(s).
type TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceChoiceRelativeOrder struct {
	//	Specify the read index that precedes this read.
	XsdGoPkgHasAttr_FollowsReadIndex_XsdtNonNegativeInteger_

	//	Specify the read index that follows this read.
	XsdGoPkgHasAttr_PrecedesReadIndex_XsdtNonNegativeInteger_
}

//	If the WalkHandlers.TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceChoiceRelativeOrder function is not nil (ie. was set by outside code), calls it with this TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceChoiceRelativeOrder instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceChoiceRelativeOrder instance.
func (me *TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceChoiceRelativeOrder) Walk() (err error) {
	if fn := WalkHandlers.TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceChoiceRelativeOrder; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_RelativeORDERchoicesequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_RelativeOrder_TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceChoiceRelativeOrder_ struct {
	//	The read is located beginning at the offset or cycle relative to another read. This choice is
	//	appropriate for example when specifying a read that follows a variable length expected sequence(s).
	RelativeOrder *TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceChoiceRelativeOrder `xml:"RELATIVE_ORDER"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_RelativeORDERchoicesequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_RelativeOrder_TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceChoiceRelativeOrder_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_RelativeORDERchoicesequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_RelativeOrder_TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceChoiceRelativeOrder_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_RelativeORDERchoicesequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_RelativeOrder_TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceChoiceRelativeOrder_ instance.
func (me *XsdGoPkgHasElem_RelativeORDERchoicesequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_RelativeOrder_TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceChoiceRelativeOrder_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_RelativeORDERchoicesequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_RelativeOrder_TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceChoiceRelativeOrder_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.RelativeOrder.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdPlatformTypeChoiceLs454AllInstrumentModel xsdt.String

//	Returns true if the value of this enumerated TxsdPlatformTypeChoiceLs454AllInstrumentModel is "454 GS FLX+".
func (me TxsdPlatformTypeChoiceLs454AllInstrumentModel) Is454GsFlx() bool {
	return me.String() == "454 GS FLX+"
}

//	Returns true if the value of this enumerated TxsdPlatformTypeChoiceLs454AllInstrumentModel is "454 GS Junior".
func (me TxsdPlatformTypeChoiceLs454AllInstrumentModel) Is454GsJunior() bool {
	return me.String() == "454 GS Junior"
}

//	Since TxsdPlatformTypeChoiceLs454AllInstrumentModel is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdPlatformTypeChoiceLs454AllInstrumentModel) Set(s string) { (*xsdt.String)(me).Set(s) }

//	Returns true if the value of this enumerated TxsdPlatformTypeChoiceLs454AllInstrumentModel is "454 GS 20".
func (me TxsdPlatformTypeChoiceLs454AllInstrumentModel) Is454Gs20() bool {
	return me.String() == "454 GS 20"
}

//	Returns true if the value of this enumerated TxsdPlatformTypeChoiceLs454AllInstrumentModel is "454 GS".
func (me TxsdPlatformTypeChoiceLs454AllInstrumentModel) Is454Gs() bool {
	return me.String() == "454 GS"
}

//	Returns true if the value of this enumerated TxsdPlatformTypeChoiceLs454AllInstrumentModel is "454 GS FLX Titanium".
func (me TxsdPlatformTypeChoiceLs454AllInstrumentModel) Is454GsFlxTitanium() bool {
	return me.String() == "454 GS FLX Titanium"
}

//	Returns true if the value of this enumerated TxsdPlatformTypeChoiceLs454AllInstrumentModel is "unspecified".
func (me TxsdPlatformTypeChoiceLs454AllInstrumentModel) IsUnspecified() bool {
	return me.String() == "unspecified"
}

//	Since TxsdPlatformTypeChoiceLs454AllInstrumentModel is just a simple String type, this merely returns the current string value.
func (me TxsdPlatformTypeChoiceLs454AllInstrumentModel) String() string {
	return xsdt.String(me).String()
}

//	This convenience method just performs a simple type conversion to TxsdPlatformTypeChoiceLs454AllInstrumentModel's alias type xsdt.String.
func (me TxsdPlatformTypeChoiceLs454AllInstrumentModel) ToXsdtString() xsdt.String {
	return xsdt.String(me)
}

type XsdGoPkgHasElems_InstrumentMODELallLS454ChoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceLs454AllInstrumentModel_ struct {
	InstrumentModels []TxsdPlatformTypeChoiceLs454AllInstrumentModel `xml:"INSTRUMENT_MODEL"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_InstrumentMODELallLS454ChoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceLs454AllInstrumentModel_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_InstrumentMODELallLS454ChoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceLs454AllInstrumentModel_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_InstrumentMODELallLS454ChoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceLs454AllInstrumentModel_ instance.
func (me *XsdGoPkgHasElems_InstrumentMODELallLS454ChoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceLs454AllInstrumentModel_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_InstrumentMODELallLS454ChoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceLs454AllInstrumentModel_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Whether the reference alignment includes unaligned reads.
type XsdGoPkgHasElems_AlignmentIncludesUnalignedReadsallAlignmentDirectivesTypeschema_AlignmentIncludesUnalignedReads_XsdtBoolean_ struct {
	//	Whether the reference alignment includes unaligned reads.
	AlignmentIncludesUnalignedReadses []xsdt.Boolean `xml:"alignment_includes_unaligned_reads"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_AlignmentIncludesUnalignedReadsallAlignmentDirectivesTypeschema_AlignmentIncludesUnalignedReads_XsdtBoolean_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_AlignmentIncludesUnalignedReadsallAlignmentDirectivesTypeschema_AlignmentIncludesUnalignedReads_XsdtBoolean_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_AlignmentIncludesUnalignedReadsallAlignmentDirectivesTypeschema_AlignmentIncludesUnalignedReads_XsdtBoolean_ instance.
func (me *XsdGoPkgHasElems_AlignmentIncludesUnalignedReadsallAlignmentDirectivesTypeschema_AlignmentIncludesUnalignedReads_XsdtBoolean_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_AlignmentIncludesUnalignedReadsallAlignmentDirectivesTypeschema_AlignmentIncludesUnalignedReads_XsdtBoolean_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Short name for the standard reference assembly used in the alignment. This should resolve
//	into community accepted collection of reference sequences.
type XsdGoPkgHasElems_STANDARDchoiceASSEMBLYsequenceREFERENCEALIGNMENTchoiceANALYSISTYPEsequenceAnalysisTypeschema_Standard_TxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceAssemblyChoiceStandard_ struct {
	//	Short name for the standard reference assembly used in the alignment. This should resolve
	//	into community accepted collection of reference sequences.
	Standards []*TxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceAssemblyChoiceStandard `xml:"STANDARD"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_STANDARDchoiceASSEMBLYsequenceREFERENCEALIGNMENTchoiceANALYSISTYPEsequenceAnalysisTypeschema_Standard_TxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceAssemblyChoiceStandard_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_STANDARDchoiceASSEMBLYsequenceREFERENCEALIGNMENTchoiceANALYSISTYPEsequenceAnalysisTypeschema_Standard_TxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceAssemblyChoiceStandard_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_STANDARDchoiceASSEMBLYsequenceREFERENCEALIGNMENTchoiceANALYSISTYPEsequenceAnalysisTypeschema_Standard_TxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceAssemblyChoiceStandard_ instance.
func (me *XsdGoPkgHasElems_STANDARDchoiceASSEMBLYsequenceREFERENCEALIGNMENTchoiceANALYSISTYPEsequenceAnalysisTypeschema_Standard_TxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceAssemblyChoiceStandard_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_STANDARDchoiceASSEMBLYsequenceREFERENCEALIGNMENTchoiceANALYSISTYPEsequenceAnalysisTypeschema_Standard_TxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceAssemblyChoiceStandard_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Standards {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	READ_INDEX starts at 0 and is incrementally increased for each sequential READ_SPEC within a
//	SPOT_DECODE_SPEC
type XsdGoPkgHasElems_ReadINDEXsequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_ReadIndex_XsdtNonNegativeInteger_ struct {
	//	READ_INDEX starts at 0 and is incrementally increased for each sequential READ_SPEC within a
	//	SPOT_DECODE_SPEC
	ReadIndexs []xsdt.NonNegativeInteger `xml:"READ_INDEX"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_ReadINDEXsequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_ReadIndex_XsdtNonNegativeInteger_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ReadINDEXsequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_ReadIndex_XsdtNonNegativeInteger_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ReadINDEXsequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_ReadIndex_XsdtNonNegativeInteger_ instance.
func (me *XsdGoPkgHasElems_ReadINDEXsequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_ReadIndex_XsdtNonNegativeInteger_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_ReadINDEXsequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_ReadIndex_XsdtNonNegativeInteger_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	A set of choices of expected basecalls for a current read. Read will be zero-length if none is
//	found.
//	Specify an optional starting point for tag (base offset from 1).
type XsdGoPkgHasAttr_BaseCoord_XsdtNonNegativeInteger_ struct {
	//	Specify an optional starting point for tag (base offset from 1).
	BaseCoord xsdt.NonNegativeInteger `xml:"base_coord,attr"`
}

//	Element's body contains a basecall, attribute provide description of this read meaning as
//	well as matching rules.
//	Maximum number of mismatches
type XsdGoPkgHasAttr_MaxMismatch_XsdtNonNegativeInteger_ struct {
	//	Maximum number of mismatches
	MaxMismatch xsdt.NonNegativeInteger `xml:"max_mismatch,attr"`
}

//	Where the match should occur. Changes the rules on how min_match and max_mismatch
//	are counted.
type TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceChoiceExpectedBasecallTableSequenceBasecallSimpleContentExtensionMatchEdge xsdt.String

//	Returns true if the value of this enumerated TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceChoiceExpectedBasecallTableSequenceBasecallSimpleContentExtensionMatchEdge is "end".
func (me TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceChoiceExpectedBasecallTableSequenceBasecallSimpleContentExtensionMatchEdge) IsEnd() bool {
	return me.String() == "end"
}

//	Since TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceChoiceExpectedBasecallTableSequenceBasecallSimpleContentExtensionMatchEdge is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceChoiceExpectedBasecallTableSequenceBasecallSimpleContentExtensionMatchEdge) Set(s string) {
	(*xsdt.String)(me).Set(s)
}

//	Since TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceChoiceExpectedBasecallTableSequenceBasecallSimpleContentExtensionMatchEdge is just a simple String type, this merely returns the current string value.
func (me TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceChoiceExpectedBasecallTableSequenceBasecallSimpleContentExtensionMatchEdge) String() string {
	return xsdt.String(me).String()
}

//	This convenience method just performs a simple type conversion to TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceChoiceExpectedBasecallTableSequenceBasecallSimpleContentExtensionMatchEdge's alias type xsdt.String.
func (me TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceChoiceExpectedBasecallTableSequenceBasecallSimpleContentExtensionMatchEdge) ToXsdtString() xsdt.String {
	return xsdt.String(me)
}

//	Returns true if the value of this enumerated TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceChoiceExpectedBasecallTableSequenceBasecallSimpleContentExtensionMatchEdge is "full".
func (me TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceChoiceExpectedBasecallTableSequenceBasecallSimpleContentExtensionMatchEdge) IsFull() bool {
	return me.String() == "full"
}

//	Returns true if the value of this enumerated TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceChoiceExpectedBasecallTableSequenceBasecallSimpleContentExtensionMatchEdge is "start".
func (me TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceChoiceExpectedBasecallTableSequenceBasecallSimpleContentExtensionMatchEdge) IsStart() bool {
	return me.String() == "start"
}

type XsdGoPkgHasAttr_MatchEdge_TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceChoiceExpectedBasecallTableSequenceBasecallSimpleContentExtensionMatchEdge_ struct {
	//	Where the match should occur. Changes the rules on how min_match and max_mismatch
	//	are counted.
	MatchEdge TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceChoiceExpectedBasecallTableSequenceBasecallSimpleContentExtensionMatchEdge `xml:"match_edge,attr"`
}

//	When match occurs, the read will be tagged with this group membership
type XsdGoPkgHasAttr_ReadGroupTag_XsdtString_ struct {
	//	When match occurs, the read will be tagged with this group membership
	ReadGroupTag xsdt.String `xml:"read_group_tag,attr"`
}

//	Minimum number of matches to trigger identification.
type XsdGoPkgHasAttr_MinMatch_XsdtNonNegativeInteger_ struct {
	//	Minimum number of matches to trigger identification.
	MinMatch xsdt.NonNegativeInteger `xml:"min_match,attr"`
}

type TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceChoiceExpectedBasecallTableSequenceBasecall struct {
	//	When match occurs, the read will be tagged with this group membership
	XsdGoPkgHasAttr_ReadGroupTag_XsdtString_

	//	Minimum number of matches to trigger identification.
	XsdGoPkgHasAttr_MinMatch_XsdtNonNegativeInteger_

	//	Maximum number of mismatches
	XsdGoPkgHasAttr_MaxMismatch_XsdtNonNegativeInteger_

	//	Where the match should occur. Changes the rules on how min_match and max_mismatch
	//	are counted.
	XsdGoPkgHasAttr_MatchEdge_TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceChoiceExpectedBasecallTableSequenceBasecallSimpleContentExtensionMatchEdge_

	XsdtString
}

//	If the WalkHandlers.TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceChoiceExpectedBasecallTableSequenceBasecall function is not nil (ie. was set by outside code), calls it with this TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceChoiceExpectedBasecallTableSequenceBasecall instance as the single argument. Then calls the Walk() method on 0/5 embed(s) and 0/0 field(s) belonging to this TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceChoiceExpectedBasecallTableSequenceBasecall instance.
func (me *TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceChoiceExpectedBasecallTableSequenceBasecall) Walk() (err error) {
	if fn := WalkHandlers.TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceChoiceExpectedBasecallTableSequenceBasecall; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_BASECALLsequenceEXPECTEDBasecallTABLEchoicesequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_Basecall_TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceChoiceExpectedBasecallTableSequenceBasecall_ struct {
	//	Element's body contains a basecall, attribute provide description of this read meaning as
	//	well as matching rules.
	Basecalls []*TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceChoiceExpectedBasecallTableSequenceBasecall `xml:"BASECALL"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_BASECALLsequenceEXPECTEDBasecallTABLEchoicesequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_Basecall_TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceChoiceExpectedBasecallTableSequenceBasecall_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_BASECALLsequenceEXPECTEDBasecallTABLEchoicesequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_Basecall_TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceChoiceExpectedBasecallTableSequenceBasecall_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_BASECALLsequenceEXPECTEDBasecallTABLEchoicesequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_Basecall_TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceChoiceExpectedBasecallTableSequenceBasecall_ instance.
func (me *XsdGoPkgHasElems_BASECALLsequenceEXPECTEDBasecallTABLEchoicesequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_Basecall_TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceChoiceExpectedBasecallTableSequenceBasecall_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_BASECALLsequenceEXPECTEDBasecallTABLEchoicesequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_Basecall_TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceChoiceExpectedBasecallTableSequenceBasecall_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Basecalls {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Specify whether the spot should have a default length for this tag if the expected base
//	cannot be matched.
type XsdGoPkgHasAttr_DefaultLength_XsdtNonNegativeInteger_ struct {
	//	Specify whether the spot should have a default length for this tag if the expected base
	//	cannot be matched.
	DefaultLength xsdt.NonNegativeInteger `xml:"default_length,attr"`
}

type TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceChoiceExpectedBasecallTable struct {
	//	Element's body contains a basecall, attribute provide description of this read meaning as
	//	well as matching rules.
	XsdGoPkgHasElems_BASECALLsequenceEXPECTEDBasecallTABLEchoicesequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_Basecall_TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceChoiceExpectedBasecallTableSequenceBasecall_

	//	Specify whether the spot should have a default length for this tag if the expected base
	//	cannot be matched.
	XsdGoPkgHasAttr_DefaultLength_XsdtNonNegativeInteger_

	//	Specify an optional starting point for tag (base offset from 1).
	XsdGoPkgHasAttr_BaseCoord_XsdtNonNegativeInteger_
}

//	If the WalkHandlers.TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceChoiceExpectedBasecallTable function is not nil (ie. was set by outside code), calls it with this TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceChoiceExpectedBasecallTable instance as the single argument. Then calls the Walk() method on 1/3 embed(s) and 0/0 field(s) belonging to this TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceChoiceExpectedBasecallTable instance.
func (me *TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceChoiceExpectedBasecallTable) Walk() (err error) {
	if fn := WalkHandlers.TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceChoiceExpectedBasecallTable; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_BASECALLsequenceEXPECTEDBasecallTABLEchoicesequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_Basecall_TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceChoiceExpectedBasecallTableSequenceBasecall_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_ExpectedBasecallTABLEchoicesequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_ExpectedBasecallTable_TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceChoiceExpectedBasecallTable_ struct {
	//	A set of choices of expected basecalls for a current read. Read will be zero-length if none is
	//	found.
	ExpectedBasecallTable *TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceChoiceExpectedBasecallTable `xml:"EXPECTED_BASECALL_TABLE"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_ExpectedBasecallTABLEchoicesequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_ExpectedBasecallTable_TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceChoiceExpectedBasecallTable_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ExpectedBasecallTABLEchoicesequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_ExpectedBasecallTable_TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceChoiceExpectedBasecallTable_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_ExpectedBasecallTABLEchoicesequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_ExpectedBasecallTable_TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceChoiceExpectedBasecallTable_ instance.
func (me *XsdGoPkgHasElem_ExpectedBasecallTABLEchoicesequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_ExpectedBasecallTable_TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceChoiceExpectedBasecallTable_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_ExpectedBasecallTABLEchoicesequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_ExpectedBasecallTable_TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceChoiceExpectedBasecallTable_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.ExpectedBasecallTable.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	454 technology use 1-color sequential flows
type XsdGoPkgHasElem_InstrumentMODELallLS454ChoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceLs454AllInstrumentModel_ struct {
	InstrumentModel TxsdPlatformTypeChoiceLs454AllInstrumentModel `xml:"INSTRUMENT_MODEL"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_InstrumentMODELallLS454ChoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceLs454AllInstrumentModel_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_InstrumentMODELallLS454ChoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceLs454AllInstrumentModel_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_InstrumentMODELallLS454ChoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceLs454AllInstrumentModel_ instance.
func (me *XsdGoPkgHasElem_InstrumentMODELallLS454ChoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceLs454AllInstrumentModel_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_InstrumentMODELallLS454ChoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceLs454AllInstrumentModel_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdPlatformTypeChoiceLs454 struct {
	XsdGoPkgHasElem_InstrumentMODELallLS454ChoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceLs454AllInstrumentModel_
}

//	If the WalkHandlers.TxsdPlatformTypeChoiceLs454 function is not nil (ie. was set by outside code), calls it with this TxsdPlatformTypeChoiceLs454 instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this TxsdPlatformTypeChoiceLs454 instance.
func (me *TxsdPlatformTypeChoiceLs454) Walk() (err error) {
	if fn := WalkHandlers.TxsdPlatformTypeChoiceLs454; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_InstrumentMODELallLS454ChoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceLs454AllInstrumentModel_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Ls454ChoicePlatformTypeschema_Ls454_TxsdPlatformTypeChoiceLs454_ struct {
	//	454 technology use 1-color sequential flows
	Ls454 *TxsdPlatformTypeChoiceLs454 `xml:"LS454"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Ls454ChoicePlatformTypeschema_Ls454_TxsdPlatformTypeChoiceLs454_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Ls454ChoicePlatformTypeschema_Ls454_TxsdPlatformTypeChoiceLs454_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Ls454ChoicePlatformTypeschema_Ls454_TxsdPlatformTypeChoiceLs454_ instance.
func (me *XsdGoPkgHasElem_Ls454ChoicePlatformTypeschema_Ls454_TxsdPlatformTypeChoiceLs454_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Ls454ChoicePlatformTypeschema_Ls454_TxsdPlatformTypeChoiceLs454_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Ls454.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Processing directives tell the Sequence Read Archive how to treat the input data, if any treatment is
//	requested.
//	Tells the Archive who will execute the sample demultiplexing operation..
type TxsdSequencingDirectivesTypeAllSampleDemuxDirective xsdt.String

//	Since TxsdSequencingDirectivesTypeAllSampleDemuxDirective is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdSequencingDirectivesTypeAllSampleDemuxDirective) Set(s string) {
	(*xsdt.String)(me).Set(s)
}

//	Since TxsdSequencingDirectivesTypeAllSampleDemuxDirective is just a simple String type, this merely returns the current string value.
func (me TxsdSequencingDirectivesTypeAllSampleDemuxDirective) String() string {
	return xsdt.String(me).String()
}

//	This convenience method just performs a simple type conversion to TxsdSequencingDirectivesTypeAllSampleDemuxDirective's alias type xsdt.String.
func (me TxsdSequencingDirectivesTypeAllSampleDemuxDirective) ToXsdtString() xsdt.String {
	return xsdt.String(me)
}

//	Returns true if the value of this enumerated TxsdSequencingDirectivesTypeAllSampleDemuxDirective is "leave_as_pool".
func (me TxsdSequencingDirectivesTypeAllSampleDemuxDirective) IsLeaveAsPool() bool {
	return me.String() == "leave_as_pool"
}

//	Returns true if the value of this enumerated TxsdSequencingDirectivesTypeAllSampleDemuxDirective is "submitter_demultiplexed".
func (me TxsdSequencingDirectivesTypeAllSampleDemuxDirective) IsSubmitterDemultiplexed() bool {
	return me.String() == "submitter_demultiplexed"
}

type XsdGoPkgHasElem_SampleDemuxDIRECTIVEallSequencingDirectivesTypeschema_SampleDemuxDirective_TxsdSequencingDirectivesTypeAllSampleDemuxDirective_ struct {
	//	Tells the Archive who will execute the sample demultiplexing operation..
	SampleDemuxDirective TxsdSequencingDirectivesTypeAllSampleDemuxDirective `xml:"SAMPLE_DEMUX_DIRECTIVE"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_SampleDemuxDIRECTIVEallSequencingDirectivesTypeschema_SampleDemuxDirective_TxsdSequencingDirectivesTypeAllSampleDemuxDirective_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_SampleDemuxDIRECTIVEallSequencingDirectivesTypeschema_SampleDemuxDirective_TxsdSequencingDirectivesTypeAllSampleDemuxDirective_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_SampleDemuxDIRECTIVEallSequencingDirectivesTypeschema_SampleDemuxDirective_TxsdSequencingDirectivesTypeAllSampleDemuxDirective_ instance.
func (me *XsdGoPkgHasElem_SampleDemuxDIRECTIVEallSequencingDirectivesTypeschema_SampleDemuxDirective_TxsdSequencingDirectivesTypeAllSampleDemuxDirective_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_SampleDemuxDIRECTIVEallSequencingDirectivesTypeschema_SampleDemuxDirective_TxsdSequencingDirectivesTypeAllSampleDemuxDirective_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TSequencingDirectivesType struct {
	//	Tells the Archive who will execute the sample demultiplexing operation..
	XsdGoPkgHasElem_SampleDemuxDIRECTIVEallSequencingDirectivesTypeschema_SampleDemuxDirective_TxsdSequencingDirectivesTypeAllSampleDemuxDirective_
}

//	If the WalkHandlers.TSequencingDirectivesType function is not nil (ie. was set by outside code), calls it with this TSequencingDirectivesType instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this TSequencingDirectivesType instance.
func (me *TSequencingDirectivesType) Walk() (err error) {
	if fn := WalkHandlers.TSequencingDirectivesType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_SampleDemuxDIRECTIVEallSequencingDirectivesTypeschema_SampleDemuxDirective_TxsdSequencingDirectivesTypeAllSampleDemuxDirective_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_DIRECTIVESsequenceProcessingTypeschema_Directives_TSequencingDirectivesType_ struct {
	//	Processing directives tell the Sequence Read Archive how to treat the input data, if any treatment is
	//	requested.
	Directives *TSequencingDirectivesType `xml:"DIRECTIVES"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_DIRECTIVESsequenceProcessingTypeschema_Directives_TSequencingDirectivesType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_DIRECTIVESsequenceProcessingTypeschema_Directives_TSequencingDirectivesType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_DIRECTIVESsequenceProcessingTypeschema_Directives_TSequencingDirectivesType_ instance.
func (me *XsdGoPkgHasElem_DIRECTIVESsequenceProcessingTypeschema_Directives_TSequencingDirectivesType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_DIRECTIVESsequenceProcessingTypeschema_Directives_TSequencingDirectivesType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Directives.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_RUNsequenceTxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceRunLabelsRUNLABELSsequenceTxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentREFERENCEALIGNMENTchoiceTxsdAnalysisTypeSequenceAnalysisTypeANALYSISTYPEsequenceAnalysisTypeschema_Run_TxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceRunLabelsSequenceRun_ struct {
	Run *TxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceRunLabelsSequenceRun `xml:"RUN"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_RUNsequenceTxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceRunLabelsRUNLABELSsequenceTxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentREFERENCEALIGNMENTchoiceTxsdAnalysisTypeSequenceAnalysisTypeANALYSISTYPEsequenceAnalysisTypeschema_Run_TxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceRunLabelsSequenceRun_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_RUNsequenceTxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceRunLabelsRUNLABELSsequenceTxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentREFERENCEALIGNMENTchoiceTxsdAnalysisTypeSequenceAnalysisTypeANALYSISTYPEsequenceAnalysisTypeschema_Run_TxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceRunLabelsSequenceRun_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_RUNsequenceTxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceRunLabelsRUNLABELSsequenceTxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentREFERENCEALIGNMENTchoiceTxsdAnalysisTypeSequenceAnalysisTypeANALYSISTYPEsequenceAnalysisTypeschema_Run_TxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceRunLabelsSequenceRun_ instance.
func (me *XsdGoPkgHasElem_RUNsequenceTxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceRunLabelsRUNLABELSsequenceTxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentREFERENCEALIGNMENTchoiceTxsdAnalysisTypeSequenceAnalysisTypeANALYSISTYPEsequenceAnalysisTypeschema_Run_TxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceRunLabelsSequenceRun_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_RUNsequenceTxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceRunLabelsRUNLABELSsequenceTxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentREFERENCEALIGNMENTchoiceTxsdAnalysisTypeSequenceAnalysisTypeANALYSISTYPEsequenceAnalysisTypeschema_Run_TxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceRunLabelsSequenceRun_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Run.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The location of the read start in terms of base count (1 is beginning of spot).
type XsdGoPkgHasElem_BaseCOORDchoicesequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_BaseCoord_XsdtInteger_ struct {
	//	The location of the read start in terms of base count (1 is beginning of spot).
	BaseCoord *xsdt.Integer `xml:"BASE_COORD"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_BaseCOORDchoicesequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_BaseCoord_XsdtInteger_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_BaseCOORDchoicesequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_BaseCoord_XsdtInteger_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_BaseCOORDchoicesequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_BaseCoord_XsdtInteger_ instance.
func (me *XsdGoPkgHasElem_BaseCOORDchoicesequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_BaseCoord_XsdtInteger_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_BaseCOORDchoicesequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_BaseCoord_XsdtInteger_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	READ_INDEX starts at 0 and is incrementally increased for each sequential READ_SPEC within a
//	SPOT_DECODE_SPEC
type XsdGoPkgHasElem_ReadINDEXsequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_ReadIndex_XsdtNonNegativeInteger_ struct {
	//	READ_INDEX starts at 0 and is incrementally increased for each sequential READ_SPEC within a
	//	SPOT_DECODE_SPEC
	ReadIndex xsdt.NonNegativeInteger `xml:"READ_INDEX"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_ReadINDEXsequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_ReadIndex_XsdtNonNegativeInteger_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ReadINDEXsequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_ReadIndex_XsdtNonNegativeInteger_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_ReadINDEXsequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_ReadIndex_XsdtNonNegativeInteger_ instance.
func (me *XsdGoPkgHasElem_ReadINDEXsequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_ReadIndex_XsdtNonNegativeInteger_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_ReadINDEXsequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_ReadIndex_XsdtNonNegativeInteger_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	READ_LABEL is a name for this tag, and can be used to on output to determine read name, for example
//	F or R.
type XsdGoPkgHasElem_ReadLABELsequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_ReadLabel_XsdtString_ struct {
	//	READ_LABEL is a name for this tag, and can be used to on output to determine read name, for example
	//	F or R.
	ReadLabel xsdt.String `xml:"READ_LABEL"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_ReadLABELsequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_ReadLabel_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ReadLABELsequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_ReadLabel_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_ReadLABELsequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_ReadLabel_XsdtString_ instance.
func (me *XsdGoPkgHasElem_ReadLABELsequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_ReadLabel_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_ReadLABELsequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_ReadLabel_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceReadClass xsdt.String

//	Since TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceReadClass is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceReadClass) Set(s string) {
	(*xsdt.String)(me).Set(s)
}

//	Since TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceReadClass is just a simple String type, this merely returns the current string value.
func (me TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceReadClass) String() string {
	return xsdt.String(me).String()
}

//	This convenience method just performs a simple type conversion to TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceReadClass's alias type xsdt.String.
func (me TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceReadClass) ToXsdtString() xsdt.String {
	return xsdt.String(me)
}

//	Returns true if the value of this enumerated TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceReadClass is "Application Read".
func (me TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceReadClass) IsApplicationRead() bool {
	return me.String() == "Application Read"
}

//	Returns true if the value of this enumerated TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceReadClass is "Technical Read".
func (me TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceReadClass) IsTechnicalRead() bool {
	return me.String() == "Technical Read"
}

type XsdGoPkgHasElem_ReadCLASSsequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_ReadClass_TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceReadClass_ struct {
	ReadClass TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceReadClass `xml:"READ_CLASS"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_ReadCLASSsequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_ReadClass_TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceReadClass_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ReadCLASSsequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_ReadClass_TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceReadClass_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_ReadCLASSsequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_ReadClass_TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceReadClass_ instance.
func (me *XsdGoPkgHasElem_ReadCLASSsequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_ReadClass_TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceReadClass_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_ReadCLASSsequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_ReadClass_TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceReadClass_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceReadType xsdt.String

//	Returns true if the value of this enumerated TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceReadType is "Other".
func (me TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceReadType) IsOther() bool {
	return me.String() == "Other"
}

//	Since TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceReadType is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceReadType) Set(s string) {
	(*xsdt.String)(me).Set(s)
}

//	Since TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceReadType is just a simple String type, this merely returns the current string value.
func (me TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceReadType) String() string {
	return xsdt.String(me).String()
}

//	This convenience method just performs a simple type conversion to TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceReadType's alias type xsdt.String.
func (me TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceReadType) ToXsdtString() xsdt.String {
	return xsdt.String(me)
}

//	Returns true if the value of this enumerated TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceReadType is "Forward".
func (me TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceReadType) IsForward() bool {
	return me.String() == "Forward"
}

//	Returns true if the value of this enumerated TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceReadType is "Primer".
func (me TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceReadType) IsPrimer() bool {
	return me.String() == "Primer"
}

//	Returns true if the value of this enumerated TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceReadType is "Reverse".
func (me TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceReadType) IsReverse() bool {
	return me.String() == "Reverse"
}

//	Returns true if the value of this enumerated TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceReadType is "Adapter".
func (me TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceReadType) IsAdapter() bool {
	return me.String() == "Adapter"
}

//	Returns true if the value of this enumerated TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceReadType is "Linker".
func (me TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceReadType) IsLinker() bool {
	return me.String() == "Linker"
}

//	Returns true if the value of this enumerated TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceReadType is "BarCode".
func (me TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceReadType) IsBarCode() bool {
	return me.String() == "BarCode"
}

type XsdGoPkgHasElem_ReadTYPEsequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_ReadType_TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceReadType_Forward struct {
	ReadType TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceReadType `xml:"READ_TYPE"`
}

//	Returns the default value for ReadType -- "Forward"
func (me XsdGoPkgHasElem_ReadTYPEsequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_ReadType_TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceReadType_Forward) ReadTypeDefault() TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceReadType {
	return TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceReadType("Forward")
}

//	If the WalkHandlers.XsdGoPkgHasElem_ReadTYPEsequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_ReadType_TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceReadType_Forward function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ReadTYPEsequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_ReadType_TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceReadType_Forward instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_ReadTYPEsequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_ReadType_TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceReadType_Forward instance.
func (me *XsdGoPkgHasElem_ReadTYPEsequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_ReadType_TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceReadType_Forward) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_ReadTYPEsequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_ReadType_TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceReadType_Forward; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpec struct {
	//	READ_INDEX starts at 0 and is incrementally increased for each sequential READ_SPEC within a
	//	SPOT_DECODE_SPEC
	XsdGoPkgHasElem_ReadINDEXsequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_ReadIndex_XsdtNonNegativeInteger_

	//	READ_LABEL is a name for this tag, and can be used to on output to determine read name, for example
	//	F or R.
	XsdGoPkgHasElem_ReadLABELsequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_ReadLabel_XsdtString_

	XsdGoPkgHasElem_ReadCLASSsequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_ReadClass_TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceReadClass_

	XsdGoPkgHasElem_ReadTYPEsequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_ReadType_TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceReadType_Forward

	//	There are various methods to ordering the reads on the spot.
	//	The read is located beginning at the offset or cycle relative to another read. This choice is
	//	appropriate for example when specifying a read that follows a variable length expected sequence(s).
	XsdGoPkgHasElem_RelativeORDERchoicesequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_RelativeOrder_TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceChoiceRelativeOrder_

	//	There are various methods to ordering the reads on the spot.
	//	The location of the read start in terms of base count (1 is beginning of spot).
	XsdGoPkgHasElem_BaseCOORDchoicesequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_BaseCoord_XsdtInteger_

	//	There are various methods to ordering the reads on the spot.
	//	A set of choices of expected basecalls for a current read. Read will be zero-length if none is
	//	found.
	XsdGoPkgHasElem_ExpectedBasecallTABLEchoicesequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_ExpectedBasecallTable_TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceChoiceExpectedBasecallTable_
}

//	If the WalkHandlers.TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpec function is not nil (ie. was set by outside code), calls it with this TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpec instance as the single argument. Then calls the Walk() method on 7/7 embed(s) and 0/0 field(s) belonging to this TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpec instance.
func (me *TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpec) Walk() (err error) {
	if fn := WalkHandlers.TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpec; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_ReadCLASSsequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_ReadClass_TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceReadClass_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_ReadTYPEsequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_ReadType_TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceReadType_Forward.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_RelativeORDERchoicesequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_RelativeOrder_TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceChoiceRelativeOrder_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_BaseCOORDchoicesequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_BaseCoord_XsdtInteger_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_ExpectedBasecallTABLEchoicesequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_ExpectedBasecallTable_TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceChoiceExpectedBasecallTable_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_ReadINDEXsequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_ReadIndex_XsdtNonNegativeInteger_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_ReadLABELsequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_ReadLabel_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_ReadSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_ReadSpec_TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpec_ struct {
	ReadSpec *TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpec `xml:"READ_SPEC"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_ReadSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_ReadSpec_TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpec_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ReadSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_ReadSpec_TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpec_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_ReadSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_ReadSpec_TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpec_ instance.
func (me *XsdGoPkgHasElem_ReadSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_ReadSpec_TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpec_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_ReadSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_ReadSpec_TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpec_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.ReadSpec.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdPlatformTypeChoiceCapillarySequenceInstrumentModel xsdt.String

//	Since TxsdPlatformTypeChoiceCapillarySequenceInstrumentModel is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdPlatformTypeChoiceCapillarySequenceInstrumentModel) Set(s string) {
	(*xsdt.String)(me).Set(s)
}

//	Since TxsdPlatformTypeChoiceCapillarySequenceInstrumentModel is just a simple String type, this merely returns the current string value.
func (me TxsdPlatformTypeChoiceCapillarySequenceInstrumentModel) String() string {
	return xsdt.String(me).String()
}

//	Returns true if the value of this enumerated TxsdPlatformTypeChoiceCapillarySequenceInstrumentModel is "AB 3730 Genetic Analyzer".
func (me TxsdPlatformTypeChoiceCapillarySequenceInstrumentModel) IsAb3730GeneticAnalyzer() bool {
	return me.String() == "AB 3730 Genetic Analyzer"
}

//	Returns true if the value of this enumerated TxsdPlatformTypeChoiceCapillarySequenceInstrumentModel is "AB 3130 Genetic Analyzer".
func (me TxsdPlatformTypeChoiceCapillarySequenceInstrumentModel) IsAb3130GeneticAnalyzer() bool {
	return me.String() == "AB 3130 Genetic Analyzer"
}

//	Returns true if the value of this enumerated TxsdPlatformTypeChoiceCapillarySequenceInstrumentModel is "AB 310 Genetic Analyzer".
func (me TxsdPlatformTypeChoiceCapillarySequenceInstrumentModel) IsAb310GeneticAnalyzer() bool {
	return me.String() == "AB 310 Genetic Analyzer"
}

//	This convenience method just performs a simple type conversion to TxsdPlatformTypeChoiceCapillarySequenceInstrumentModel's alias type xsdt.String.
func (me TxsdPlatformTypeChoiceCapillarySequenceInstrumentModel) ToXsdtString() xsdt.String {
	return xsdt.String(me)
}

//	Returns true if the value of this enumerated TxsdPlatformTypeChoiceCapillarySequenceInstrumentModel is "AB 3730xL Genetic Analyzer".
func (me TxsdPlatformTypeChoiceCapillarySequenceInstrumentModel) IsAb3730XlGeneticAnalyzer() bool {
	return me.String() == "AB 3730xL Genetic Analyzer"
}

//	Returns true if the value of this enumerated TxsdPlatformTypeChoiceCapillarySequenceInstrumentModel is "AB 3500xL Genetic Analyzer".
func (me TxsdPlatformTypeChoiceCapillarySequenceInstrumentModel) IsAb3500XlGeneticAnalyzer() bool {
	return me.String() == "AB 3500xL Genetic Analyzer"
}

//	Returns true if the value of this enumerated TxsdPlatformTypeChoiceCapillarySequenceInstrumentModel is "AB 3500 Genetic Analyzer".
func (me TxsdPlatformTypeChoiceCapillarySequenceInstrumentModel) IsAb3500GeneticAnalyzer() bool {
	return me.String() == "AB 3500 Genetic Analyzer"
}

//	Returns true if the value of this enumerated TxsdPlatformTypeChoiceCapillarySequenceInstrumentModel is "AB 3130xL Genetic Analyzer".
func (me TxsdPlatformTypeChoiceCapillarySequenceInstrumentModel) IsAb3130XlGeneticAnalyzer() bool {
	return me.String() == "AB 3130xL Genetic Analyzer"
}

//	Returns true if the value of this enumerated TxsdPlatformTypeChoiceCapillarySequenceInstrumentModel is "unspecified".
func (me TxsdPlatformTypeChoiceCapillarySequenceInstrumentModel) IsUnspecified() bool {
	return me.String() == "unspecified"
}

type XsdGoPkgHasElem_InstrumentMODELsequenceCAPILLARYchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceCapillarySequenceInstrumentModel_ struct {
	InstrumentModel TxsdPlatformTypeChoiceCapillarySequenceInstrumentModel `xml:"INSTRUMENT_MODEL"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_InstrumentMODELsequenceCAPILLARYchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceCapillarySequenceInstrumentModel_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_InstrumentMODELsequenceCAPILLARYchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceCapillarySequenceInstrumentModel_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_InstrumentMODELsequenceCAPILLARYchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceCapillarySequenceInstrumentModel_ instance.
func (me *XsdGoPkgHasElem_InstrumentMODELsequenceCAPILLARYchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceCapillarySequenceInstrumentModel_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_InstrumentMODELsequenceCAPILLARYchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceCapillarySequenceInstrumentModel_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	A secondary or defunct primary key in an INSDC primary data database.
type XsdGoPkgHasElem_SecondaryIDsequenceIdentifierTypeschema_SecondaryId_TNameAndLabelType_ struct {
	//	A secondary or defunct primary key in an INSDC primary data database.
	SecondaryId *TNameAndLabelType `xml:"SECONDARY_ID"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_SecondaryIDsequenceIdentifierTypeschema_SecondaryId_TNameAndLabelType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_SecondaryIDsequenceIdentifierTypeschema_SecondaryId_TNameAndLabelType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_SecondaryIDsequenceIdentifierTypeschema_SecondaryId_TNameAndLabelType_ instance.
func (me *XsdGoPkgHasElem_SecondaryIDsequenceIdentifierTypeschema_SecondaryId_TNameAndLabelType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_SecondaryIDsequenceIdentifierTypeschema_SecondaryId_TNameAndLabelType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.SecondaryId.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	454 technology use 1-color sequential flows
type XsdGoPkgHasElems_Ls454ChoicePlatformTypeschema_Ls454_TxsdPlatformTypeChoiceLs454_ struct {
	//	454 technology use 1-color sequential flows
	Ls454s []*TxsdPlatformTypeChoiceLs454 `xml:"LS454"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Ls454ChoicePlatformTypeschema_Ls454_TxsdPlatformTypeChoiceLs454_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Ls454ChoicePlatformTypeschema_Ls454_TxsdPlatformTypeChoiceLs454_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Ls454ChoicePlatformTypeschema_Ls454_TxsdPlatformTypeChoiceLs454_ instance.
func (me *XsdGoPkgHasElems_Ls454ChoicePlatformTypeschema_Ls454_TxsdPlatformTypeChoiceLs454_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Ls454ChoicePlatformTypeschema_Ls454_TxsdPlatformTypeChoiceLs454_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Ls454s {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdPlatformTypeChoiceAbiSolidSequenceInstrumentModel xsdt.String

//	Returns true if the value of this enumerated TxsdPlatformTypeChoiceAbiSolidSequenceInstrumentModel is "AB SOLiD System".
func (me TxsdPlatformTypeChoiceAbiSolidSequenceInstrumentModel) IsAbSOLiDSystem() bool {
	return me.String() == "AB SOLiD System"
}

//	Returns true if the value of this enumerated TxsdPlatformTypeChoiceAbiSolidSequenceInstrumentModel is "AB SOLiD System 2.0".
func (me TxsdPlatformTypeChoiceAbiSolidSequenceInstrumentModel) IsAbSOLiDSystem20() bool {
	return me.String() == "AB SOLiD System 2.0"
}

//	Returns true if the value of this enumerated TxsdPlatformTypeChoiceAbiSolidSequenceInstrumentModel is "AB SOLiD System 3.0".
func (me TxsdPlatformTypeChoiceAbiSolidSequenceInstrumentModel) IsAbSOLiDSystem30() bool {
	return me.String() == "AB SOLiD System 3.0"
}

//	Returns true if the value of this enumerated TxsdPlatformTypeChoiceAbiSolidSequenceInstrumentModel is "AB SOLiD 3 Plus System".
func (me TxsdPlatformTypeChoiceAbiSolidSequenceInstrumentModel) IsAbSOLiD3PlusSystem() bool {
	return me.String() == "AB SOLiD 3 Plus System"
}

//	Returns true if the value of this enumerated TxsdPlatformTypeChoiceAbiSolidSequenceInstrumentModel is "AB SOLiD 4hq System".
func (me TxsdPlatformTypeChoiceAbiSolidSequenceInstrumentModel) IsAbSOLiD4HqSystem() bool {
	return me.String() == "AB SOLiD 4hq System"
}

//	Since TxsdPlatformTypeChoiceAbiSolidSequenceInstrumentModel is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdPlatformTypeChoiceAbiSolidSequenceInstrumentModel) Set(s string) {
	(*xsdt.String)(me).Set(s)
}

//	This convenience method just performs a simple type conversion to TxsdPlatformTypeChoiceAbiSolidSequenceInstrumentModel's alias type xsdt.String.
func (me TxsdPlatformTypeChoiceAbiSolidSequenceInstrumentModel) ToXsdtString() xsdt.String {
	return xsdt.String(me)
}

//	Returns true if the value of this enumerated TxsdPlatformTypeChoiceAbiSolidSequenceInstrumentModel is "unspecified".
func (me TxsdPlatformTypeChoiceAbiSolidSequenceInstrumentModel) IsUnspecified() bool {
	return me.String() == "unspecified"
}

//	Returns true if the value of this enumerated TxsdPlatformTypeChoiceAbiSolidSequenceInstrumentModel is "AB 5500xl Genetic Analyzer".
func (me TxsdPlatformTypeChoiceAbiSolidSequenceInstrumentModel) IsAb5500XlGeneticAnalyzer() bool {
	return me.String() == "AB 5500xl Genetic Analyzer"
}

//	Returns true if the value of this enumerated TxsdPlatformTypeChoiceAbiSolidSequenceInstrumentModel is "AB 5500xl-W Genetic Analysis System".
func (me TxsdPlatformTypeChoiceAbiSolidSequenceInstrumentModel) IsAb5500XlWGeneticAnalysisSystem() bool {
	return me.String() == "AB 5500xl-W Genetic Analysis System"
}

//	Returns true if the value of this enumerated TxsdPlatformTypeChoiceAbiSolidSequenceInstrumentModel is "AB SOLiD PI System".
func (me TxsdPlatformTypeChoiceAbiSolidSequenceInstrumentModel) IsAbSOLiDPiSystem() bool {
	return me.String() == "AB SOLiD PI System"
}

//	Returns true if the value of this enumerated TxsdPlatformTypeChoiceAbiSolidSequenceInstrumentModel is "AB 5500 Genetic Analyzer".
func (me TxsdPlatformTypeChoiceAbiSolidSequenceInstrumentModel) IsAb5500GeneticAnalyzer() bool {
	return me.String() == "AB 5500 Genetic Analyzer"
}

//	Since TxsdPlatformTypeChoiceAbiSolidSequenceInstrumentModel is just a simple String type, this merely returns the current string value.
func (me TxsdPlatformTypeChoiceAbiSolidSequenceInstrumentModel) String() string {
	return xsdt.String(me).String()
}

//	Returns true if the value of this enumerated TxsdPlatformTypeChoiceAbiSolidSequenceInstrumentModel is "AB SOLiD 4 System".
func (me TxsdPlatformTypeChoiceAbiSolidSequenceInstrumentModel) IsAbSOLiD4System() bool {
	return me.String() == "AB SOLiD 4 System"
}

type XsdGoPkgHasElem_InstrumentMODELsequenceABISOLIDchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceAbiSolidSequenceInstrumentModel_ struct {
	InstrumentModel TxsdPlatformTypeChoiceAbiSolidSequenceInstrumentModel `xml:"INSTRUMENT_MODEL"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_InstrumentMODELsequenceABISOLIDchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceAbiSolidSequenceInstrumentModel_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_InstrumentMODELsequenceABISOLIDchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceAbiSolidSequenceInstrumentModel_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_InstrumentMODELsequenceABISOLIDchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceAbiSolidSequenceInstrumentModel_ instance.
func (me *XsdGoPkgHasElem_InstrumentMODELsequenceABISOLIDchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceAbiSolidSequenceInstrumentModel_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_InstrumentMODELsequenceABISOLIDchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceAbiSolidSequenceInstrumentModel_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	ABI is 4-channel flowgram with 1-to-1 mapping between basecalls and flows
type TxsdPlatformTypeChoiceAbiSolid struct {
	XsdGoPkgHasElem_InstrumentMODELsequenceABISOLIDchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceAbiSolidSequenceInstrumentModel_
}

//	If the WalkHandlers.TxsdPlatformTypeChoiceAbiSolid function is not nil (ie. was set by outside code), calls it with this TxsdPlatformTypeChoiceAbiSolid instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this TxsdPlatformTypeChoiceAbiSolid instance.
func (me *TxsdPlatformTypeChoiceAbiSolid) Walk() (err error) {
	if fn := WalkHandlers.TxsdPlatformTypeChoiceAbiSolid; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_InstrumentMODELsequenceABISOLIDchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceAbiSolidSequenceInstrumentModel_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_AbiSOLIDchoicePlatformTypeschema_AbiSolid_TxsdPlatformTypeChoiceAbiSolid_ struct {
	//	ABI is 4-channel flowgram with 1-to-1 mapping between basecalls and flows
	AbiSolids []*TxsdPlatformTypeChoiceAbiSolid `xml:"ABI_SOLID"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_AbiSOLIDchoicePlatformTypeschema_AbiSolid_TxsdPlatformTypeChoiceAbiSolid_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_AbiSOLIDchoicePlatformTypeschema_AbiSolid_TxsdPlatformTypeChoiceAbiSolid_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_AbiSOLIDchoicePlatformTypeschema_AbiSolid_TxsdPlatformTypeChoiceAbiSolid_ instance.
func (me *XsdGoPkgHasElems_AbiSOLIDchoicePlatformTypeschema_AbiSolid_TxsdPlatformTypeChoiceAbiSolid_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_AbiSOLIDchoicePlatformTypeschema_AbiSolid_TxsdPlatformTypeChoiceAbiSolid_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.AbiSolids {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	An identifier from a public non-SRA resource. @namespace would be an official short name of that
//	resource.
type XsdGoPkgHasElem_ExternalIDsequenceIdentifierTypeschema_ExternalId_TQualifiedNameType_ struct {
	//	An identifier from a public non-SRA resource. @namespace would be an official short name of that
	//	resource.
	ExternalId *TQualifiedNameType `xml:"EXTERNAL_ID"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_ExternalIDsequenceIdentifierTypeschema_ExternalId_TQualifiedNameType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ExternalIDsequenceIdentifierTypeschema_ExternalId_TQualifiedNameType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_ExternalIDsequenceIdentifierTypeschema_ExternalId_TQualifiedNameType_ instance.
func (me *XsdGoPkgHasElem_ExternalIDsequenceIdentifierTypeschema_ExternalId_TQualifiedNameType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_ExternalIDsequenceIdentifierTypeschema_ExternalId_TQualifiedNameType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.ExternalId.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_XrefLINKchoiceLinkTypeschema_XrefLink_TXRefType_ struct {
	XrefLinks []*TXRefType `xml:"XREF_LINK"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_XrefLINKchoiceLinkTypeschema_XrefLink_TXRefType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_XrefLINKchoiceLinkTypeschema_XrefLink_TXRefType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_XrefLINKchoiceLinkTypeschema_XrefLink_TXRefType_ instance.
func (me *XsdGoPkgHasElems_XrefLINKchoiceLinkTypeschema_XrefLink_TXRefType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_XrefLINKchoiceLinkTypeschema_XrefLink_TXRefType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.XrefLinks {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	PacificBiosciences platform type for the single molecule real time (SMRT) technology.
type XsdGoPkgHasElem_InstrumentMODELsequencePACBIOSMRTchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoicePacbioSmrtSequenceInstrumentModel_ struct {
	InstrumentModel TxsdPlatformTypeChoicePacbioSmrtSequenceInstrumentModel `xml:"INSTRUMENT_MODEL"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_InstrumentMODELsequencePACBIOSMRTchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoicePacbioSmrtSequenceInstrumentModel_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_InstrumentMODELsequencePACBIOSMRTchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoicePacbioSmrtSequenceInstrumentModel_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_InstrumentMODELsequencePACBIOSMRTchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoicePacbioSmrtSequenceInstrumentModel_ instance.
func (me *XsdGoPkgHasElem_InstrumentMODELsequencePACBIOSMRTchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoicePacbioSmrtSequenceInstrumentModel_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_InstrumentMODELsequencePACBIOSMRTchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoicePacbioSmrtSequenceInstrumentModel_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdPlatformTypeChoicePacbioSmrt struct {
	XsdGoPkgHasElem_InstrumentMODELsequencePACBIOSMRTchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoicePacbioSmrtSequenceInstrumentModel_
}

//	If the WalkHandlers.TxsdPlatformTypeChoicePacbioSmrt function is not nil (ie. was set by outside code), calls it with this TxsdPlatformTypeChoicePacbioSmrt instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this TxsdPlatformTypeChoicePacbioSmrt instance.
func (me *TxsdPlatformTypeChoicePacbioSmrt) Walk() (err error) {
	if fn := WalkHandlers.TxsdPlatformTypeChoicePacbioSmrt; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_InstrumentMODELsequencePACBIOSMRTchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoicePacbioSmrtSequenceInstrumentModel_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_PacbioSMRTchoicePlatformTypeschema_PacbioSmrt_TxsdPlatformTypeChoicePacbioSmrt_ struct {
	//	PacificBiosciences platform type for the single molecule real time (SMRT) technology.
	PacbioSmrts []*TxsdPlatformTypeChoicePacbioSmrt `xml:"PACBIO_SMRT"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_PacbioSMRTchoicePlatformTypeschema_PacbioSmrt_TxsdPlatformTypeChoicePacbioSmrt_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_PacbioSMRTchoicePlatformTypeschema_PacbioSmrt_TxsdPlatformTypeChoicePacbioSmrt_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_PacbioSMRTchoicePlatformTypeschema_PacbioSmrt_TxsdPlatformTypeChoicePacbioSmrt_ instance.
func (me *XsdGoPkgHasElems_PacbioSMRTchoicePlatformTypeschema_PacbioSmrt_TxsdPlatformTypeChoicePacbioSmrt_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_PacbioSMRTchoicePlatformTypeschema_PacbioSmrt_TxsdPlatformTypeChoicePacbioSmrt_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.PacbioSmrts {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	PacificBiosciences platform type for the single molecule real time (SMRT) technology.
type XsdGoPkgHasElem_PacbioSMRTchoicePlatformTypeschema_PacbioSmrt_TxsdPlatformTypeChoicePacbioSmrt_ struct {
	//	PacificBiosciences platform type for the single molecule real time (SMRT) technology.
	PacbioSmrt *TxsdPlatformTypeChoicePacbioSmrt `xml:"PACBIO_SMRT"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_PacbioSMRTchoicePlatformTypeschema_PacbioSmrt_TxsdPlatformTypeChoicePacbioSmrt_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_PacbioSMRTchoicePlatformTypeschema_PacbioSmrt_TxsdPlatformTypeChoicePacbioSmrt_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_PacbioSMRTchoicePlatformTypeschema_PacbioSmrt_TxsdPlatformTypeChoicePacbioSmrt_ instance.
func (me *XsdGoPkgHasElem_PacbioSMRTchoicePlatformTypeschema_PacbioSmrt_TxsdPlatformTypeChoicePacbioSmrt_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_PacbioSMRTchoicePlatformTypeschema_PacbioSmrt_TxsdPlatformTypeChoicePacbioSmrt_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.PacbioSmrt.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Number of base/color calls, cycles, or flows per spot (raw sequence length or flow length including all
//	application and technical tags and mate pairs, but not including gap lengths). This value will be platform dependent,
//	library dependent, and possibly run dependent. Variable length platforms will still have a constant flow/cycle length.
type XsdGoPkgHasElem_SpotLENGTHsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_SpotLength_XsdtNonNegativeInteger_ struct {
	//	Number of base/color calls, cycles, or flows per spot (raw sequence length or flow length including all
	//	application and technical tags and mate pairs, but not including gap lengths). This value will be platform dependent,
	//	library dependent, and possibly run dependent. Variable length platforms will still have a constant flow/cycle length.
	SpotLength xsdt.NonNegativeInteger `xml:"SPOT_LENGTH"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_SpotLENGTHsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_SpotLength_XsdtNonNegativeInteger_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_SpotLENGTHsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_SpotLength_XsdtNonNegativeInteger_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_SpotLENGTHsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_SpotLength_XsdtNonNegativeInteger_ instance.
func (me *XsdGoPkgHasElem_SpotLENGTHsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_SpotLength_XsdtNonNegativeInteger_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_SpotLENGTHsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_SpotLength_XsdtNonNegativeInteger_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_ReadSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_ReadSpec_TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpec_ struct {
	ReadSpecs []*TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpec `xml:"READ_SPEC"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_ReadSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_ReadSpec_TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpec_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ReadSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_ReadSpec_TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpec_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ReadSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_ReadSpec_TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpec_ instance.
func (me *XsdGoPkgHasElems_ReadSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_ReadSpec_TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpec_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_ReadSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_ReadSpec_TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpec_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.ReadSpecs {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdSpotDescriptorTypeChoiceSpotDecodeSpec struct {
	//	Number of base/color calls, cycles, or flows per spot (raw sequence length or flow length including all
	//	application and technical tags and mate pairs, but not including gap lengths). This value will be platform dependent,
	//	library dependent, and possibly run dependent. Variable length platforms will still have a constant flow/cycle length.
	XsdGoPkgHasElem_SpotLENGTHsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_SpotLength_XsdtNonNegativeInteger_

	XsdGoPkgHasElems_ReadSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_ReadSpec_TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpec_
}

//	If the WalkHandlers.TxsdSpotDescriptorTypeChoiceSpotDecodeSpec function is not nil (ie. was set by outside code), calls it with this TxsdSpotDescriptorTypeChoiceSpotDecodeSpec instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TxsdSpotDescriptorTypeChoiceSpotDecodeSpec instance.
func (me *TxsdSpotDescriptorTypeChoiceSpotDecodeSpec) Walk() (err error) {
	if fn := WalkHandlers.TxsdSpotDescriptorTypeChoiceSpotDecodeSpec; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_SpotLENGTHsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_SpotLength_XsdtNonNegativeInteger_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_ReadSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_ReadSpec_TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpec_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	A multiple alignment of short reads against a reference substrate.
type XsdGoPkgHasElems_ReferenceALIGNMENTchoiceTxsdAnalysisTypeSequenceAnalysisTypeANALYSISTYPEsequenceAnalysisTypeschema_ReferenceAlignment_TxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignment_ struct {
	//	A multiple alignment of short reads against a reference substrate.
	ReferenceAlignments []*TxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignment `xml:"REFERENCE_ALIGNMENT"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_ReferenceALIGNMENTchoiceTxsdAnalysisTypeSequenceAnalysisTypeANALYSISTYPEsequenceAnalysisTypeschema_ReferenceAlignment_TxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignment_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ReferenceALIGNMENTchoiceTxsdAnalysisTypeSequenceAnalysisTypeANALYSISTYPEsequenceAnalysisTypeschema_ReferenceAlignment_TxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignment_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ReferenceALIGNMENTchoiceTxsdAnalysisTypeSequenceAnalysisTypeANALYSISTYPEsequenceAnalysisTypeschema_ReferenceAlignment_TxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignment_ instance.
func (me *XsdGoPkgHasElems_ReferenceALIGNMENTchoiceTxsdAnalysisTypeSequenceAnalysisTypeANALYSISTYPEsequenceAnalysisTypeschema_ReferenceAlignment_TxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignment_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_ReferenceALIGNMENTchoiceTxsdAnalysisTypeSequenceAnalysisTypeANALYSISTYPEsequenceAnalysisTypeschema_ReferenceAlignment_TxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignment_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.ReferenceAlignments {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Synonym Names additional to or in place of short_name. For example genbank, gecoll
//	accession.version.
type XsdGoPkgHasElem_NAMEsequenceTxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceAssemblyChoiceStandardSTANDARDchoiceTxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceAssemblyASSEMBLYsequenceTxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentREFERENCEALIGNMENTchoiceTxsdAnalysisTypeSequenceAnalysisTypeANALYSISTYPEsequenceAnalysisTypeschema_Name_TXRefType_ struct {
	//	Synonym Names additional to or in place of short_name. For example genbank, gecoll
	//	accession.version.
	Name *TXRefType `xml:"NAME"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_NAMEsequenceTxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceAssemblyChoiceStandardSTANDARDchoiceTxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceAssemblyASSEMBLYsequenceTxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentREFERENCEALIGNMENTchoiceTxsdAnalysisTypeSequenceAnalysisTypeANALYSISTYPEsequenceAnalysisTypeschema_Name_TXRefType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_NAMEsequenceTxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceAssemblyChoiceStandardSTANDARDchoiceTxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceAssemblyASSEMBLYsequenceTxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentREFERENCEALIGNMENTchoiceTxsdAnalysisTypeSequenceAnalysisTypeANALYSISTYPEsequenceAnalysisTypeschema_Name_TXRefType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_NAMEsequenceTxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceAssemblyChoiceStandardSTANDARDchoiceTxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceAssemblyASSEMBLYsequenceTxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentREFERENCEALIGNMENTchoiceTxsdAnalysisTypeSequenceAnalysisTypeANALYSISTYPEsequenceAnalysisTypeschema_Name_TXRefType_ instance.
func (me *XsdGoPkgHasElem_NAMEsequenceTxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceAssemblyChoiceStandardSTANDARDchoiceTxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceAssemblyASSEMBLYsequenceTxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentREFERENCEALIGNMENTchoiceTxsdAnalysisTypeSequenceAnalysisTypeANALYSISTYPEsequenceAnalysisTypeschema_Name_TXRefType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_NAMEsequenceTxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceAssemblyChoiceStandardSTANDARDchoiceTxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceAssemblyASSEMBLYsequenceTxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentREFERENCEALIGNMENTchoiceTxsdAnalysisTypeSequenceAnalysisTypeANALYSISTYPEsequenceAnalysisTypeschema_Name_TXRefType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Name.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	A SRA object that is the target of the analysis records. For example, a run, sample, or sequence can be
//	the object of the analysis.
type XsdGoPkgHasElem_TARGETsequenceTARGETSsequenceAnalysisTypeschema_Target_TSraLinkType_ struct {
	//	A SRA object that is the target of the analysis records. For example, a run, sample, or sequence can be
	//	the object of the analysis.
	Target *TSraLinkType `xml:"TARGET"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_TARGETsequenceTARGETSsequenceAnalysisTypeschema_Target_TSraLinkType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_TARGETsequenceTARGETSsequenceAnalysisTypeschema_Target_TSraLinkType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_TARGETsequenceTARGETSsequenceAnalysisTypeschema_Target_TSraLinkType_ instance.
func (me *XsdGoPkgHasElem_TARGETsequenceTARGETSsequenceAnalysisTypeschema_Target_TSraLinkType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_TARGETsequenceTARGETSsequenceAnalysisTypeschema_Target_TSraLinkType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Target.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Text label to display for the link.
type XsdGoPkgHasElems_LABELallURLLINKchoiceLinkTypeschema_Label_XsdtString_ struct {
	//	Text label to display for the link.
	Labels []xsdt.String `xml:"LABEL"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_LABELallURLLINKchoiceLinkTypeschema_Label_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_LABELallURLLINKchoiceLinkTypeschema_Label_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_LABELallURLLINKchoiceLinkTypeschema_Label_XsdtString_ instance.
func (me *XsdGoPkgHasElems_LABELallURLLINKchoiceLinkTypeschema_Label_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_LABELallURLLINKchoiceLinkTypeschema_Label_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The location of the read start in terms of base count (1 is beginning of spot).
type XsdGoPkgHasElems_BaseCOORDchoicesequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_BaseCoord_XsdtInteger_ struct {
	//	The location of the read start in terms of base count (1 is beginning of spot).
	BaseCoords []*xsdt.Integer `xml:"BASE_COORD"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_BaseCOORDchoicesequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_BaseCoord_XsdtInteger_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_BaseCOORDchoicesequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_BaseCoord_XsdtInteger_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_BaseCOORDchoicesequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_BaseCoord_XsdtInteger_ instance.
func (me *XsdGoPkgHasElems_BaseCOORDchoicesequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_BaseCoord_XsdtInteger_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_BaseCOORDchoicesequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_BaseCoord_XsdtInteger_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Lexically ordered value that allows for the pipe section to be hierarchically ordered. The float
//	primitive data type is used to allow for pipe sections to be inserted later on.
type XsdGoPkgHasElems_StepINDEXsequencePIPESECTIONsequencePipelineTypeschema_StepIndex_XsdtString_ struct {
	//	Lexically ordered value that allows for the pipe section to be hierarchically ordered. The float
	//	primitive data type is used to allow for pipe sections to be inserted later on.
	StepIndexs []xsdt.String `xml:"STEP_INDEX"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_StepINDEXsequencePIPESECTIONsequencePipelineTypeschema_StepIndex_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_StepINDEXsequencePIPESECTIONsequencePipelineTypeschema_StepIndex_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_StepINDEXsequencePIPESECTIONsequencePipelineTypeschema_StepIndex_XsdtString_ instance.
func (me *XsdGoPkgHasElems_StepINDEXsequencePIPESECTIONsequencePipelineTypeschema_StepIndex_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_StepINDEXsequencePIPESECTIONsequencePipelineTypeschema_StepIndex_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Identify the tools and processing steps used to produce the abundance measurements (coverage
//	tracks).
type XsdGoPkgHasElems_PROCESSINGsequenceABUNDANCEMEASUREMENTchoiceANALYSISTYPEsequenceAnalysisTypeschema_Processing_TDefaultProcessingType_ struct {
	//	Identify the tools and processing steps used to produce the abundance measurements (coverage
	//	tracks).
	Processings []*TDefaultProcessingType `xml:"PROCESSING"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_PROCESSINGsequenceABUNDANCEMEASUREMENTchoiceANALYSISTYPEsequenceAnalysisTypeschema_Processing_TDefaultProcessingType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_PROCESSINGsequenceABUNDANCEMEASUREMENTchoiceANALYSISTYPEsequenceAnalysisTypeschema_Processing_TDefaultProcessingType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_PROCESSINGsequenceABUNDANCEMEASUREMENTchoiceANALYSISTYPEsequenceAnalysisTypeschema_Processing_TDefaultProcessingType_ instance.
func (me *XsdGoPkgHasElems_PROCESSINGsequenceABUNDANCEMEASUREMENTchoiceANALYSISTYPEsequenceAnalysisTypeschema_Processing_TDefaultProcessingType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_PROCESSINGsequenceABUNDANCEMEASUREMENTchoiceANALYSISTYPEsequenceAnalysisTypeschema_Processing_TDefaultProcessingType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Processings {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Optional scientific units.
type XsdGoPkgHasElems_UNITSallAttributeTypeschema_Units_XsdtString_ struct {
	//	Optional scientific units.
	Unitses []xsdt.String `xml:"UNITS"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_UNITSallAttributeTypeschema_Units_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_UNITSallAttributeTypeschema_Units_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_UNITSallAttributeTypeschema_Units_XsdtString_ instance.
func (me *XsdGoPkgHasElems_UNITSallAttributeTypeschema_Units_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_UNITSallAttributeTypeschema_Units_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Whether the reference alignment includes all reads regardless of whether they fail the instrument vendor's
//	quality check.
type XsdGoPkgHasElems_AlignmentIncludesFailedReadsallAlignmentDirectivesTypeschema_AlignmentIncludesFailedReads_XsdtBoolean_ struct {
	//	Whether the reference alignment includes all reads regardless of whether they fail the instrument vendor's
	//	quality check.
	AlignmentIncludesFailedReadses []xsdt.Boolean `xml:"alignment_includes_failed_reads"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_AlignmentIncludesFailedReadsallAlignmentDirectivesTypeschema_AlignmentIncludesFailedReads_XsdtBoolean_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_AlignmentIncludesFailedReadsallAlignmentDirectivesTypeschema_AlignmentIncludesFailedReads_XsdtBoolean_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_AlignmentIncludesFailedReadsallAlignmentDirectivesTypeschema_AlignmentIncludesFailedReads_XsdtBoolean_ instance.
func (me *XsdGoPkgHasElems_AlignmentIncludesFailedReadsallAlignmentDirectivesTypeschema_AlignmentIncludesFailedReads_XsdtBoolean_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_AlignmentIncludesFailedReadsallAlignmentDirectivesTypeschema_AlignmentIncludesFailedReads_XsdtBoolean_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The read is located beginning at the offset or cycle relative to another read. This choice is
//	appropriate for example when specifying a read that follows a variable length expected sequence(s).
type XsdGoPkgHasElems_RelativeORDERchoicesequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_RelativeOrder_TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceChoiceRelativeOrder_ struct {
	//	The read is located beginning at the offset or cycle relative to another read. This choice is
	//	appropriate for example when specifying a read that follows a variable length expected sequence(s).
	RelativeOrders []*TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceChoiceRelativeOrder `xml:"RELATIVE_ORDER"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_RelativeORDERchoicesequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_RelativeOrder_TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceChoiceRelativeOrder_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_RelativeORDERchoicesequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_RelativeOrder_TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceChoiceRelativeOrder_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_RelativeORDERchoicesequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_RelativeOrder_TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceChoiceRelativeOrder_ instance.
func (me *XsdGoPkgHasElems_RelativeORDERchoicesequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_RelativeOrder_TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceChoiceRelativeOrder_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_RelativeORDERchoicesequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_RelativeOrder_TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceChoiceRelativeOrder_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.RelativeOrders {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	A set of choices of expected basecalls for a current read. Read will be zero-length if none is
//	found.
type XsdGoPkgHasElems_ExpectedBasecallTABLEchoicesequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_ExpectedBasecallTable_TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceChoiceExpectedBasecallTable_ struct {
	//	A set of choices of expected basecalls for a current read. Read will be zero-length if none is
	//	found.
	ExpectedBasecallTables []*TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceChoiceExpectedBasecallTable `xml:"EXPECTED_BASECALL_TABLE"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_ExpectedBasecallTABLEchoicesequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_ExpectedBasecallTable_TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceChoiceExpectedBasecallTable_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ExpectedBasecallTABLEchoicesequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_ExpectedBasecallTable_TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceChoiceExpectedBasecallTable_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ExpectedBasecallTABLEchoicesequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_ExpectedBasecallTable_TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceChoiceExpectedBasecallTable_ instance.
func (me *XsdGoPkgHasElems_ExpectedBasecallTABLEchoicesequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_ExpectedBasecallTable_TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceChoiceExpectedBasecallTable_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_ExpectedBasecallTABLEchoicesequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_ExpectedBasecallTable_TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceChoiceExpectedBasecallTable_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.ExpectedBasecallTables {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The STUDY_REF descriptor establishes the relationship of the analysis to the parent study. This can either be
//	the accession of an existing archived study record, or a reference to a new study record in the same submission or same center
//	(which does not yet have an accession).
type XsdGoPkgHasElems_StudyREFsequenceAnalysisTypeschema_StudyRef_TxsdAnalysisTypeSequenceStudyRef_ struct {
	//	The STUDY_REF descriptor establishes the relationship of the analysis to the parent study. This can either be
	//	the accession of an existing archived study record, or a reference to a new study record in the same submission or same center
	//	(which does not yet have an accession).
	StudyRefs []*TxsdAnalysisTypeSequenceStudyRef `xml:"STUDY_REF"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_StudyREFsequenceAnalysisTypeschema_StudyRef_TxsdAnalysisTypeSequenceStudyRef_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_StudyREFsequenceAnalysisTypeschema_StudyRef_TxsdAnalysisTypeSequenceStudyRef_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_StudyREFsequenceAnalysisTypeschema_StudyRef_TxsdAnalysisTypeSequenceStudyRef_ instance.
func (me *XsdGoPkgHasElems_StudyREFsequenceAnalysisTypeschema_StudyRef_TxsdAnalysisTypeSequenceStudyRef_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_StudyREFsequenceAnalysisTypeschema_StudyRef_TxsdAnalysisTypeSequenceStudyRef_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.StudyRefs {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	A list of ad-hoc reference sequences identified by database link.
type XsdGoPkgHasElems_CUSTOMchoiceASSEMBLYsequenceREFERENCEALIGNMENTchoiceANALYSISTYPEsequenceAnalysisTypeschema_Custom_TxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceAssemblyChoiceCustom_ struct {
	//	A list of ad-hoc reference sequences identified by database link.
	Customs []*TxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceAssemblyChoiceCustom `xml:"CUSTOM"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_CUSTOMchoiceASSEMBLYsequenceREFERENCEALIGNMENTchoiceANALYSISTYPEsequenceAnalysisTypeschema_Custom_TxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceAssemblyChoiceCustom_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_CUSTOMchoiceASSEMBLYsequenceREFERENCEALIGNMENTchoiceANALYSISTYPEsequenceAnalysisTypeschema_Custom_TxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceAssemblyChoiceCustom_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_CUSTOMchoiceASSEMBLYsequenceREFERENCEALIGNMENTchoiceANALYSISTYPEsequenceAnalysisTypeschema_Custom_TxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceAssemblyChoiceCustom_ instance.
func (me *XsdGoPkgHasElems_CUSTOMchoiceASSEMBLYsequenceREFERENCEALIGNMENTchoiceANALYSISTYPEsequenceAnalysisTypeschema_Custom_TxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceAssemblyChoiceCustom_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_CUSTOMchoiceASSEMBLYsequenceREFERENCEALIGNMENTchoiceANALYSISTYPEsequenceAnalysisTypeschema_Custom_TxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceAssemblyChoiceCustom_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Customs {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Element's body contains a basecall, attribute provide description of this read meaning as
//	well as matching rules.
type XsdGoPkgHasElem_BASECALLsequenceEXPECTEDBasecallTABLEchoicesequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_Basecall_TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceChoiceExpectedBasecallTableSequenceBasecall_ struct {
	//	Element's body contains a basecall, attribute provide description of this read meaning as
	//	well as matching rules.
	Basecall *TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceChoiceExpectedBasecallTableSequenceBasecall `xml:"BASECALL"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_BASECALLsequenceEXPECTEDBasecallTABLEchoicesequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_Basecall_TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceChoiceExpectedBasecallTableSequenceBasecall_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_BASECALLsequenceEXPECTEDBasecallTABLEchoicesequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_Basecall_TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceChoiceExpectedBasecallTableSequenceBasecall_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_BASECALLsequenceEXPECTEDBasecallTABLEchoicesequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_Basecall_TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceChoiceExpectedBasecallTableSequenceBasecall_ instance.
func (me *XsdGoPkgHasElem_BASECALLsequenceEXPECTEDBasecallTABLEchoicesequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_Basecall_TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceChoiceExpectedBasecallTableSequenceBasecall_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_BASECALLsequenceEXPECTEDBasecallTABLEchoicesequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_Basecall_TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceChoiceExpectedBasecallTableSequenceBasecall_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Basecall.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_ReadTYPEsequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_ReadType_TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceReadType_Forward struct {
	ReadTypes []TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceReadType `xml:"READ_TYPE"`
}

//	Returns the default value for ReadType -- "Forward"
func (me XsdGoPkgHasElems_ReadTYPEsequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_ReadType_TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceReadType_Forward) ReadTypeDefault() TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceReadType {
	return TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceReadType("Forward")
}

//	If the WalkHandlers.XsdGoPkgHasElems_ReadTYPEsequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_ReadType_TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceReadType_Forward function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ReadTYPEsequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_ReadType_TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceReadType_Forward instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ReadTYPEsequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_ReadType_TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceReadType_Forward instance.
func (me *XsdGoPkgHasElems_ReadTYPEsequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_ReadType_TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceReadType_Forward) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_ReadTYPEsequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_ReadType_TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceReadType_Forward; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Tells the Archive who will execute the sample demultiplexing operation..
type XsdGoPkgHasElems_SampleDemuxDIRECTIVEallSequencingDirectivesTypeschema_SampleDemuxDirective_TxsdSequencingDirectivesTypeAllSampleDemuxDirective_ struct {
	//	Tells the Archive who will execute the sample demultiplexing operation..
	SampleDemuxDirectives []TxsdSequencingDirectivesTypeAllSampleDemuxDirective `xml:"SAMPLE_DEMUX_DIRECTIVE"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_SampleDemuxDIRECTIVEallSequencingDirectivesTypeschema_SampleDemuxDirective_TxsdSequencingDirectivesTypeAllSampleDemuxDirective_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_SampleDemuxDIRECTIVEallSequencingDirectivesTypeschema_SampleDemuxDirective_TxsdSequencingDirectivesTypeAllSampleDemuxDirective_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_SampleDemuxDIRECTIVEallSequencingDirectivesTypeschema_SampleDemuxDirective_TxsdSequencingDirectivesTypeAllSampleDemuxDirective_ instance.
func (me *XsdGoPkgHasElems_SampleDemuxDIRECTIVEallSequencingDirectivesTypeschema_SampleDemuxDirective_TxsdSequencingDirectivesTypeAllSampleDemuxDirective_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_SampleDemuxDIRECTIVEallSequencingDirectivesTypeschema_SampleDemuxDirective_TxsdSequencingDirectivesTypeAllSampleDemuxDirective_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_PIPELINEallDefaultProcessingTypeschema_Pipeline_TPipelineType_ struct {
	Pipelines []*TPipelineType `xml:"PIPELINE"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_PIPELINEallDefaultProcessingTypeschema_Pipeline_TPipelineType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_PIPELINEallDefaultProcessingTypeschema_Pipeline_TPipelineType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_PIPELINEallDefaultProcessingTypeschema_Pipeline_TPipelineType_ instance.
func (me *XsdGoPkgHasElems_PIPELINEallDefaultProcessingTypeschema_Pipeline_TPipelineType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_PIPELINEallDefaultProcessingTypeschema_Pipeline_TPipelineType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Pipelines {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Identify the tools and processing steps used to produce the reference alignment, and specify
//	directives used to load and interpret the data supplied by the submitter.
type XsdGoPkgHasElems_PROCESSINGsequenceREFERENCEALIGNMENTchoiceANALYSISTYPEsequenceAnalysisTypeschema_Processing_TAlignmentProcessingType_ struct {
	//	Identify the tools and processing steps used to produce the reference alignment, and specify
	//	directives used to load and interpret the data supplied by the submitter.
	Processings []*TAlignmentProcessingType `xml:"PROCESSING"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_PROCESSINGsequenceREFERENCEALIGNMENTchoiceANALYSISTYPEsequenceAnalysisTypeschema_Processing_TAlignmentProcessingType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_PROCESSINGsequenceREFERENCEALIGNMENTchoiceANALYSISTYPEsequenceAnalysisTypeschema_Processing_TAlignmentProcessingType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_PROCESSINGsequenceREFERENCEALIGNMENTchoiceANALYSISTYPEsequenceAnalysisTypeschema_Processing_TAlignmentProcessingType_ instance.
func (me *XsdGoPkgHasElems_PROCESSINGsequenceREFERENCEALIGNMENTchoiceANALYSISTYPEsequenceAnalysisTypeschema_Processing_TAlignmentProcessingType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_PROCESSINGsequenceREFERENCEALIGNMENTchoiceANALYSISTYPEsequenceAnalysisTypeschema_Processing_TAlignmentProcessingType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Processings {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdPlatformTypeChoiceCompleteGenomicsSequenceInstrumentModel xsdt.String

//	This convenience method just performs a simple type conversion to TxsdPlatformTypeChoiceCompleteGenomicsSequenceInstrumentModel's alias type xsdt.String.
func (me TxsdPlatformTypeChoiceCompleteGenomicsSequenceInstrumentModel) ToXsdtString() xsdt.String {
	return xsdt.String(me)
}

//	Returns true if the value of this enumerated TxsdPlatformTypeChoiceCompleteGenomicsSequenceInstrumentModel is "Complete Genomics".
func (me TxsdPlatformTypeChoiceCompleteGenomicsSequenceInstrumentModel) IsCompleteGenomics() bool {
	return me.String() == "Complete Genomics"
}

//	Returns true if the value of this enumerated TxsdPlatformTypeChoiceCompleteGenomicsSequenceInstrumentModel is "unspecified".
func (me TxsdPlatformTypeChoiceCompleteGenomicsSequenceInstrumentModel) IsUnspecified() bool {
	return me.String() == "unspecified"
}

//	Since TxsdPlatformTypeChoiceCompleteGenomicsSequenceInstrumentModel is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdPlatformTypeChoiceCompleteGenomicsSequenceInstrumentModel) Set(s string) {
	(*xsdt.String)(me).Set(s)
}

//	Since TxsdPlatformTypeChoiceCompleteGenomicsSequenceInstrumentModel is just a simple String type, this merely returns the current string value.
func (me TxsdPlatformTypeChoiceCompleteGenomicsSequenceInstrumentModel) String() string {
	return xsdt.String(me).String()
}

//	Sequencers based on capillary electrophoresis technology manufactured by LifeTech (formerly Applied
//	BioSciences).
type TxsdPlatformTypeChoiceCapillary struct {
	XsdGoPkgHasElem_InstrumentMODELsequenceCAPILLARYchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceCapillarySequenceInstrumentModel_
}

//	If the WalkHandlers.TxsdPlatformTypeChoiceCapillary function is not nil (ie. was set by outside code), calls it with this TxsdPlatformTypeChoiceCapillary instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this TxsdPlatformTypeChoiceCapillary instance.
func (me *TxsdPlatformTypeChoiceCapillary) Walk() (err error) {
	if fn := WalkHandlers.TxsdPlatformTypeChoiceCapillary; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_InstrumentMODELsequenceCAPILLARYchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceCapillarySequenceInstrumentModel_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_CAPILLARYchoicePlatformTypeschema_Capillary_TxsdPlatformTypeChoiceCapillary_ struct {
	//	Sequencers based on capillary electrophoresis technology manufactured by LifeTech (formerly Applied
	//	BioSciences).
	Capillary *TxsdPlatformTypeChoiceCapillary `xml:"CAPILLARY"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_CAPILLARYchoicePlatformTypeschema_Capillary_TxsdPlatformTypeChoiceCapillary_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_CAPILLARYchoicePlatformTypeschema_Capillary_TxsdPlatformTypeChoiceCapillary_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_CAPILLARYchoicePlatformTypeschema_Capillary_TxsdPlatformTypeChoiceCapillary_ instance.
func (me *XsdGoPkgHasElem_CAPILLARYchoicePlatformTypeschema_Capillary_TxsdPlatformTypeChoiceCapillary_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_CAPILLARYchoicePlatformTypeschema_Capillary_TxsdPlatformTypeChoiceCapillary_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Capillary.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_ReadCLASSsequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_ReadClass_TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceReadClass_ struct {
	ReadClasses []TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceReadClass `xml:"READ_CLASS"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_ReadCLASSsequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_ReadClass_TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceReadClass_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ReadCLASSsequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_ReadClass_TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceReadClass_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ReadCLASSsequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_ReadClass_TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceReadClass_ instance.
func (me *XsdGoPkgHasElems_ReadCLASSsequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_ReadClass_TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceReadClass_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_ReadCLASSsequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_ReadClass_TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceReadClass_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	READ_LABEL is a name for this tag, and can be used to on output to determine read name, for example
//	F or R.
type XsdGoPkgHasElems_ReadLABELsequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_ReadLabel_XsdtString_ struct {
	//	READ_LABEL is a name for this tag, and can be used to on output to determine read name, for example
	//	F or R.
	ReadLabels []xsdt.String `xml:"READ_LABEL"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_ReadLABELsequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_ReadLabel_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ReadLABELsequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_ReadLabel_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ReadLABELsequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_ReadLabel_XsdtString_ instance.
func (me *XsdGoPkgHasElems_ReadLABELsequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_ReadLabel_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_ReadLABELsequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_ReadLabel_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_AnalysisATTRIBUTEsequenceANALYSISATTRIBUTESsequenceAnalysisTypeschema_AnalysisAttribute_TAttributeType_ struct {
	AnalysisAttribute *TAttributeType `xml:"ANALYSIS_ATTRIBUTE"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_AnalysisATTRIBUTEsequenceANALYSISATTRIBUTESsequenceAnalysisTypeschema_AnalysisAttribute_TAttributeType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_AnalysisATTRIBUTEsequenceANALYSISATTRIBUTESsequenceAnalysisTypeschema_AnalysisAttribute_TAttributeType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_AnalysisATTRIBUTEsequenceANALYSISATTRIBUTESsequenceAnalysisTypeschema_AnalysisAttribute_TAttributeType_ instance.
func (me *XsdGoPkgHasElem_AnalysisATTRIBUTEsequenceANALYSISATTRIBUTESsequenceAnalysisTypeschema_AnalysisAttribute_TAttributeType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_AnalysisATTRIBUTEsequenceANALYSISATTRIBUTESsequenceAnalysisTypeschema_AnalysisAttribute_TAttributeType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.AnalysisAttribute.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_EntrezLINKchoiceLinkTypeschema_EntrezLink_TxsdLinkTypeChoiceEntrezLink_ struct {
	EntrezLinks []*TxsdLinkTypeChoiceEntrezLink `xml:"ENTREZ_LINK"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_EntrezLINKchoiceLinkTypeschema_EntrezLink_TxsdLinkTypeChoiceEntrezLink_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_EntrezLINKchoiceLinkTypeschema_EntrezLink_TxsdLinkTypeChoiceEntrezLink_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_EntrezLINKchoiceLinkTypeschema_EntrezLink_TxsdLinkTypeChoiceEntrezLink_ instance.
func (me *XsdGoPkgHasElems_EntrezLINKchoiceLinkTypeschema_EntrezLink_TxsdLinkTypeChoiceEntrezLink_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_EntrezLINKchoiceLinkTypeschema_EntrezLink_TxsdLinkTypeChoiceEntrezLink_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.EntrezLinks {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Title of the analyis object which will be displayed in short form in the Analysis browser and in database
//	search results.
type XsdGoPkgHasElems_TITLEsequenceAnalysisTypeschema_Title_XsdtString_ struct {
	//	Title of the analyis object which will be displayed in short form in the Analysis browser and in database
	//	search results.
	Titles []xsdt.String `xml:"TITLE"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_TITLEsequenceAnalysisTypeschema_Title_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_TITLEsequenceAnalysisTypeschema_Title_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_TITLEsequenceAnalysisTypeschema_Title_XsdtString_ instance.
func (me *XsdGoPkgHasElems_TITLEsequenceAnalysisTypeschema_Title_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_TITLEsequenceAnalysisTypeschema_Title_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_InstrumentMODELallHELICOSchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceHelicosAllInstrumentModel_ struct {
	InstrumentModels []TxsdPlatformTypeChoiceHelicosAllInstrumentModel `xml:"INSTRUMENT_MODEL"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_InstrumentMODELallHELICOSchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceHelicosAllInstrumentModel_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_InstrumentMODELallHELICOSchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceHelicosAllInstrumentModel_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_InstrumentMODELallHELICOSchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceHelicosAllInstrumentModel_ instance.
func (me *XsdGoPkgHasElems_InstrumentMODELallHELICOSchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceHelicosAllInstrumentModel_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_InstrumentMODELallHELICOSchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceHelicosAllInstrumentModel_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Sequencers based on capillary electrophoresis technology manufactured by LifeTech (formerly Applied
//	BioSciences).
type XsdGoPkgHasElems_CAPILLARYchoicePlatformTypeschema_Capillary_TxsdPlatformTypeChoiceCapillary_ struct {
	//	Sequencers based on capillary electrophoresis technology manufactured by LifeTech (formerly Applied
	//	BioSciences).
	Capillaries []*TxsdPlatformTypeChoiceCapillary `xml:"CAPILLARY"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_CAPILLARYchoicePlatformTypeschema_Capillary_TxsdPlatformTypeChoiceCapillary_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_CAPILLARYchoicePlatformTypeschema_Capillary_TxsdPlatformTypeChoiceCapillary_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_CAPILLARYchoicePlatformTypeschema_Capillary_TxsdPlatformTypeChoiceCapillary_ instance.
func (me *XsdGoPkgHasElems_CAPILLARYchoicePlatformTypeschema_Capillary_TxsdPlatformTypeChoiceCapillary_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_CAPILLARYchoicePlatformTypeschema_Capillary_TxsdPlatformTypeChoiceCapillary_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Capillaries {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	A pointer to reference sequences using one of the Link mechanisms.
type XsdGoPkgHasElem_ReferenceSOURCEsequenceCUSTOMchoiceASSEMBLYsequenceREFERENCEALIGNMENTchoiceANALYSISTYPEsequenceAnalysisTypeschema_ReferenceSource_TLinkType_ struct {
	//	A pointer to reference sequences using one of the Link mechanisms.
	ReferenceSource *TLinkType `xml:"REFERENCE_SOURCE"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_ReferenceSOURCEsequenceCUSTOMchoiceASSEMBLYsequenceREFERENCEALIGNMENTchoiceANALYSISTYPEsequenceAnalysisTypeschema_ReferenceSource_TLinkType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ReferenceSOURCEsequenceCUSTOMchoiceASSEMBLYsequenceREFERENCEALIGNMENTchoiceANALYSISTYPEsequenceAnalysisTypeschema_ReferenceSource_TLinkType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_ReferenceSOURCEsequenceCUSTOMchoiceASSEMBLYsequenceREFERENCEALIGNMENTchoiceANALYSISTYPEsequenceAnalysisTypeschema_ReferenceSource_TLinkType_ instance.
func (me *XsdGoPkgHasElem_ReferenceSOURCEsequenceCUSTOMchoiceASSEMBLYsequenceREFERENCEALIGNMENTchoiceANALYSISTYPEsequenceAnalysisTypeschema_ReferenceSource_TLinkType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_ReferenceSOURCEsequenceCUSTOMchoiceASSEMBLYsequenceREFERENCEALIGNMENTchoiceANALYSISTYPEsequenceAnalysisTypeschema_ReferenceSource_TLinkType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.ReferenceSource.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	SRA object(s) targeted for analysis. Run - One or more runs that are assembled, aligned, or analyzed. Sample -
//	All the sequencing data for this sample are being assembled, aligned, or analyzed. Experiment - All the sequencing data for this
//	experiment are being assembled, aligned, or analyzed. Study - All the sequencing data for this study are being assembled,
//	aligned, or analyzed.
type XsdGoPkgHasElems_TARGETSsequenceAnalysisTypeschema_Targets_TxsdAnalysisTypeSequenceTargets_ struct {
	//	SRA object(s) targeted for analysis. Run - One or more runs that are assembled, aligned, or analyzed. Sample -
	//	All the sequencing data for this sample are being assembled, aligned, or analyzed. Experiment - All the sequencing data for this
	//	experiment are being assembled, aligned, or analyzed. Study - All the sequencing data for this study are being assembled,
	//	aligned, or analyzed.
	Targetses []*TxsdAnalysisTypeSequenceTargets `xml:"TARGETS"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_TARGETSsequenceAnalysisTypeschema_Targets_TxsdAnalysisTypeSequenceTargets_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_TARGETSsequenceAnalysisTypeschema_Targets_TxsdAnalysisTypeSequenceTargets_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_TARGETSsequenceAnalysisTypeschema_Targets_TxsdAnalysisTypeSequenceTargets_ instance.
func (me *XsdGoPkgHasElems_TARGETSsequenceAnalysisTypeschema_Targets_TxsdAnalysisTypeSequenceTargets_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_TARGETSsequenceAnalysisTypeschema_Targets_TxsdAnalysisTypeSequenceTargets_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Targetses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	ABI is 4-channel flowgram with 1-to-1 mapping between basecalls and flows
type XsdGoPkgHasElem_AbiSOLIDchoicePlatformTypeschema_AbiSolid_TxsdPlatformTypeChoiceAbiSolid_ struct {
	//	ABI is 4-channel flowgram with 1-to-1 mapping between basecalls and flows
	AbiSolid *TxsdPlatformTypeChoiceAbiSolid `xml:"ABI_SOLID"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_AbiSOLIDchoicePlatformTypeschema_AbiSolid_TxsdPlatformTypeChoiceAbiSolid_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_AbiSOLIDchoicePlatformTypeschema_AbiSolid_TxsdPlatformTypeChoiceAbiSolid_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_AbiSOLIDchoicePlatformTypeschema_AbiSolid_TxsdPlatformTypeChoiceAbiSolid_ instance.
func (me *XsdGoPkgHasElem_AbiSOLIDchoicePlatformTypeschema_AbiSolid_TxsdPlatformTypeChoiceAbiSolid_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_AbiSOLIDchoicePlatformTypeschema_AbiSolid_TxsdPlatformTypeChoiceAbiSolid_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.AbiSolid.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_InstrumentMODELsequenceCOMPLETEGENOMICSchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceCompleteGenomicsSequenceInstrumentModel_ struct {
	InstrumentModel TxsdPlatformTypeChoiceCompleteGenomicsSequenceInstrumentModel `xml:"INSTRUMENT_MODEL"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_InstrumentMODELsequenceCOMPLETEGENOMICSchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceCompleteGenomicsSequenceInstrumentModel_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_InstrumentMODELsequenceCOMPLETEGENOMICSchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceCompleteGenomicsSequenceInstrumentModel_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_InstrumentMODELsequenceCOMPLETEGENOMICSchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceCompleteGenomicsSequenceInstrumentModel_ instance.
func (me *XsdGoPkgHasElem_InstrumentMODELsequenceCOMPLETEGENOMICSchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceCompleteGenomicsSequenceInstrumentModel_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_InstrumentMODELsequenceCOMPLETEGENOMICSchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceCompleteGenomicsSequenceInstrumentModel_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The PLATFORM record selects which sequencing platform and platform-specific runtime parameters. This will be
//	determined by the Center.
//	CompleteGenomics platform type. At present there is no instrument model.
type TxsdPlatformTypeChoiceCompleteGenomics struct {
	XsdGoPkgHasElem_InstrumentMODELsequenceCOMPLETEGENOMICSchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceCompleteGenomicsSequenceInstrumentModel_
}

//	If the WalkHandlers.TxsdPlatformTypeChoiceCompleteGenomics function is not nil (ie. was set by outside code), calls it with this TxsdPlatformTypeChoiceCompleteGenomics instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this TxsdPlatformTypeChoiceCompleteGenomics instance.
func (me *TxsdPlatformTypeChoiceCompleteGenomics) Walk() (err error) {
	if fn := WalkHandlers.TxsdPlatformTypeChoiceCompleteGenomics; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_InstrumentMODELsequenceCOMPLETEGENOMICSchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceCompleteGenomicsSequenceInstrumentModel_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_CompleteGENOMICSchoicePlatformTypeschema_CompleteGenomics_TxsdPlatformTypeChoiceCompleteGenomics_ struct {
	//	CompleteGenomics platform type. At present there is no instrument model.
	CompleteGenomics *TxsdPlatformTypeChoiceCompleteGenomics `xml:"COMPLETE_GENOMICS"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_CompleteGENOMICSchoicePlatformTypeschema_CompleteGenomics_TxsdPlatformTypeChoiceCompleteGenomics_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_CompleteGENOMICSchoicePlatformTypeschema_CompleteGenomics_TxsdPlatformTypeChoiceCompleteGenomics_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_CompleteGENOMICSchoicePlatformTypeschema_CompleteGenomics_TxsdPlatformTypeChoiceCompleteGenomics_ instance.
func (me *XsdGoPkgHasElem_CompleteGENOMICSchoicePlatformTypeschema_CompleteGenomics_TxsdPlatformTypeChoiceCompleteGenomics_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_CompleteGENOMICSchoicePlatformTypeschema_CompleteGenomics_TxsdPlatformTypeChoiceCompleteGenomics_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.CompleteGenomics.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Illumina is 4-channel flowgram with 1-to-1 mapping between basecalls and flows
type TxsdPlatformTypeChoiceIlluminaSequenceInstrumentModel xsdt.String

//	Returns true if the value of this enumerated TxsdPlatformTypeChoiceIlluminaSequenceInstrumentModel is "Illumina Genome Analyzer".
func (me TxsdPlatformTypeChoiceIlluminaSequenceInstrumentModel) IsIlluminaGenomeAnalyzer() bool {
	return me.String() == "Illumina Genome Analyzer"
}

//	Returns true if the value of this enumerated TxsdPlatformTypeChoiceIlluminaSequenceInstrumentModel is "Illumina HiSeq 2500".
func (me TxsdPlatformTypeChoiceIlluminaSequenceInstrumentModel) IsIlluminaHiSeq2500() bool {
	return me.String() == "Illumina HiSeq 2500"
}

//	Returns true if the value of this enumerated TxsdPlatformTypeChoiceIlluminaSequenceInstrumentModel is "Illumina MiSeq".
func (me TxsdPlatformTypeChoiceIlluminaSequenceInstrumentModel) IsIlluminaMiSeq() bool {
	return me.String() == "Illumina MiSeq"
}

//	Returns true if the value of this enumerated TxsdPlatformTypeChoiceIlluminaSequenceInstrumentModel is "NextSeq 500".
func (me TxsdPlatformTypeChoiceIlluminaSequenceInstrumentModel) IsNextSeq500() bool {
	return me.String() == "NextSeq 500"
}

//	Returns true if the value of this enumerated TxsdPlatformTypeChoiceIlluminaSequenceInstrumentModel is "unspecified".
func (me TxsdPlatformTypeChoiceIlluminaSequenceInstrumentModel) IsUnspecified() bool {
	return me.String() == "unspecified"
}

//	Since TxsdPlatformTypeChoiceIlluminaSequenceInstrumentModel is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdPlatformTypeChoiceIlluminaSequenceInstrumentModel) Set(s string) {
	(*xsdt.String)(me).Set(s)
}

//	Since TxsdPlatformTypeChoiceIlluminaSequenceInstrumentModel is just a simple String type, this merely returns the current string value.
func (me TxsdPlatformTypeChoiceIlluminaSequenceInstrumentModel) String() string {
	return xsdt.String(me).String()
}

//	This convenience method just performs a simple type conversion to TxsdPlatformTypeChoiceIlluminaSequenceInstrumentModel's alias type xsdt.String.
func (me TxsdPlatformTypeChoiceIlluminaSequenceInstrumentModel) ToXsdtString() xsdt.String {
	return xsdt.String(me)
}

//	Returns true if the value of this enumerated TxsdPlatformTypeChoiceIlluminaSequenceInstrumentModel is "Illumina HiSeq 1000".
func (me TxsdPlatformTypeChoiceIlluminaSequenceInstrumentModel) IsIlluminaHiSeq1000() bool {
	return me.String() == "Illumina HiSeq 1000"
}

//	Returns true if the value of this enumerated TxsdPlatformTypeChoiceIlluminaSequenceInstrumentModel is "Illumina HiScanSQ".
func (me TxsdPlatformTypeChoiceIlluminaSequenceInstrumentModel) IsIlluminaHiScanSQ() bool {
	return me.String() == "Illumina HiScanSQ"
}

//	Returns true if the value of this enumerated TxsdPlatformTypeChoiceIlluminaSequenceInstrumentModel is "HiSeq X Ten".
func (me TxsdPlatformTypeChoiceIlluminaSequenceInstrumentModel) IsHiSeqXTen() bool {
	return me.String() == "HiSeq X Ten"
}

//	Returns true if the value of this enumerated TxsdPlatformTypeChoiceIlluminaSequenceInstrumentModel is "Illumina Genome Analyzer II".
func (me TxsdPlatformTypeChoiceIlluminaSequenceInstrumentModel) IsIlluminaGenomeAnalyzerIi() bool {
	return me.String() == "Illumina Genome Analyzer II"
}

//	Returns true if the value of this enumerated TxsdPlatformTypeChoiceIlluminaSequenceInstrumentModel is "Illumina Genome Analyzer IIx".
func (me TxsdPlatformTypeChoiceIlluminaSequenceInstrumentModel) IsIlluminaGenomeAnalyzerIIx() bool {
	return me.String() == "Illumina Genome Analyzer IIx"
}

//	Returns true if the value of this enumerated TxsdPlatformTypeChoiceIlluminaSequenceInstrumentModel is "Illumina HiSeq 2000".
func (me TxsdPlatformTypeChoiceIlluminaSequenceInstrumentModel) IsIlluminaHiSeq2000() bool {
	return me.String() == "Illumina HiSeq 2000"
}

//	Returns true if the value of this enumerated TxsdPlatformTypeChoiceIlluminaSequenceInstrumentModel is "Illumina HiSeq 1500".
func (me TxsdPlatformTypeChoiceIlluminaSequenceInstrumentModel) IsIlluminaHiSeq1500() bool {
	return me.String() == "Illumina HiSeq 1500"
}

type XsdGoPkgHasElem_InstrumentMODELsequenceILLUMINAchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceIlluminaSequenceInstrumentModel_ struct {
	InstrumentModel TxsdPlatformTypeChoiceIlluminaSequenceInstrumentModel `xml:"INSTRUMENT_MODEL"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_InstrumentMODELsequenceILLUMINAchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceIlluminaSequenceInstrumentModel_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_InstrumentMODELsequenceILLUMINAchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceIlluminaSequenceInstrumentModel_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_InstrumentMODELsequenceILLUMINAchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceIlluminaSequenceInstrumentModel_ instance.
func (me *XsdGoPkgHasElem_InstrumentMODELsequenceILLUMINAchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceIlluminaSequenceInstrumentModel_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_InstrumentMODELsequenceILLUMINAchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceIlluminaSequenceInstrumentModel_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdPlatformTypeChoiceIllumina struct {
	XsdGoPkgHasElem_InstrumentMODELsequenceILLUMINAchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceIlluminaSequenceInstrumentModel_
}

//	If the WalkHandlers.TxsdPlatformTypeChoiceIllumina function is not nil (ie. was set by outside code), calls it with this TxsdPlatformTypeChoiceIllumina instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this TxsdPlatformTypeChoiceIllumina instance.
func (me *TxsdPlatformTypeChoiceIllumina) Walk() (err error) {
	if fn := WalkHandlers.TxsdPlatformTypeChoiceIllumina; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_InstrumentMODELsequenceILLUMINAchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceIlluminaSequenceInstrumentModel_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_ILLUMINAchoicePlatformTypeschema_Illumina_TxsdPlatformTypeChoiceIllumina_ struct {
	//	Illumina is 4-channel flowgram with 1-to-1 mapping between basecalls and flows
	Illumina *TxsdPlatformTypeChoiceIllumina `xml:"ILLUMINA"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_ILLUMINAchoicePlatformTypeschema_Illumina_TxsdPlatformTypeChoiceIllumina_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ILLUMINAchoicePlatformTypeschema_Illumina_TxsdPlatformTypeChoiceIllumina_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_ILLUMINAchoicePlatformTypeschema_Illumina_TxsdPlatformTypeChoiceIllumina_ instance.
func (me *XsdGoPkgHasElem_ILLUMINAchoicePlatformTypeschema_Illumina_TxsdPlatformTypeChoiceIllumina_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_ILLUMINAchoicePlatformTypeschema_Illumina_TxsdPlatformTypeChoiceIllumina_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Illumina.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Helicos is similar to 454 technology - uses 1-color sequential flows
type XsdGoPkgHasElem_HELICOSchoicePlatformTypeschema_Helicos_TxsdPlatformTypeChoiceHelicos_ struct {
	//	Helicos is similar to 454 technology - uses 1-color sequential flows
	Helicos *TxsdPlatformTypeChoiceHelicos `xml:"HELICOS"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_HELICOSchoicePlatformTypeschema_Helicos_TxsdPlatformTypeChoiceHelicos_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_HELICOSchoicePlatformTypeschema_Helicos_TxsdPlatformTypeChoiceHelicos_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_HELICOSchoicePlatformTypeschema_Helicos_TxsdPlatformTypeChoiceHelicos_ instance.
func (me *XsdGoPkgHasElem_HELICOSchoicePlatformTypeschema_Helicos_TxsdPlatformTypeChoiceHelicos_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_HELICOSchoicePlatformTypeschema_Helicos_TxsdPlatformTypeChoiceHelicos_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Helicos.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Ion Torrent Personal Genome Machine (PGM) from Life Technologies.
type XsdGoPkgHasElem_IonTORRENTchoicePlatformTypeschema_IonTorrent_TxsdPlatformTypeChoiceIonTorrent_ struct {
	//	Ion Torrent Personal Genome Machine (PGM) from Life Technologies.
	IonTorrent *TxsdPlatformTypeChoiceIonTorrent `xml:"ION_TORRENT"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_IonTORRENTchoicePlatformTypeschema_IonTorrent_TxsdPlatformTypeChoiceIonTorrent_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_IonTORRENTchoicePlatformTypeschema_IonTorrent_TxsdPlatformTypeChoiceIonTorrent_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_IonTORRENTchoicePlatformTypeschema_IonTorrent_TxsdPlatformTypeChoiceIonTorrent_ instance.
func (me *XsdGoPkgHasElem_IonTORRENTchoicePlatformTypeschema_IonTorrent_TxsdPlatformTypeChoiceIonTorrent_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_IonTORRENTchoicePlatformTypeschema_IonTorrent_TxsdPlatformTypeChoiceIonTorrent_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.IonTorrent.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TPlatformType struct {
	//	CompleteGenomics platform type. At present there is no instrument model.
	XsdGoPkgHasElem_CompleteGENOMICSchoicePlatformTypeschema_CompleteGenomics_TxsdPlatformTypeChoiceCompleteGenomics_

	//	PacificBiosciences platform type for the single molecule real time (SMRT) technology.
	XsdGoPkgHasElem_PacbioSMRTchoicePlatformTypeschema_PacbioSmrt_TxsdPlatformTypeChoicePacbioSmrt_

	//	Illumina is 4-channel flowgram with 1-to-1 mapping between basecalls and flows
	XsdGoPkgHasElem_ILLUMINAchoicePlatformTypeschema_Illumina_TxsdPlatformTypeChoiceIllumina_

	//	Helicos is similar to 454 technology - uses 1-color sequential flows
	XsdGoPkgHasElem_HELICOSchoicePlatformTypeschema_Helicos_TxsdPlatformTypeChoiceHelicos_

	//	Oxford Nanopore platform type. nanopore-based electronic single molecule analysis
	XsdGoPkgHasElem_OxfordNANOPOREchoicePlatformTypeschema_OxfordNanopore_TxsdPlatformTypeChoiceOxfordNanopore_

	//	Ion Torrent Personal Genome Machine (PGM) from Life Technologies.
	XsdGoPkgHasElem_IonTORRENTchoicePlatformTypeschema_IonTorrent_TxsdPlatformTypeChoiceIonTorrent_

	//	Sequencers based on capillary electrophoresis technology manufactured by LifeTech (formerly Applied
	//	BioSciences).
	XsdGoPkgHasElem_CAPILLARYchoicePlatformTypeschema_Capillary_TxsdPlatformTypeChoiceCapillary_

	//	454 technology use 1-color sequential flows
	XsdGoPkgHasElem_Ls454ChoicePlatformTypeschema_Ls454_TxsdPlatformTypeChoiceLs454_

	//	ABI is 4-channel flowgram with 1-to-1 mapping between basecalls and flows
	XsdGoPkgHasElem_AbiSOLIDchoicePlatformTypeschema_AbiSolid_TxsdPlatformTypeChoiceAbiSolid_
}

//	If the WalkHandlers.TPlatformType function is not nil (ie. was set by outside code), calls it with this TPlatformType instance as the single argument. Then calls the Walk() method on 9/9 embed(s) and 0/0 field(s) belonging to this TPlatformType instance.
func (me *TPlatformType) Walk() (err error) {
	if fn := WalkHandlers.TPlatformType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_ILLUMINAchoicePlatformTypeschema_Illumina_TxsdPlatformTypeChoiceIllumina_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_HELICOSchoicePlatformTypeschema_Helicos_TxsdPlatformTypeChoiceHelicos_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_CompleteGENOMICSchoicePlatformTypeschema_CompleteGenomics_TxsdPlatformTypeChoiceCompleteGenomics_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_PacbioSMRTchoicePlatformTypeschema_PacbioSmrt_TxsdPlatformTypeChoicePacbioSmrt_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Ls454ChoicePlatformTypeschema_Ls454_TxsdPlatformTypeChoiceLs454_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_AbiSOLIDchoicePlatformTypeschema_AbiSolid_TxsdPlatformTypeChoiceAbiSolid_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_OxfordNANOPOREchoicePlatformTypeschema_OxfordNanopore_TxsdPlatformTypeChoiceOxfordNanopore_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_IonTORRENTchoicePlatformTypeschema_IonTorrent_TxsdPlatformTypeChoiceIonTorrent_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_CAPILLARYchoicePlatformTypeschema_Capillary_TxsdPlatformTypeChoiceCapillary_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_InstrumentMODELsequenceCAPILLARYchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceCapillarySequenceInstrumentModel_ struct {
	InstrumentModels []TxsdPlatformTypeChoiceCapillarySequenceInstrumentModel `xml:"INSTRUMENT_MODEL"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_InstrumentMODELsequenceCAPILLARYchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceCapillarySequenceInstrumentModel_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_InstrumentMODELsequenceCAPILLARYchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceCapillarySequenceInstrumentModel_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_InstrumentMODELsequenceCAPILLARYchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceCapillarySequenceInstrumentModel_ instance.
func (me *XsdGoPkgHasElems_InstrumentMODELsequenceCAPILLARYchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceCapillarySequenceInstrumentModel_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_InstrumentMODELsequenceCAPILLARYchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceCapillarySequenceInstrumentModel_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Specification of the reference collection of sequences used in the alignment.
type XsdGoPkgHasElems_ASSEMBLYsequenceTxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentREFERENCEALIGNMENTchoiceTxsdAnalysisTypeSequenceAnalysisTypeANALYSISTYPEsequenceAnalysisTypeschema_Assembly_TxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceAssembly_ struct {
	//	Specification of the reference collection of sequences used in the alignment.
	Assemblies []*TxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceAssembly `xml:"ASSEMBLY"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_ASSEMBLYsequenceTxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentREFERENCEALIGNMENTchoiceTxsdAnalysisTypeSequenceAnalysisTypeANALYSISTYPEsequenceAnalysisTypeschema_Assembly_TxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceAssembly_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ASSEMBLYsequenceTxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentREFERENCEALIGNMENTchoiceTxsdAnalysisTypeSequenceAnalysisTypeANALYSISTYPEsequenceAnalysisTypeschema_Assembly_TxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceAssembly_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ASSEMBLYsequenceTxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentREFERENCEALIGNMENTchoiceTxsdAnalysisTypeSequenceAnalysisTypeANALYSISTYPEsequenceAnalysisTypeschema_Assembly_TxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceAssembly_ instance.
func (me *XsdGoPkgHasElems_ASSEMBLYsequenceTxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentREFERENCEALIGNMENTchoiceTxsdAnalysisTypeSequenceAnalysisTypeANALYSISTYPEsequenceAnalysisTypeschema_Assembly_TxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceAssembly_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_ASSEMBLYsequenceTxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentREFERENCEALIGNMENTchoiceTxsdAnalysisTypeSequenceAnalysisTypeANALYSISTYPEsequenceAnalysisTypeschema_Assembly_TxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceAssembly_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Assemblies {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_InstrumentMODELsequenceOXFORDNANOPOREchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceOxfordNanoporeSequenceInstrumentModel_ struct {
	InstrumentModels []TxsdPlatformTypeChoiceOxfordNanoporeSequenceInstrumentModel `xml:"INSTRUMENT_MODEL"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_InstrumentMODELsequenceOXFORDNANOPOREchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceOxfordNanoporeSequenceInstrumentModel_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_InstrumentMODELsequenceOXFORDNANOPOREchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceOxfordNanoporeSequenceInstrumentModel_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_InstrumentMODELsequenceOXFORDNANOPOREchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceOxfordNanoporeSequenceInstrumentModel_ instance.
func (me *XsdGoPkgHasElems_InstrumentMODELsequenceOXFORDNANOPOREchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceOxfordNanoporeSequenceInstrumentModel_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_InstrumentMODELsequenceOXFORDNANOPOREchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceOxfordNanoporeSequenceInstrumentModel_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TProcessingType struct {
	//	Generic processing pipeline specification.
	XsdGoPkgHasElem_PIPELINEallDefaultProcessingTypeschema_Pipeline_TPipelineType_

	//	Processing directives tell the Sequence Read Archive how to treat the input data, if any treatment is
	//	requested.
	XsdGoPkgHasElem_DIRECTIVESsequenceProcessingTypeschema_Directives_TSequencingDirectivesType_
}

//	If the WalkHandlers.TProcessingType function is not nil (ie. was set by outside code), calls it with this TProcessingType instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TProcessingType instance.
func (me *TProcessingType) Walk() (err error) {
	if fn := WalkHandlers.TProcessingType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_PIPELINEallDefaultProcessingTypeschema_Pipeline_TPipelineType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_DIRECTIVESsequenceProcessingTypeschema_Directives_TSequencingDirectivesType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Oxford Nanopore platform type. nanopore-based electronic single molecule analysis
type XsdGoPkgHasElems_OxfordNANOPOREchoicePlatformTypeschema_OxfordNanopore_TxsdPlatformTypeChoiceOxfordNanopore_ struct {
	//	Oxford Nanopore platform type. nanopore-based electronic single molecule analysis
	OxfordNanopores []*TxsdPlatformTypeChoiceOxfordNanopore `xml:"OXFORD_NANOPORE"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_OxfordNANOPOREchoicePlatformTypeschema_OxfordNanopore_TxsdPlatformTypeChoiceOxfordNanopore_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_OxfordNANOPOREchoicePlatformTypeschema_OxfordNanopore_TxsdPlatformTypeChoiceOxfordNanopore_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_OxfordNANOPOREchoicePlatformTypeschema_OxfordNanopore_TxsdPlatformTypeChoiceOxfordNanopore_ instance.
func (me *XsdGoPkgHasElems_OxfordNANOPOREchoicePlatformTypeschema_OxfordNanopore_TxsdPlatformTypeChoiceOxfordNanopore_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_OxfordNANOPOREchoicePlatformTypeschema_OxfordNanopore_TxsdPlatformTypeChoiceOxfordNanopore_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.OxfordNanopores {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_InstrumentMODELsequenceIONTORRENTchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceIonTorrentSequenceInstrumentModel_ struct {
	InstrumentModels []TxsdPlatformTypeChoiceIonTorrentSequenceInstrumentModel `xml:"INSTRUMENT_MODEL"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_InstrumentMODELsequenceIONTORRENTchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceIonTorrentSequenceInstrumentModel_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_InstrumentMODELsequenceIONTORRENTchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceIonTorrentSequenceInstrumentModel_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_InstrumentMODELsequenceIONTORRENTchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceIonTorrentSequenceInstrumentModel_ instance.
func (me *XsdGoPkgHasElems_InstrumentMODELsequenceIONTORRENTchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceIonTorrentSequenceInstrumentModel_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_InstrumentMODELsequenceIONTORRENTchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceIonTorrentSequenceInstrumentModel_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Accession string meaningful to the NCBI Entrez system.
type XsdGoPkgHasElems_QUERYchoicesequenceENTREZLINKchoiceLinkTypeschema_Query_XsdtString_ struct {
	//	Accession string meaningful to the NCBI Entrez system.
	Queries []xsdt.String `xml:"QUERY"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_QUERYchoicesequenceENTREZLINKchoiceLinkTypeschema_Query_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_QUERYchoicesequenceENTREZLINKchoiceLinkTypeschema_Query_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_QUERYchoicesequenceENTREZLINKchoiceLinkTypeschema_Query_XsdtString_ instance.
func (me *XsdGoPkgHasElems_QUERYchoicesequenceENTREZLINKchoiceLinkTypeschema_Query_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_QUERYchoicesequenceENTREZLINKchoiceLinkTypeschema_Query_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	CompleteGenomics platform type. At present there is no instrument model.
type XsdGoPkgHasElems_CompleteGENOMICSchoicePlatformTypeschema_CompleteGenomics_TxsdPlatformTypeChoiceCompleteGenomics_ struct {
	//	CompleteGenomics platform type. At present there is no instrument model.
	CompleteGenomicses []*TxsdPlatformTypeChoiceCompleteGenomics `xml:"COMPLETE_GENOMICS"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_CompleteGENOMICSchoicePlatformTypeschema_CompleteGenomics_TxsdPlatformTypeChoiceCompleteGenomics_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_CompleteGENOMICSchoicePlatformTypeschema_CompleteGenomics_TxsdPlatformTypeChoiceCompleteGenomics_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_CompleteGENOMICSchoicePlatformTypeschema_CompleteGenomics_TxsdPlatformTypeChoiceCompleteGenomics_ instance.
func (me *XsdGoPkgHasElems_CompleteGENOMICSchoicePlatformTypeschema_CompleteGenomics_TxsdPlatformTypeChoiceCompleteGenomics_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_CompleteGENOMICSchoicePlatformTypeschema_CompleteGenomics_TxsdPlatformTypeChoiceCompleteGenomics_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.CompleteGenomicses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_FILEsequenceFILESallDATABLOCKsequencesequenceAnalysisTypeschema_File_TAnalysisFileType_ struct {
	File *TAnalysisFileType `xml:"FILE"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_FILEsequenceFILESallDATABLOCKsequencesequenceAnalysisTypeschema_File_TAnalysisFileType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_FILEsequenceFILESallDATABLOCKsequencesequenceAnalysisTypeschema_File_TAnalysisFileType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_FILEsequenceFILESallDATABLOCKsequencesequenceAnalysisTypeschema_File_TAnalysisFileType_ instance.
func (me *XsdGoPkgHasElem_FILEsequenceFILESallDATABLOCKsequencesequenceAnalysisTypeschema_File_TAnalysisFileType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_FILEsequenceFILESallDATABLOCKsequencesequenceAnalysisTypeschema_File_TAnalysisFileType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.File.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Numeric record id meaningful to the NCBI Entrez system.
type XsdGoPkgHasElems_IDchoicesequenceENTREZLINKchoiceLinkTypeschema_Id_XsdtNonNegativeInteger_ struct {
	//	Numeric record id meaningful to the NCBI Entrez system.
	Ids []*xsdt.NonNegativeInteger `xml:"ID"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_IDchoicesequenceENTREZLINKchoiceLinkTypeschema_Id_XsdtNonNegativeInteger_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_IDchoicesequenceENTREZLINKchoiceLinkTypeschema_Id_XsdtNonNegativeInteger_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_IDchoicesequenceENTREZLINKchoiceLinkTypeschema_Id_XsdtNonNegativeInteger_ instance.
func (me *XsdGoPkgHasElems_IDchoicesequenceENTREZLINKchoiceLinkTypeschema_Id_XsdtNonNegativeInteger_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_IDchoicesequenceENTREZLINKchoiceLinkTypeschema_Id_XsdtNonNegativeInteger_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_SpotDecodeSPECchoiceSpotDescriptorTypeschema_SpotDecodeSpec_TxsdSpotDescriptorTypeChoiceSpotDecodeSpec_ struct {
	SpotDecodeSpecs []*TxsdSpotDescriptorTypeChoiceSpotDecodeSpec `xml:"SPOT_DECODE_SPEC"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_SpotDecodeSPECchoiceSpotDescriptorTypeschema_SpotDecodeSpec_TxsdSpotDescriptorTypeChoiceSpotDecodeSpec_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_SpotDecodeSPECchoiceSpotDescriptorTypeschema_SpotDecodeSpec_TxsdSpotDescriptorTypeChoiceSpotDecodeSpec_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_SpotDecodeSPECchoiceSpotDescriptorTypeschema_SpotDecodeSpec_TxsdSpotDescriptorTypeChoiceSpotDecodeSpec_ instance.
func (me *XsdGoPkgHasElems_SpotDecodeSPECchoiceSpotDescriptorTypeschema_SpotDecodeSpec_TxsdSpotDescriptorTypeChoiceSpotDecodeSpec_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_SpotDecodeSPECchoiceSpotDescriptorTypeschema_SpotDecodeSpec_TxsdSpotDescriptorTypeChoiceSpotDecodeSpec_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.SpotDecodeSpecs {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Name of the program or process for primary analysis. This may include a test or condition that leads to
//	branching in the workflow.
type XsdGoPkgHasElems_PROGRAMsequencePIPESECTIONsequencePipelineTypeschema_Program_XsdtString_ struct {
	//	Name of the program or process for primary analysis. This may include a test or condition that leads to
	//	branching in the workflow.
	Programs []xsdt.String `xml:"PROGRAM"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_PROGRAMsequencePIPESECTIONsequencePipelineTypeschema_Program_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_PROGRAMsequencePIPESECTIONsequencePipelineTypeschema_Program_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_PROGRAMsequencePIPESECTIONsequencePipelineTypeschema_Program_XsdtString_ instance.
func (me *XsdGoPkgHasElems_PROGRAMsequencePIPESECTIONsequencePipelineTypeschema_Program_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_PROGRAMsequencePIPESECTIONsequencePipelineTypeschema_Program_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Illumina is 4-channel flowgram with 1-to-1 mapping between basecalls and flows
type XsdGoPkgHasElems_ILLUMINAchoicePlatformTypeschema_Illumina_TxsdPlatformTypeChoiceIllumina_ struct {
	//	Illumina is 4-channel flowgram with 1-to-1 mapping between basecalls and flows
	Illuminas []*TxsdPlatformTypeChoiceIllumina `xml:"ILLUMINA"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_ILLUMINAchoicePlatformTypeschema_Illumina_TxsdPlatformTypeChoiceIllumina_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ILLUMINAchoicePlatformTypeschema_Illumina_TxsdPlatformTypeChoiceIllumina_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ILLUMINAchoicePlatformTypeschema_Illumina_TxsdPlatformTypeChoiceIllumina_ instance.
func (me *XsdGoPkgHasElems_ILLUMINAchoicePlatformTypeschema_Illumina_TxsdPlatformTypeChoiceIllumina_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_ILLUMINAchoicePlatformTypeschema_Illumina_TxsdPlatformTypeChoiceIllumina_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Illuminas {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_DIRECTIVESallAlignmentProcessingTypeschema_Directives_TAlignmentDirectivesType_ struct {
	Directiveses []*TAlignmentDirectivesType `xml:"DIRECTIVES"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_DIRECTIVESallAlignmentProcessingTypeschema_Directives_TAlignmentDirectivesType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_DIRECTIVESallAlignmentProcessingTypeschema_Directives_TAlignmentDirectivesType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_DIRECTIVESallAlignmentProcessingTypeschema_Directives_TAlignmentDirectivesType_ instance.
func (me *XsdGoPkgHasElems_DIRECTIVESallAlignmentProcessingTypeschema_Directives_TAlignmentDirectivesType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_DIRECTIVESallAlignmentProcessingTypeschema_Directives_TAlignmentDirectivesType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Directiveses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Properties and attributes of an analysis. These can be entered as free-form tag-value pairs. For certain
//	studies, submitters may be asked to follow a community established ontology when describing the work.
type XsdGoPkgHasElems_AnalysisATTRIBUTESsequenceAnalysisTypeschema_AnalysisAttributes_TxsdAnalysisTypeSequenceAnalysisAttributes_ struct {
	//	Properties and attributes of an analysis. These can be entered as free-form tag-value pairs. For certain
	//	studies, submitters may be asked to follow a community established ontology when describing the work.
	AnalysisAttributeses []*TxsdAnalysisTypeSequenceAnalysisAttributes `xml:"ANALYSIS_ATTRIBUTES"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_AnalysisATTRIBUTESsequenceAnalysisTypeschema_AnalysisAttributes_TxsdAnalysisTypeSequenceAnalysisAttributes_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_AnalysisATTRIBUTESsequenceAnalysisTypeschema_AnalysisAttributes_TxsdAnalysisTypeSequenceAnalysisAttributes_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_AnalysisATTRIBUTESsequenceAnalysisTypeschema_AnalysisAttributes_TxsdAnalysisTypeSequenceAnalysisAttributes_ instance.
func (me *XsdGoPkgHasElems_AnalysisATTRIBUTESsequenceAnalysisTypeschema_AnalysisAttributes_TxsdAnalysisTypeSequenceAnalysisAttributes_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_AnalysisATTRIBUTESsequenceAnalysisTypeschema_AnalysisAttributes_TxsdAnalysisTypeSequenceAnalysisAttributes_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.AnalysisAttributeses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Name of the attribute.
type XsdGoPkgHasElems_TAGallAttributeTypeschema_Tag_XsdtString_ struct {
	//	Name of the attribute.
	Tags []xsdt.String `xml:"TAG"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_TAGallAttributeTypeschema_Tag_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_TAGallAttributeTypeschema_Tag_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_TAGallAttributeTypeschema_Tag_XsdtString_ instance.
func (me *XsdGoPkgHasElems_TAGallAttributeTypeschema_Tag_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_TAGallAttributeTypeschema_Tag_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The SPOT_DESCRIPTOR specifies how to decode the individual reads of interest from the monolithic spot sequence. The
//	spot descriptor contains aspects of the experimental design, platform, and processing information. There will be two methods of
//	specification: one will be an index into a table of typical decodings, the other being an exact specification.
type XsdGoPkgHasElem_SpotDecodeSPECchoiceSpotDescriptorTypeschema_SpotDecodeSpec_TxsdSpotDescriptorTypeChoiceSpotDecodeSpec_ struct {
	SpotDecodeSpec *TxsdSpotDescriptorTypeChoiceSpotDecodeSpec `xml:"SPOT_DECODE_SPEC"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_SpotDecodeSPECchoiceSpotDescriptorTypeschema_SpotDecodeSpec_TxsdSpotDescriptorTypeChoiceSpotDecodeSpec_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_SpotDecodeSPECchoiceSpotDescriptorTypeschema_SpotDecodeSpec_TxsdSpotDescriptorTypeChoiceSpotDecodeSpec_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_SpotDecodeSPECchoiceSpotDescriptorTypeschema_SpotDecodeSpec_TxsdSpotDescriptorTypeChoiceSpotDecodeSpec_ instance.
func (me *XsdGoPkgHasElem_SpotDecodeSPECchoiceSpotDescriptorTypeschema_SpotDecodeSpec_TxsdSpotDescriptorTypeChoiceSpotDecodeSpec_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_SpotDecodeSPECchoiceSpotDescriptorTypeschema_SpotDecodeSpec_TxsdSpotDescriptorTypeChoiceSpotDecodeSpec_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.SpotDecodeSpec.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TSpotDescriptorType struct {
	XsdGoPkgHasElem_SpotDecodeSPECchoiceSpotDescriptorTypeschema_SpotDecodeSpec_TxsdSpotDescriptorTypeChoiceSpotDecodeSpec_
}

//	If the WalkHandlers.TSpotDescriptorType function is not nil (ie. was set by outside code), calls it with this TSpotDescriptorType instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this TSpotDescriptorType instance.
func (me *TSpotDescriptorType) Walk() (err error) {
	if fn := WalkHandlers.TSpotDescriptorType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_SpotDecodeSPECchoiceSpotDescriptorTypeschema_SpotDecodeSpec_TxsdSpotDescriptorTypeChoiceSpotDecodeSpec_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	One or more blocks of data and associated file(s). Each data block may be a partition of the overall analysis
//	object.
type XsdGoPkgHasElem_DataBLOCKsequencesequenceAnalysisTypeschema_DataBlock_TxsdAnalysisTypeSequenceSequenceDataBlock_ struct {
	//	One or more blocks of data and associated file(s). Each data block may be a partition of the overall analysis
	//	object.
	DataBlock *TxsdAnalysisTypeSequenceSequenceDataBlock `xml:"DATA_BLOCK"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_DataBLOCKsequencesequenceAnalysisTypeschema_DataBlock_TxsdAnalysisTypeSequenceSequenceDataBlock_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_DataBLOCKsequencesequenceAnalysisTypeschema_DataBlock_TxsdAnalysisTypeSequenceSequenceDataBlock_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_DataBLOCKsequencesequenceAnalysisTypeschema_DataBlock_TxsdAnalysisTypeSequenceSequenceDataBlock_ instance.
func (me *XsdGoPkgHasElem_DataBLOCKsequencesequenceAnalysisTypeschema_DataBlock_TxsdAnalysisTypeSequenceSequenceDataBlock_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_DataBLOCKsequencesequenceAnalysisTypeschema_DataBlock_TxsdAnalysisTypeSequenceSequenceDataBlock_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.DataBlock.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_UrlLINKchoiceLinkTypeschema_UrlLink_TxsdLinkTypeChoiceUrlLink_ struct {
	UrlLinks []*TxsdLinkTypeChoiceUrlLink `xml:"URL_LINK"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_UrlLINKchoiceLinkTypeschema_UrlLink_TxsdLinkTypeChoiceUrlLink_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_UrlLINKchoiceLinkTypeschema_UrlLink_TxsdLinkTypeChoiceUrlLink_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_UrlLINKchoiceLinkTypeschema_UrlLink_TxsdLinkTypeChoiceUrlLink_ instance.
func (me *XsdGoPkgHasElems_UrlLINKchoiceLinkTypeschema_UrlLink_TxsdLinkTypeChoiceUrlLink_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_UrlLINKchoiceLinkTypeschema_UrlLink_TxsdLinkTypeChoiceUrlLink_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.UrlLinks {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	A placement of sequences including trace, SRA, GI records into a multiple alignment from which a
//	consensus is computed. This branch will be further specified in the future.
type XsdGoPkgHasElems_DeNovoASSEMBLYchoiceTxsdAnalysisTypeSequenceAnalysisTypeANALYSISTYPEsequenceAnalysisTypeschema_DeNovoAssembly_TxsdAnalysisTypeSequenceAnalysisTypeChoiceDeNovoAssembly_ struct {
	//	A placement of sequences including trace, SRA, GI records into a multiple alignment from which a
	//	consensus is computed. This branch will be further specified in the future.
	DeNovoAssemblies []*TxsdAnalysisTypeSequenceAnalysisTypeChoiceDeNovoAssembly `xml:"DE_NOVO_ASSEMBLY"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_DeNovoASSEMBLYchoiceTxsdAnalysisTypeSequenceAnalysisTypeANALYSISTYPEsequenceAnalysisTypeschema_DeNovoAssembly_TxsdAnalysisTypeSequenceAnalysisTypeChoiceDeNovoAssembly_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_DeNovoASSEMBLYchoiceTxsdAnalysisTypeSequenceAnalysisTypeANALYSISTYPEsequenceAnalysisTypeschema_DeNovoAssembly_TxsdAnalysisTypeSequenceAnalysisTypeChoiceDeNovoAssembly_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_DeNovoASSEMBLYchoiceTxsdAnalysisTypeSequenceAnalysisTypeANALYSISTYPEsequenceAnalysisTypeschema_DeNovoAssembly_TxsdAnalysisTypeSequenceAnalysisTypeChoiceDeNovoAssembly_ instance.
func (me *XsdGoPkgHasElems_DeNovoASSEMBLYchoiceTxsdAnalysisTypeSequenceAnalysisTypeANALYSISTYPEsequenceAnalysisTypeschema_DeNovoAssembly_TxsdAnalysisTypeSequenceAnalysisTypeChoiceDeNovoAssembly_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_DeNovoASSEMBLYchoiceTxsdAnalysisTypeSequenceAnalysisTypeANALYSISTYPEsequenceAnalysisTypeschema_DeNovoAssembly_TxsdAnalysisTypeSequenceAnalysisTypeChoiceDeNovoAssembly_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.DeNovoAssemblies {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	INSDC controlled vocabulary of permitted cross references. Please see http://www.insdc.org/db_xref.html . For
//	example, FLYBASE.
type XsdGoPkgHasElems_DBallXRefTypeschema_Db_XsdtString_ struct {
	//	INSDC controlled vocabulary of permitted cross references. Please see http://www.insdc.org/db_xref.html . For
	//	example, FLYBASE.
	Dbs []xsdt.String `xml:"DB"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_DBallXRefTypeschema_Db_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_DBallXRefTypeschema_Db_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_DBallXRefTypeschema_Db_XsdtString_ instance.
func (me *XsdGoPkgHasElems_DBallXRefTypeschema_Db_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_DBallXRefTypeschema_Db_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Supported analysis types.
type XsdGoPkgHasElems_AnalysisTYPEsequenceAnalysisTypeschema_AnalysisType_TxsdAnalysisTypeSequenceAnalysisType_ struct {
	//	Supported analysis types.
	AnalysisTypes []*TxsdAnalysisTypeSequenceAnalysisType `xml:"ANALYSIS_TYPE"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_AnalysisTYPEsequenceAnalysisTypeschema_AnalysisType_TxsdAnalysisTypeSequenceAnalysisType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_AnalysisTYPEsequenceAnalysisTypeschema_AnalysisType_TxsdAnalysisTypeSequenceAnalysisType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_AnalysisTYPEsequenceAnalysisTypeschema_AnalysisType_TxsdAnalysisTypeSequenceAnalysisType_ instance.
func (me *XsdGoPkgHasElems_AnalysisTYPEsequenceAnalysisTypeschema_AnalysisType_TxsdAnalysisTypeSequenceAnalysisType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_AnalysisTYPEsequenceAnalysisTypeschema_AnalysisType_TxsdAnalysisTypeSequenceAnalysisType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.AnalysisTypes {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	primary accession of the record in one of INSDC SRA archives.
type XsdGoPkgHasElems_PrimaryIDsequenceIdentifierTypeschema_PrimaryId_TNameAndLabelType_ struct {
	//	primary accession of the record in one of INSDC SRA archives.
	PrimaryIds []*TNameAndLabelType `xml:"PRIMARY_ID"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_PrimaryIDsequenceIdentifierTypeschema_PrimaryId_TNameAndLabelType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_PrimaryIDsequenceIdentifierTypeschema_PrimaryId_TNameAndLabelType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_PrimaryIDsequenceIdentifierTypeschema_PrimaryId_TNameAndLabelType_ instance.
func (me *XsdGoPkgHasElems_PrimaryIDsequenceIdentifierTypeschema_PrimaryId_TNameAndLabelType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_PrimaryIDsequenceIdentifierTypeschema_PrimaryId_TNameAndLabelType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.PrimaryIds {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Version of the program or process for primary analysis.
type XsdGoPkgHasElems_VERSIONsequencePIPESECTIONsequencePipelineTypeschema_Version_XsdtString_ struct {
	//	Version of the program or process for primary analysis.
	Versions []xsdt.String `xml:"VERSION"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_VERSIONsequencePIPESECTIONsequencePipelineTypeschema_Version_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_VERSIONsequencePIPESECTIONsequencePipelineTypeschema_Version_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_VERSIONsequencePIPESECTIONsequencePipelineTypeschema_Version_XsdtString_ instance.
func (me *XsdGoPkgHasElems_VERSIONsequencePIPESECTIONsequencePipelineTypeschema_Version_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_VERSIONsequencePIPESECTIONsequencePipelineTypeschema_Version_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_AnalysisLINKsequenceTxsdAnalysisTypeSequenceAnalysisLinksANALYSISLINKSsequenceAnalysisTypeschema_AnalysisLink_TLinkType_ struct {
	AnalysisLink *TLinkType `xml:"ANALYSIS_LINK"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_AnalysisLINKsequenceTxsdAnalysisTypeSequenceAnalysisLinksANALYSISLINKSsequenceAnalysisTypeschema_AnalysisLink_TLinkType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_AnalysisLINKsequenceTxsdAnalysisTypeSequenceAnalysisLinksANALYSISLINKSsequenceAnalysisTypeschema_AnalysisLink_TLinkType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_AnalysisLINKsequenceTxsdAnalysisTypeSequenceAnalysisLinksANALYSISLINKSsequenceAnalysisTypeschema_AnalysisLink_TLinkType_ instance.
func (me *XsdGoPkgHasElem_AnalysisLINKsequenceTxsdAnalysisTypeSequenceAnalysisLinksANALYSISLINKSsequenceAnalysisTypeschema_AnalysisLink_TLinkType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_AnalysisLINKsequenceTxsdAnalysisTypeSequenceAnalysisLinksANALYSISLINKSsequenceAnalysisTypeschema_AnalysisLink_TLinkType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.AnalysisLink.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Processing directives tell the Sequence Read Archive how to treat the input data, if any treatment is
//	requested.
type XsdGoPkgHasElems_DIRECTIVESsequenceProcessingTypeschema_Directives_TSequencingDirectivesType_ struct {
	//	Processing directives tell the Sequence Read Archive how to treat the input data, if any treatment is
	//	requested.
	Directiveses []*TSequencingDirectivesType `xml:"DIRECTIVES"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_DIRECTIVESsequenceProcessingTypeschema_Directives_TSequencingDirectivesType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_DIRECTIVESsequenceProcessingTypeschema_Directives_TSequencingDirectivesType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_DIRECTIVESsequenceProcessingTypeschema_Directives_TSequencingDirectivesType_ instance.
func (me *XsdGoPkgHasElems_DIRECTIVESsequenceProcessingTypeschema_Directives_TSequencingDirectivesType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_DIRECTIVESsequenceProcessingTypeschema_Directives_TSequencingDirectivesType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Directiveses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_InstrumentMODELsequenceCOMPLETEGENOMICSchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceCompleteGenomicsSequenceInstrumentModel_ struct {
	InstrumentModels []TxsdPlatformTypeChoiceCompleteGenomicsSequenceInstrumentModel `xml:"INSTRUMENT_MODEL"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_InstrumentMODELsequenceCOMPLETEGENOMICSchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceCompleteGenomicsSequenceInstrumentModel_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_InstrumentMODELsequenceCOMPLETEGENOMICSchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceCompleteGenomicsSequenceInstrumentModel_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_InstrumentMODELsequenceCOMPLETEGENOMICSchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceCompleteGenomicsSequenceInstrumentModel_ instance.
func (me *XsdGoPkgHasElems_InstrumentMODELsequenceCOMPLETEGENOMICSchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceCompleteGenomicsSequenceInstrumentModel_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_InstrumentMODELsequenceCOMPLETEGENOMICSchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceCompleteGenomicsSequenceInstrumentModel_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Ion Torrent Personal Genome Machine (PGM) from Life Technologies.
type XsdGoPkgHasElems_IonTORRENTchoicePlatformTypeschema_IonTorrent_TxsdPlatformTypeChoiceIonTorrent_ struct {
	//	Ion Torrent Personal Genome Machine (PGM) from Life Technologies.
	IonTorrents []*TxsdPlatformTypeChoiceIonTorrent `xml:"ION_TORRENT"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_IonTORRENTchoicePlatformTypeschema_IonTorrent_TxsdPlatformTypeChoiceIonTorrent_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_IonTORRENTchoicePlatformTypeschema_IonTorrent_TxsdPlatformTypeChoiceIonTorrent_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_IonTORRENTchoicePlatformTypeschema_IonTorrent_TxsdPlatformTypeChoiceIonTorrent_ instance.
func (me *XsdGoPkgHasElems_IonTORRENTchoicePlatformTypeschema_IonTorrent_TxsdPlatformTypeChoiceIonTorrent_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_IonTORRENTchoicePlatformTypeschema_IonTorrent_TxsdPlatformTypeChoiceIonTorrent_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.IonTorrents {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_InstrumentMODELsequenceILLUMINAchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceIlluminaSequenceInstrumentModel_ struct {
	InstrumentModels []TxsdPlatformTypeChoiceIlluminaSequenceInstrumentModel `xml:"INSTRUMENT_MODEL"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_InstrumentMODELsequenceILLUMINAchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceIlluminaSequenceInstrumentModel_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_InstrumentMODELsequenceILLUMINAchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceIlluminaSequenceInstrumentModel_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_InstrumentMODELsequenceILLUMINAchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceIlluminaSequenceInstrumentModel_ instance.
func (me *XsdGoPkgHasElems_InstrumentMODELsequenceILLUMINAchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceIlluminaSequenceInstrumentModel_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_InstrumentMODELsequenceILLUMINAchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceIlluminaSequenceInstrumentModel_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Notes about the program or process for primary analysis.
type XsdGoPkgHasElems_NOTESsequencePIPESECTIONsequencePipelineTypeschema_Notes_XsdtString_ struct {
	//	Notes about the program or process for primary analysis.
	Noteses []xsdt.String `xml:"NOTES"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_NOTESsequencePIPESECTIONsequencePipelineTypeschema_Notes_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_NOTESsequencePIPESECTIONsequencePipelineTypeschema_Notes_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_NOTESsequencePIPESECTIONsequencePipelineTypeschema_Notes_XsdtString_ instance.
func (me *XsdGoPkgHasElems_NOTESsequencePIPESECTIONsequencePipelineTypeschema_Notes_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_NOTESsequencePIPESECTIONsequencePipelineTypeschema_Notes_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasCdata struct {
	XsdGoPkgCDATA string `xml:",chardata"`
}

//	If the WalkHandlers.XsdGoPkgHasCdata function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasCdata instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasCdata instance.
func (me *XsdGoPkgHasCdata) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasCdata; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_InstrumentMODELsequenceABISOLIDchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceAbiSolidSequenceInstrumentModel_ struct {
	InstrumentModels []TxsdPlatformTypeChoiceAbiSolidSequenceInstrumentModel `xml:"INSTRUMENT_MODEL"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_InstrumentMODELsequenceABISOLIDchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceAbiSolidSequenceInstrumentModel_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_InstrumentMODELsequenceABISOLIDchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceAbiSolidSequenceInstrumentModel_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_InstrumentMODELsequenceABISOLIDchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceAbiSolidSequenceInstrumentModel_ instance.
func (me *XsdGoPkgHasElems_InstrumentMODELsequenceABISOLIDchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceAbiSolidSequenceInstrumentModel_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_InstrumentMODELsequenceABISOLIDchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceAbiSolidSequenceInstrumentModel_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

var (
	//	Set this to false to break a Walk() immediately as soon as the first error is returned by a custom handler function.
	//	If true, Walk() proceeds and accumulates all errors in the WalkErrors slice.
	WalkContinueOnError = true
	//	Contains all errors accumulated during Walk()s. If you're using this, you need to reset this yourself as needed prior to a fresh Walk().
	WalkErrors []error
	//	Your custom error-handling function, if required.
	WalkOnError func(error)
	//	Provides 234 strong-typed hooks for your own custom handler functions to be invoked when the Walk() method is called on any instance of any (non-attribute-related) struct type defined in this package.
	//	If your custom handler does get called at all for a given struct instance, then it always gets called twice, first with the 'enter' bool argument set to true, then (after having Walk()ed all subordinate struct instances, if any) once again with it set to false.
	WalkHandlers = &XsdGoPkgWalkHandlers{}
)

//	Provides 234 strong-typed hooks for your own custom handler functions to be invoked when the Walk() method is called on any instance of any (non-attribute-related) struct type defined in this package.
//	If your custom handler does get called at all for a given struct instance, then it always gets called twice, first with the 'enter' bool argument set to true, then (after having Walk()ed all subordinate struct instances, if any) once again with it set to false.
type XsdGoPkgWalkHandlers struct {
	XsdGoPkgHasElem_IDallXRefTypeschema_Id_XsdtString_                                                                                                                                                                                                                                                                                                                                                                                func(*XsdGoPkgHasElem_IDallXRefTypeschema_Id_XsdtString_, bool) error
	TxsdLinkTypeChoiceUrlLink                                                                                                                                                                                                                                                                                                                                                                                                         func(*TxsdLinkTypeChoiceUrlLink, bool) error
	XsdGoPkgHasElems_RUNsequenceTxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceRunLabelsRUNLABELSsequenceTxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentREFERENCEALIGNMENTchoiceTxsdAnalysisTypeSequenceAnalysisTypeANALYSISTYPEsequenceAnalysisTypeschema_Run_TxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceRunLabelsSequenceRun_                                            func(*XsdGoPkgHasElems_RUNsequenceTxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceRunLabelsRUNLABELSsequenceTxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentREFERENCEALIGNMENTchoiceTxsdAnalysisTypeSequenceAnalysisTypeANALYSISTYPEsequenceAnalysisTypeschema_Run_TxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceRunLabelsSequenceRun_, bool) error
	XsdGoPkgHasElem_CompleteGENOMICSchoicePlatformTypeschema_CompleteGenomics_TxsdPlatformTypeChoiceCompleteGenomics_                                                                                                                                                                                                                                                                                                                 func(*XsdGoPkgHasElem_CompleteGENOMICSchoicePlatformTypeschema_CompleteGenomics_TxsdPlatformTypeChoiceCompleteGenomics_, bool) error
	XsdGoPkgHasElem_IDchoicesequenceENTREZLINKchoiceLinkTypeschema_Id_XsdtNonNegativeInteger_                                                                                                                                                                                                                                                                                                                                         func(*XsdGoPkgHasElem_IDchoicesequenceENTREZLINKchoiceLinkTypeschema_Id_XsdtNonNegativeInteger_, bool) error
	TxsdLinkTypeChoiceEntrezLink                                                                                                                                                                                                                                                                                                                                                                                                      func(*TxsdLinkTypeChoiceEntrezLink, bool) error
	XsdGoPkgHasElems_AnalysisATTRIBUTEsequenceTxsdAnalysisTypeSequenceAnalysisAttributesANALYSISATTRIBUTESsequenceAnalysisTypeschema_AnalysisAttribute_TAttributeType_                                                                                                                                                                                                                                                                func(*XsdGoPkgHasElems_AnalysisATTRIBUTEsequenceTxsdAnalysisTypeSequenceAnalysisAttributesANALYSISATTRIBUTESsequenceAnalysisTypeschema_AnalysisAttribute_TAttributeType_, bool) error
	XsdGoPkgHasElems_Ls454ChoicePlatformTypeschema_Ls454_TxsdPlatformTypeChoiceLs454_                                                                                                                                                                                                                                                                                                                                                 func(*XsdGoPkgHasElems_Ls454ChoicePlatformTypeschema_Ls454_TxsdPlatformTypeChoiceLs454_, bool) error
	TxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceRunLabelsSequenceRun                                                                                                                                                                                                                                                                                                                                          func(*TxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceRunLabelsSequenceRun, bool) error
	XsdGoPkgHasElems_AlignmentMarksDuplicateReadsallAlignmentDirectivesTypeschema_AlignmentMarksDuplicateReads_XsdtBoolean_                                                                                                                                                                                                                                                                                                           func(*XsdGoPkgHasElems_AlignmentMarksDuplicateReadsallAlignmentDirectivesTypeschema_AlignmentMarksDuplicateReads_XsdtBoolean_, bool) error
	XsdGoPkgHasElem_ReadSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_ReadSpec_TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpec_                                                                                                                                                                                                                                                                                 func(*XsdGoPkgHasElem_ReadSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_ReadSpec_TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpec_, bool) error
	XsdGoPkgHasElems_EntrezLINKchoiceLinkTypeschema_EntrezLink_TxsdLinkTypeChoiceEntrezLink_                                                                                                                                                                                                                                                                                                                                          func(*XsdGoPkgHasElems_EntrezLINKchoiceLinkTypeschema_EntrezLink_TxsdLinkTypeChoiceEntrezLink_, bool) error
	TAnalysisType                                                                                                                                                                                                                                                                                                                                                                                                                     func(*TAnalysisType, bool) error
	XsdGoPkgHasElems_PROCESSINGsequenceABUNDANCEMEASUREMENTchoiceANALYSISTYPEsequenceAnalysisTypeschema_Processing_TDefaultProcessingType_                                                                                                                                                                                                                                                                                            func(*XsdGoPkgHasElems_PROCESSINGsequenceABUNDANCEMEASUREMENTchoiceANALYSISTYPEsequenceAnalysisTypeschema_Processing_TDefaultProcessingType_, bool) error
	XsdGoPkgHasElems_NOTESsequencePIPESECTIONsequencePipelineTypeschema_Notes_XsdtString_                                                                                                                                                                                                                                                                                                                                             func(*XsdGoPkgHasElems_NOTESsequencePIPESECTIONsequencePipelineTypeschema_Notes_XsdtString_, bool) error
	XsdGoPkgHasElem_StepINDEXsequencePIPESECTIONsequencePipelineTypeschema_StepIndex_XsdtString_                                                                                                                                                                                                                                                                                                                                      func(*XsdGoPkgHasElem_StepINDEXsequencePIPESECTIONsequencePipelineTypeschema_StepIndex_XsdtString_, bool) error
	XsdGoPkgHasElem_PIPELINEallDefaultProcessingTypeschema_Pipeline_TPipelineType_                                                                                                                                                                                                                                                                                                                                                    func(*XsdGoPkgHasElem_PIPELINEallDefaultProcessingTypeschema_Pipeline_TPipelineType_, bool) error
	XsdGoPkgHasElem_URLallURLLINKchoiceLinkTypeschema_Url_XsdtAnyURI_                                                                                                                                                                                                                                                                                                                                                                 func(*XsdGoPkgHasElem_URLallURLLINKchoiceLinkTypeschema_Url_XsdtAnyURI_, bool) error
	XsdGoPkgHasElem_InstrumentMODELsequenceOXFORDNANOPOREchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceOxfordNanoporeSequenceInstrumentModel_                                                                                                                                                                                                                                                                        func(*XsdGoPkgHasElem_InstrumentMODELsequenceOXFORDNANOPOREchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceOxfordNanoporeSequenceInstrumentModel_, bool) error
	TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceChoiceExpectedBasecallTableSequenceBasecall                                                                                                                                                                                                                                                                                                                     func(*TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceChoiceExpectedBasecallTableSequenceBasecall, bool) error
	XsdGoPkgHasElem_AnalysisATTRIBUTEsequenceANALYSISATTRIBUTESsequenceAnalysisTypeschema_AnalysisAttribute_TAttributeType_                                                                                                                                                                                                                                                                                                           func(*XsdGoPkgHasElem_AnalysisATTRIBUTEsequenceANALYSISATTRIBUTESsequenceAnalysisTypeschema_AnalysisAttribute_TAttributeType_, bool) error
	TIdentifierType                                                                                                                                                                                                                                                                                                                                                                                                                   func(*TIdentifierType, bool) error
	XsdGoPkgHasElems_AnalysisLINKSsequenceAnalysisTypeschema_AnalysisLinks_TxsdAnalysisTypeSequenceAnalysisLinks_                                                                                                                                                                                                                                                                                                                     func(*XsdGoPkgHasElems_AnalysisLINKSsequenceAnalysisTypeschema_AnalysisLinks_TxsdAnalysisTypeSequenceAnalysisLinks_, bool) error
	XsdGoPkgHasElems_ReferenceSOURCEsequenceTxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceAssemblyChoiceCustomCUSTOMchoiceTxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceAssemblyASSEMBLYsequenceTxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentREFERENCEALIGNMENTchoiceTxsdAnalysisTypeSequenceAnalysisTypeANALYSISTYPEsequenceAnalysisTypeschema_ReferenceSource_TLinkType_ func(*XsdGoPkgHasElems_ReferenceSOURCEsequenceTxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceAssemblyChoiceCustomCUSTOMchoiceTxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceAssemblyASSEMBLYsequenceTxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentREFERENCEALIGNMENTchoiceTxsdAnalysisTypeSequenceAnalysisTypeANALYSISTYPEsequenceAnalysisTypeschema_ReferenceSource_TLinkType_, bool) error
	XsdGoPkgHasElem_ReferenceSOURCEsequenceCUSTOMchoiceASSEMBLYsequenceREFERENCEALIGNMENTchoiceANALYSISTYPEsequenceAnalysisTypeschema_ReferenceSource_TLinkType_                                                                                                                                                                                                                                                                      func(*XsdGoPkgHasElem_ReferenceSOURCEsequenceCUSTOMchoiceASSEMBLYsequenceREFERENCEALIGNMENTchoiceANALYSISTYPEsequenceAnalysisTypeschema_ReferenceSource_TLinkType_, bool) error
	TPlatformType                                                                                                                                                                                                                                                                                                                                                                                                                     func(*TPlatformType, bool) error
	XsdGoPkgHasElem_DataBLOCKsequencesequenceAnalysisTypeschema_DataBlock_TxsdAnalysisTypeSequenceSequenceDataBlock_                                                                                                                                                                                                                                                                                                                  func(*XsdGoPkgHasElem_DataBLOCKsequencesequenceAnalysisTypeschema_DataBlock_TxsdAnalysisTypeSequenceSequenceDataBlock_, bool) error
	XsdGoPkgHasElems_IonTORRENTchoicePlatformTypeschema_IonTorrent_TxsdPlatformTypeChoiceIonTorrent_                                                                                                                                                                                                                                                                                                                                  func(*XsdGoPkgHasElems_IonTORRENTchoicePlatformTypeschema_IonTorrent_TxsdPlatformTypeChoiceIonTorrent_, bool) error
	TxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceAssemblyChoiceStandard                                                                                                                                                                                                                                                                                                                                        func(*TxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceAssemblyChoiceStandard, bool) error
	XsdGoPkgHasElem_RUNsequenceTxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceRunLabelsRUNLABELSsequenceTxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentREFERENCEALIGNMENTchoiceTxsdAnalysisTypeSequenceAnalysisTypeANALYSISTYPEsequenceAnalysisTypeschema_Run_TxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceRunLabelsSequenceRun_                                             func(*XsdGoPkgHasElem_RUNsequenceTxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceRunLabelsRUNLABELSsequenceTxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentREFERENCEALIGNMENTchoiceTxsdAnalysisTypeSequenceAnalysisTypeANALYSISTYPEsequenceAnalysisTypeschema_Run_TxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceRunLabelsSequenceRun_, bool) error
	XsdGoPkgHasElems_InstrumentMODELsequenceCAPILLARYchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceCapillarySequenceInstrumentModel_                                                                                                                                                                                                                                                                                 func(*XsdGoPkgHasElems_InstrumentMODELsequenceCAPILLARYchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceCapillarySequenceInstrumentModel_, bool) error
	XsdGoPkgHasElems_UrlLINKchoiceLinkTypeschema_UrlLink_TxsdLinkTypeChoiceUrlLink_                                                                                                                                                                                                                                                                                                                                                   func(*XsdGoPkgHasElems_UrlLINKchoiceLinkTypeschema_UrlLink_TxsdLinkTypeChoiceUrlLink_, bool) error
	XsdGoPkgHasElems_DIRECTIVESallAlignmentProcessingTypeschema_Directives_TAlignmentDirectivesType_                                                                                                                                                                                                                                                                                                                                  func(*XsdGoPkgHasElems_DIRECTIVESallAlignmentProcessingTypeschema_Directives_TAlignmentDirectivesType_, bool) error
	XsdGoPkgHasElem_ASSEMBLYsequenceTxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentREFERENCEALIGNMENTchoiceTxsdAnalysisTypeSequenceAnalysisTypeANALYSISTYPEsequenceAnalysisTypeschema_Assembly_TxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceAssembly_                                                                                                                                             func(*XsdGoPkgHasElem_ASSEMBLYsequenceTxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentREFERENCEALIGNMENTchoiceTxsdAnalysisTypeSequenceAnalysisTypeANALYSISTYPEsequenceAnalysisTypeschema_Assembly_TxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceAssembly_, bool) error
	XsdGoPkgHasElem_DIRECTIVESallAlignmentProcessingTypeschema_Directives_TAlignmentDirectivesType_                                                                                                                                                                                                                                                                                                                                   func(*XsdGoPkgHasElem_DIRECTIVESallAlignmentProcessingTypeschema_Directives_TAlignmentDirectivesType_, bool) error
	XsdGoPkgHasElems_ReferenceALIGNMENTchoiceTxsdAnalysisTypeSequenceAnalysisTypeANALYSISTYPEsequenceAnalysisTypeschema_ReferenceAlignment_TxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignment_                                                                                                                                                                                                                              func(*XsdGoPkgHasElems_ReferenceALIGNMENTchoiceTxsdAnalysisTypeSequenceAnalysisTypeANALYSISTYPEsequenceAnalysisTypeschema_ReferenceAlignment_TxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignment_, bool) error
	XsdGoPkgHasElem_TARGETsequenceTARGETSsequenceAnalysisTypeschema_Target_TSraLinkType_                                                                                                                                                                                                                                                                                                                                              func(*XsdGoPkgHasElem_TARGETsequenceTARGETSsequenceAnalysisTypeschema_Target_TSraLinkType_, bool) error
	XsdGoPkgHasElems_StepINDEXsequencePIPESECTIONsequencePipelineTypeschema_StepIndex_XsdtString_                                                                                                                                                                                                                                                                                                                                     func(*XsdGoPkgHasElems_StepINDEXsequencePIPESECTIONsequencePipelineTypeschema_StepIndex_XsdtString_, bool) error
	XsdGoPkgHasElems_QUERYchoicesequenceENTREZLINKchoiceLinkTypeschema_Query_XsdtString_                                                                                                                                                                                                                                                                                                                                              func(*XsdGoPkgHasElems_QUERYchoicesequenceENTREZLINKchoiceLinkTypeschema_Query_XsdtString_, bool) error
	XsdGoPkgHasElem_UrlLINKchoiceLinkTypeschema_UrlLink_TxsdLinkTypeChoiceUrlLink_                                                                                                                                                                                                                                                                                                                                                    func(*XsdGoPkgHasElem_UrlLINKchoiceLinkTypeschema_UrlLink_TxsdLinkTypeChoiceUrlLink_, bool) error
	XsdGoPkgHasElem_ReadCLASSsequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_ReadClass_TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceReadClass_                                                                                                                                                                                                                                              func(*XsdGoPkgHasElem_ReadCLASSsequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_ReadClass_TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceReadClass_, bool) error
	TxsdPlatformTypeChoicePacbioSmrt                                                                                                                                                                                                                                                                                                                                                                                                  func(*TxsdPlatformTypeChoicePacbioSmrt, bool) error
	XsdGoPkgHasElems_DBallXRefTypeschema_Db_XsdtString_                                                                                                                                                                                                                                                                                                                                                                               func(*XsdGoPkgHasElems_DBallXRefTypeschema_Db_XsdtString_, bool) error
	TQualifiedNameType                                                                                                                                                                                                                                                                                                                                                                                                                func(*TQualifiedNameType, bool) error
	XsdGoPkgHasElem_IDENTIFIERSsequenceAnalysisTypeschema_Identifiers_TIdentifierType_                                                                                                                                                                                                                                                                                                                                                func(*XsdGoPkgHasElem_IDENTIFIERSsequenceAnalysisTypeschema_Identifiers_TIdentifierType_, bool) error
	XsdGoPkgHasElem_XrefLINKchoiceLinkTypeschema_XrefLink_TXRefType_                                                                                                                                                                                                                                                                                                                                                                  func(*XsdGoPkgHasElem_XrefLINKchoiceLinkTypeschema_XrefLink_TXRefType_, bool) error
	XsdGoPkgHasElems_ReadCLASSsequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_ReadClass_TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceReadClass_                                                                                                                                                                                                                                             func(*XsdGoPkgHasElems_ReadCLASSsequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_ReadClass_TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceReadClass_, bool) error
	XsdGoPkgHasElems_CompleteGENOMICSchoicePlatformTypeschema_CompleteGenomics_TxsdPlatformTypeChoiceCompleteGenomics_                                                                                                                                                                                                                                                                                                                func(*XsdGoPkgHasElems_CompleteGENOMICSchoicePlatformTypeschema_CompleteGenomics_TxsdPlatformTypeChoiceCompleteGenomics_, bool) error
	XsdGoPkgHasElems_ILLUMINAchoicePlatformTypeschema_Illumina_TxsdPlatformTypeChoiceIllumina_                                                                                                                                                                                                                                                                                                                                        func(*XsdGoPkgHasElems_ILLUMINAchoicePlatformTypeschema_Illumina_TxsdPlatformTypeChoiceIllumina_, bool) error
	XsdGoPkgHasElem_QUERYchoicesequenceENTREZLINKchoiceLinkTypeschema_Query_XsdtString_                                                                                                                                                                                                                                                                                                                                               func(*XsdGoPkgHasElem_QUERYchoicesequenceENTREZLINKchoiceLinkTypeschema_Query_XsdtString_, bool) error
	XsdGoPkgHasElem_PROCESSINGsequenceTxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentREFERENCEALIGNMENTchoiceTxsdAnalysisTypeSequenceAnalysisTypeANALYSISTYPEsequenceAnalysisTypeschema_Processing_TAlignmentProcessingType_                                                                                                                                                                                             func(*XsdGoPkgHasElem_PROCESSINGsequenceTxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentREFERENCEALIGNMENTchoiceTxsdAnalysisTypeSequenceAnalysisTypeANALYSISTYPEsequenceAnalysisTypeschema_Processing_TAlignmentProcessingType_, bool) error
	XsdGoPkgHasElems_SpotLENGTHsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_SpotLength_XsdtNonNegativeInteger_                                                                                                                                                                                                                                                                                                                func(*XsdGoPkgHasElems_SpotLENGTHsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_SpotLength_XsdtNonNegativeInteger_, bool) error
	TSequencingDirectivesType                                                                                                                                                                                                                                                                                                                                                                                                         func(*TSequencingDirectivesType, bool) error
	XsdGoPkgHasElems_XrefLINKchoiceLinkTypeschema_XrefLink_TXRefType_                                                                                                                                                                                                                                                                                                                                                                 func(*XsdGoPkgHasElems_XrefLINKchoiceLinkTypeschema_XrefLink_TXRefType_, bool) error
	XsdGoPkgHasElems_UNITSallAttributeTypeschema_Units_XsdtString_                                                                                                                                                                                                                                                                                                                                                                    func(*XsdGoPkgHasElems_UNITSallAttributeTypeschema_Units_XsdtString_, bool) error
	TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceChoiceRelativeOrder                                                                                                                                                                                                                                                                                                                                             func(*TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceChoiceRelativeOrder, bool) error
	XsdGoPkgHasElem_DIRECTIVESsequenceProcessingTypeschema_Directives_TSequencingDirectivesType_                                                                                                                                                                                                                                                                                                                                      func(*XsdGoPkgHasElem_DIRECTIVESsequenceProcessingTypeschema_Directives_TSequencingDirectivesType_, bool) error
	TxsdPlatformTypeChoiceAbiSolid                                                                                                                                                                                                                                                                                                                                                                                                    func(*TxsdPlatformTypeChoiceAbiSolid, bool) error
	XsdGoPkgHasElems_TITLEsequenceAnalysisTypeschema_Title_XsdtString_                                                                                                                                                                                                                                                                                                                                                                func(*XsdGoPkgHasElems_TITLEsequenceAnalysisTypeschema_Title_XsdtString_, bool) error
	XsdGoPkgHasElem_VERSIONsequencePIPESECTIONsequencePipelineTypeschema_Version_XsdtString_                                                                                                                                                                                                                                                                                                                                          func(*XsdGoPkgHasElem_VERSIONsequencePIPESECTIONsequencePipelineTypeschema_Version_XsdtString_, bool) error
	TAttributeType                                                                                                                                                                                                                                                                                                                                                                                                                    func(*TAttributeType, bool) error
	XsdGoPkgHasElem_PROGRAMsequencePIPESECTIONsequencePipelineTypeschema_Program_XsdtString_                                                                                                                                                                                                                                                                                                                                          func(*XsdGoPkgHasElem_PROGRAMsequencePIPESECTIONsequencePipelineTypeschema_Program_XsdtString_, bool) error
	XsdGoPkgHasElem_OxfordNANOPOREchoicePlatformTypeschema_OxfordNanopore_TxsdPlatformTypeChoiceOxfordNanopore_                                                                                                                                                                                                                                                                                                                       func(*XsdGoPkgHasElem_OxfordNANOPOREchoicePlatformTypeschema_OxfordNanopore_TxsdPlatformTypeChoiceOxfordNanopore_, bool) error
	XsdGoPkgHasElems_ReadSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_ReadSpec_TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpec_                                                                                                                                                                                                                                                                                func(*XsdGoPkgHasElems_ReadSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_ReadSpec_TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpec_, bool) error
	TxsdPlatformTypeChoiceIllumina                                                                                                                                                                                                                                                                                                                                                                                                    func(*TxsdPlatformTypeChoiceIllumina, bool) error
	XsdGoPkgHasElem_Analysis                                                                                                                                                                                                                                                                                                                                                                                                          func(*XsdGoPkgHasElem_Analysis, bool) error
	XsdGoPkgHasElem_SpotLENGTHsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_SpotLength_XsdtNonNegativeInteger_                                                                                                                                                                                                                                                                                                                 func(*XsdGoPkgHasElem_SpotLENGTHsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_SpotLength_XsdtNonNegativeInteger_, bool) error
	XsdGoPkgHasElem_RunLABELSsequenceTxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentREFERENCEALIGNMENTchoiceTxsdAnalysisTypeSequenceAnalysisTypeANALYSISTYPEsequenceAnalysisTypeschema_RunLabels_TxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceRunLabels_                                                                                                                                          func(*XsdGoPkgHasElem_RunLABELSsequenceTxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentREFERENCEALIGNMENTchoiceTxsdAnalysisTypeSequenceAnalysisTypeANALYSISTYPEsequenceAnalysisTypeschema_RunLabels_TxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceRunLabels_, bool) error
	TDefaultProcessingType                                                                                                                                                                                                                                                                                                                                                                                                            func(*TDefaultProcessingType, bool) error
	TxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignment                                                                                                                                                                                                                                                                                                                                                                      func(*TxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignment, bool) error
	XsdGoPkgHasElem_AnalysisATTRIBUTESsequenceAnalysisTypeschema_AnalysisAttributes_TxsdAnalysisTypeSequenceAnalysisAttributes_                                                                                                                                                                                                                                                                                                       func(*XsdGoPkgHasElem_AnalysisATTRIBUTESsequenceAnalysisTypeschema_AnalysisAttributes_TxsdAnalysisTypeSequenceAnalysisAttributes_, bool) error
	XsdGoPkgHasElem_PrimaryIDsequenceIdentifierTypeschema_PrimaryId_TNameAndLabelType_                                                                                                                                                                                                                                                                                                                                                func(*XsdGoPkgHasElem_PrimaryIDsequenceIdentifierTypeschema_PrimaryId_TNameAndLabelType_, bool) error
	TxsdAnalysisTypeSequenceAnalysisTypeChoiceSequenceAnnotation                                                                                                                                                                                                                                                                                                                                                                      func(*TxsdAnalysisTypeSequenceAnalysisTypeChoiceSequenceAnnotation, bool) error
	TxsdAnalysisTypeSequenceAnalysisLinks                                                                                                                                                                                                                                                                                                                                                                                             func(*TxsdAnalysisTypeSequenceAnalysisLinks, bool) error
	XsdGoPkgHasElems_InstrumentMODELsequenceABISOLIDchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceAbiSolidSequenceInstrumentModel_                                                                                                                                                                                                                                                                                   func(*XsdGoPkgHasElems_InstrumentMODELsequenceABISOLIDchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceAbiSolidSequenceInstrumentModel_, bool) error
	TxsdPlatformTypeChoiceLs454                                                                                                                                                                                                                                                                                                                                                                                                       func(*TxsdPlatformTypeChoiceLs454, bool) error
	TxsdPlatformTypeChoiceCompleteGenomics                                                                                                                                                                                                                                                                                                                                                                                            func(*TxsdPlatformTypeChoiceCompleteGenomics, bool) error
	XsdGoPkgHasElem_IonTORRENTchoicePlatformTypeschema_IonTorrent_TxsdPlatformTypeChoiceIonTorrent_                                                                                                                                                                                                                                                                                                                                   func(*XsdGoPkgHasElem_IonTORRENTchoicePlatformTypeschema_IonTorrent_TxsdPlatformTypeChoiceIonTorrent_, bool) error
	XsdGoPkgHasElems_PrimaryIDsequenceIdentifierTypeschema_PrimaryId_TNameAndLabelType_                                                                                                                                                                                                                                                                                                                                               func(*XsdGoPkgHasElems_PrimaryIDsequenceIdentifierTypeschema_PrimaryId_TNameAndLabelType_, bool) error
	XsdGoPkgHasElem_AbundanceMEASUREMENTchoiceTxsdAnalysisTypeSequenceAnalysisTypeANALYSISTYPEsequenceAnalysisTypeschema_AbundanceMeasurement_TxsdAnalysisTypeSequenceAnalysisTypeChoiceAbundanceMeasurement_                                                                                                                                                                                                                         func(*XsdGoPkgHasElem_AbundanceMEASUREMENTchoiceTxsdAnalysisTypeSequenceAnalysisTypeANALYSISTYPEsequenceAnalysisTypeschema_AbundanceMeasurement_TxsdAnalysisTypeSequenceAnalysisTypeChoiceAbundanceMeasurement_, bool) error
	XsdGoPkgHasElems_DataBLOCKsequencesequenceAnalysisTypeschema_DataBlock_TxsdAnalysisTypeSequenceSequenceDataBlock_                                                                                                                                                                                                                                                                                                                 func(*XsdGoPkgHasElems_DataBLOCKsequencesequenceAnalysisTypeschema_DataBlock_TxsdAnalysisTypeSequenceSequenceDataBlock_, bool) error
	XsdGoPkgHasElems_FILESallTxsdAnalysisTypeSequenceSequenceDataBlockDATABLOCKsequencesequenceAnalysisTypeschema_Files_TxsdAnalysisTypeSequenceSequenceDataBlockAllFiles_                                                                                                                                                                                                                                                            func(*XsdGoPkgHasElems_FILESallTxsdAnalysisTypeSequenceSequenceDataBlockDATABLOCKsequencesequenceAnalysisTypeschema_Files_TxsdAnalysisTypeSequenceSequenceDataBlockAllFiles_, bool) error
	XsdGoPkgHasElems_ReadLABELsequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_ReadLabel_XsdtString_                                                                                                                                                                                                                                                                                                              func(*XsdGoPkgHasElems_ReadLABELsequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_ReadLabel_XsdtString_, bool) error
	TxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceAssemblyChoiceCustom                                                                                                                                                                                                                                                                                                                                          func(*TxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceAssemblyChoiceCustom, bool) error
	TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpec                                                                                                                                                                                                                                                                                                                                                                        func(*TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpec, bool) error
	XsdGoPkgHasElem_InstrumentMODELallLS454ChoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceLs454AllInstrumentModel_                                                                                                                                                                                                                                                                                                    func(*XsdGoPkgHasElem_InstrumentMODELallLS454ChoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceLs454AllInstrumentModel_, bool) error
	XsdGoPkgHasElems_TAGallAttributeTypeschema_Tag_XsdtString_                                                                                                                                                                                                                                                                                                                                                                        func(*XsdGoPkgHasElems_TAGallAttributeTypeschema_Tag_XsdtString_, bool) error
	XsdGoPkgHasElems_DeNovoASSEMBLYchoiceTxsdAnalysisTypeSequenceAnalysisTypeANALYSISTYPEsequenceAnalysisTypeschema_DeNovoAssembly_TxsdAnalysisTypeSequenceAnalysisTypeChoiceDeNovoAssembly_                                                                                                                                                                                                                                          func(*XsdGoPkgHasElems_DeNovoASSEMBLYchoiceTxsdAnalysisTypeSequenceAnalysisTypeANALYSISTYPEsequenceAnalysisTypeschema_DeNovoAssembly_TxsdAnalysisTypeSequenceAnalysisTypeChoiceDeNovoAssembly_, bool) error
	TSpotDescriptorType                                                                                                                                                                                                                                                                                                                                                                                                               func(*TSpotDescriptorType, bool) error
	TxsdAnalysisTypeSequenceAnalysisTypeChoiceDeNovoAssembly                                                                                                                                                                                                                                                                                                                                                                          func(*TxsdAnalysisTypeSequenceAnalysisTypeChoiceDeNovoAssembly, bool) error
	TxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceSeqLabels                                                                                                                                                                                                                                                                                                                                                     func(*TxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceSeqLabels, bool) error
	XsdGoPkgHasElems_ExpectedBasecallTABLEchoicesequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_ExpectedBasecallTable_TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceChoiceExpectedBasecallTable_                                                                                                                                                                                             func(*XsdGoPkgHasElems_ExpectedBasecallTABLEchoicesequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_ExpectedBasecallTable_TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceChoiceExpectedBasecallTable_, bool) error
	XsdGoPkgHasElems_CAPILLARYchoicePlatformTypeschema_Capillary_TxsdPlatformTypeChoiceCapillary_                                                                                                                                                                                                                                                                                                                                     func(*XsdGoPkgHasElems_CAPILLARYchoicePlatformTypeschema_Capillary_TxsdPlatformTypeChoiceCapillary_, bool) error
	XsdGoPkgHasElem_HELICOSchoicePlatformTypeschema_Helicos_TxsdPlatformTypeChoiceHelicos_                                                                                                                                                                                                                                                                                                                                            func(*XsdGoPkgHasElem_HELICOSchoicePlatformTypeschema_Helicos_TxsdPlatformTypeChoiceHelicos_, bool) error
	XsdGoPkgHasElems_ASSEMBLYsequenceTxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentREFERENCEALIGNMENTchoiceTxsdAnalysisTypeSequenceAnalysisTypeANALYSISTYPEsequenceAnalysisTypeschema_Assembly_TxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceAssembly_                                                                                                                                            func(*XsdGoPkgHasElems_ASSEMBLYsequenceTxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentREFERENCEALIGNMENTchoiceTxsdAnalysisTypeSequenceAnalysisTypeANALYSISTYPEsequenceAnalysisTypeschema_Assembly_TxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceAssembly_, bool) error
	XsdGoPkgHasElem_STANDARDchoiceTxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceAssemblyASSEMBLYsequenceTxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentREFERENCEALIGNMENTchoiceTxsdAnalysisTypeSequenceAnalysisTypeANALYSISTYPEsequenceAnalysisTypeschema_Standard_TxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceAssemblyChoiceStandard_                                     func(*XsdGoPkgHasElem_STANDARDchoiceTxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceAssemblyASSEMBLYsequenceTxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentREFERENCEALIGNMENTchoiceTxsdAnalysisTypeSequenceAnalysisTypeANALYSISTYPEsequenceAnalysisTypeschema_Standard_TxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceAssemblyChoiceStandard_, bool) error
	XsdGoPkgHasElems_InstrumentMODELsequencePACBIOSMRTchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoicePacbioSmrtSequenceInstrumentModel_                                                                                                                                                                                                                                                                               func(*XsdGoPkgHasElems_InstrumentMODELsequencePACBIOSMRTchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoicePacbioSmrtSequenceInstrumentModel_, bool) error
	XsdGoPkgHasElems_CUSTOMchoiceASSEMBLYsequenceREFERENCEALIGNMENTchoiceANALYSISTYPEsequenceAnalysisTypeschema_Custom_TxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceAssemblyChoiceCustom_                                                                                                                                                                                                                      func(*XsdGoPkgHasElems_CUSTOMchoiceASSEMBLYsequenceREFERENCEALIGNMENTchoiceANALYSISTYPEsequenceAnalysisTypeschema_Custom_TxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceAssemblyChoiceCustom_, bool) error
	XsdGoPkgHasElem_LABELallXRefTypeschema_Label_XsdtString_                                                                                                                                                                                                                                                                                                                                                                          func(*XsdGoPkgHasElem_LABELallXRefTypeschema_Label_XsdtString_, bool) error
	XsdGoPkgHasElem_SampleDemuxDIRECTIVEallSequencingDirectivesTypeschema_SampleDemuxDirective_TxsdSequencingDirectivesTypeAllSampleDemuxDirective_                                                                                                                                                                                                                                                                                   func(*XsdGoPkgHasElem_SampleDemuxDIRECTIVEallSequencingDirectivesTypeschema_SampleDemuxDirective_TxsdSequencingDirectivesTypeAllSampleDemuxDirective_, bool) error
	XsdGoPkgHasElems_PipeSECTIONsequencePipelineTypeschema_PipeSection_TxsdPipelineTypeSequencePipeSection_                                                                                                                                                                                                                                                                                                                           func(*XsdGoPkgHasElems_PipeSECTIONsequencePipelineTypeschema_PipeSection_TxsdPipelineTypeSequencePipeSection_, bool) error
	TxsdAnalysisTypeSequenceStudyRef                                                                                                                                                                                                                                                                                                                                                                                                  func(*TxsdAnalysisTypeSequenceStudyRef, bool) error
	XsdGoPkgHasElems_IDallXRefTypeschema_Id_XsdtString_                                                                                                                                                                                                                                                                                                                                                                               func(*XsdGoPkgHasElems_IDallXRefTypeschema_Id_XsdtString_, bool) error
	XsdGoPkgHasElems_LABELallURLLINKchoiceLinkTypeschema_Label_XsdtString_                                                                                                                                                                                                                                                                                                                                                            func(*XsdGoPkgHasElems_LABELallURLLINKchoiceLinkTypeschema_Label_XsdtString_, bool) error
	XsdGoPkgHasElems_InstrumentMODELsequenceOXFORDNANOPOREchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceOxfordNanoporeSequenceInstrumentModel_                                                                                                                                                                                                                                                                       func(*XsdGoPkgHasElems_InstrumentMODELsequenceOXFORDNANOPOREchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceOxfordNanoporeSequenceInstrumentModel_, bool) error
	XsdGoPkgHasElem_DESCRIPTIONsequenceTxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceAssemblyChoiceCustomCUSTOMchoiceTxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceAssemblyASSEMBLYsequenceTxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentREFERENCEALIGNMENTchoiceTxsdAnalysisTypeSequenceAnalysisTypeANALYSISTYPEsequenceAnalysisTypeschema_Description_XsdtString_         func(*XsdGoPkgHasElem_DESCRIPTIONsequenceTxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceAssemblyChoiceCustomCUSTOMchoiceTxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceAssemblyASSEMBLYsequenceTxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentREFERENCEALIGNMENTchoiceTxsdAnalysisTypeSequenceAnalysisTypeANALYSISTYPEsequenceAnalysisTypeschema_Description_XsdtString_, bool) error
	TxsdAnalysisTypeSequenceAnalysisType                                                                                                                                                                                                                                                                                                                                                                                              func(*TxsdAnalysisTypeSequenceAnalysisType, bool) error
	XsdGoPkgHasElems_AbundanceMEASUREMENTchoiceANALYSISTYPEsequenceAnalysisTypeschema_AbundanceMeasurement_TxsdAnalysisTypeSequenceAnalysisTypeChoiceAbundanceMeasurement_                                                                                                                                                                                                                                                            func(*XsdGoPkgHasElems_AbundanceMEASUREMENTchoiceANALYSISTYPEsequenceAnalysisTypeschema_AbundanceMeasurement_TxsdAnalysisTypeSequenceAnalysisTypeChoiceAbundanceMeasurement_, bool) error
	XsdGoPkgHasElems_AlignmentIncludesFailedReadsallAlignmentDirectivesTypeschema_AlignmentIncludesFailedReads_XsdtBoolean_                                                                                                                                                                                                                                                                                                           func(*XsdGoPkgHasElems_AlignmentIncludesFailedReadsallAlignmentDirectivesTypeschema_AlignmentIncludesFailedReads_XsdtBoolean_, bool) error
	XsdGoPkgHasElems_PROGRAMsequencePIPESECTIONsequencePipelineTypeschema_Program_XsdtString_                                                                                                                                                                                                                                                                                                                                         func(*XsdGoPkgHasElems_PROGRAMsequencePIPESECTIONsequencePipelineTypeschema_Program_XsdtString_, bool) error
	XsdGoPkgHasElem_SeqLABELSsequenceTxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentREFERENCEALIGNMENTchoiceTxsdAnalysisTypeSequenceAnalysisTypeANALYSISTYPEsequenceAnalysisTypeschema_SeqLabels_TxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceSeqLabels_                                                                                                                                          func(*XsdGoPkgHasElem_SeqLABELSsequenceTxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentREFERENCEALIGNMENTchoiceTxsdAnalysisTypeSequenceAnalysisTypeANALYSISTYPEsequenceAnalysisTypeschema_SeqLabels_TxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceSeqLabels_, bool) error
	XsdGoPkgHasElem_TARGETSsequenceAnalysisTypeschema_Targets_TxsdAnalysisTypeSequenceTargets_                                                                                                                                                                                                                                                                                                                                        func(*XsdGoPkgHasElem_TARGETSsequenceAnalysisTypeschema_Targets_TxsdAnalysisTypeSequenceTargets_, bool) error
	TxsdPlatformTypeChoiceIonTorrent                                                                                                                                                                                                                                                                                                                                                                                                  func(*TxsdPlatformTypeChoiceIonTorrent, bool) error
	XsdGoPkgHasElem_PacbioSMRTchoicePlatformTypeschema_PacbioSmrt_TxsdPlatformTypeChoicePacbioSmrt_                                                                                                                                                                                                                                                                                                                                   func(*XsdGoPkgHasElem_PacbioSMRTchoicePlatformTypeschema_PacbioSmrt_TxsdPlatformTypeChoicePacbioSmrt_, bool) error
	XsdGoPkgHasElems_TARGETSsequenceAnalysisTypeschema_Targets_TxsdAnalysisTypeSequenceTargets_                                                                                                                                                                                                                                                                                                                                       func(*XsdGoPkgHasElems_TARGETSsequenceAnalysisTypeschema_Targets_TxsdAnalysisTypeSequenceTargets_, bool) error
	XsdGoPkgHasElems_VERSIONsequencePIPESECTIONsequencePipelineTypeschema_Version_XsdtString_                                                                                                                                                                                                                                                                                                                                         func(*XsdGoPkgHasElems_VERSIONsequencePIPESECTIONsequencePipelineTypeschema_Version_XsdtString_, bool) error
	XsdGoPkgHasElem_PrevStepINDEXsequencePIPESECTIONsequencePipelineTypeschema_PrevStepIndex_XsdtString_                                                                                                                                                                                                                                                                                                                              func(*XsdGoPkgHasElem_PrevStepINDEXsequencePIPESECTIONsequencePipelineTypeschema_PrevStepIndex_XsdtString_, bool) error
	XsdGoPkgHasElem_SubmitterIDsequenceIdentifierTypeschema_SubmitterId_TQualifiedNameType_                                                                                                                                                                                                                                                                                                                                           func(*XsdGoPkgHasElem_SubmitterIDsequenceIdentifierTypeschema_SubmitterId_TQualifiedNameType_, bool) error
	XsdGoPkgHasElems_RelativeORDERchoicesequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_RelativeOrder_TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceChoiceRelativeOrder_                                                                                                                                                                                                                     func(*XsdGoPkgHasElems_RelativeORDERchoicesequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_RelativeOrder_TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceChoiceRelativeOrder_, bool) error
	XsdGoPkgHasElem_AnalysisLINKSsequenceAnalysisTypeschema_AnalysisLinks_TxsdAnalysisTypeSequenceAnalysisLinks_                                                                                                                                                                                                                                                                                                                      func(*XsdGoPkgHasElem_AnalysisLINKSsequenceAnalysisTypeschema_AnalysisLinks_TxsdAnalysisTypeSequenceAnalysisLinks_, bool) error
	TAnalysisFileType                                                                                                                                                                                                                                                                                                                                                                                                                 func(*TAnalysisFileType, bool) error
	TxsdAnalysisTypeSequenceSequenceDataBlockAllFiles                                                                                                                                                                                                                                                                                                                                                                                 func(*TxsdAnalysisTypeSequenceSequenceDataBlockAllFiles, bool) error
	TxsdSpotDescriptorTypeChoiceSpotDecodeSpec                                                                                                                                                                                                                                                                                                                                                                                        func(*TxsdSpotDescriptorTypeChoiceSpotDecodeSpec, bool) error
	XsdGoPkgHasElems_AnalysisATTRIBUTESsequenceAnalysisTypeschema_AnalysisAttributes_TxsdAnalysisTypeSequenceAnalysisAttributes_                                                                                                                                                                                                                                                                                                      func(*XsdGoPkgHasElems_AnalysisATTRIBUTESsequenceAnalysisTypeschema_AnalysisAttributes_TxsdAnalysisTypeSequenceAnalysisAttributes_, bool) error
	XsdGoPkgHasElem_SpotDecodeSPECchoiceSpotDescriptorTypeschema_SpotDecodeSpec_TxsdSpotDescriptorTypeChoiceSpotDecodeSpec_                                                                                                                                                                                                                                                                                                           func(*XsdGoPkgHasElem_SpotDecodeSPECchoiceSpotDescriptorTypeschema_SpotDecodeSpec_TxsdSpotDescriptorTypeChoiceSpotDecodeSpec_, bool) error
	XsdGoPkgHasElems_OxfordNANOPOREchoicePlatformTypeschema_OxfordNanopore_TxsdPlatformTypeChoiceOxfordNanopore_                                                                                                                                                                                                                                                                                                                      func(*XsdGoPkgHasElems_OxfordNANOPOREchoicePlatformTypeschema_OxfordNanopore_TxsdPlatformTypeChoiceOxfordNanopore_, bool) error
	XsdGoPkgHasElems_ExternalIDsequenceIdentifierTypeschema_ExternalId_TQualifiedNameType_                                                                                                                                                                                                                                                                                                                                            func(*XsdGoPkgHasElems_ExternalIDsequenceIdentifierTypeschema_ExternalId_TQualifiedNameType_, bool) error
	XsdGoPkgHasElem_DBallXRefTypeschema_Db_XsdtString_                                                                                                                                                                                                                                                                                                                                                                                func(*XsdGoPkgHasElem_DBallXRefTypeschema_Db_XsdtString_, bool) error
	XsdGoPkgHasElem_VALUEallAttributeTypeschema_Value_XsdtString_                                                                                                                                                                                                                                                                                                                                                                     func(*XsdGoPkgHasElem_VALUEallAttributeTypeschema_Value_XsdtString_, bool) error
	XsdGoPkgHasElem_Ls454ChoicePlatformTypeschema_Ls454_TxsdPlatformTypeChoiceLs454_                                                                                                                                                                                                                                                                                                                                                  func(*XsdGoPkgHasElem_Ls454ChoicePlatformTypeschema_Ls454_TxsdPlatformTypeChoiceLs454_, bool) error
	XsdGoPkgHasElem_InstrumentMODELsequenceCAPILLARYchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceCapillarySequenceInstrumentModel_                                                                                                                                                                                                                                                                                  func(*XsdGoPkgHasElem_InstrumentMODELsequenceCAPILLARYchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceCapillarySequenceInstrumentModel_, bool) error
	XsdGoPkgHasElems_PacbioSMRTchoicePlatformTypeschema_PacbioSmrt_TxsdPlatformTypeChoicePacbioSmrt_                                                                                                                                                                                                                                                                                                                                  func(*XsdGoPkgHasElems_PacbioSMRTchoicePlatformTypeschema_PacbioSmrt_TxsdPlatformTypeChoicePacbioSmrt_, bool) error
	XsdGoPkgHasElem_DeNovoASSEMBLYchoiceTxsdAnalysisTypeSequenceAnalysisTypeANALYSISTYPEsequenceAnalysisTypeschema_DeNovoAssembly_TxsdAnalysisTypeSequenceAnalysisTypeChoiceDeNovoAssembly_                                                                                                                                                                                                                                           func(*XsdGoPkgHasElem_DeNovoASSEMBLYchoiceTxsdAnalysisTypeSequenceAnalysisTypeANALYSISTYPEsequenceAnalysisTypeschema_DeNovoAssembly_TxsdAnalysisTypeSequenceAnalysisTypeChoiceDeNovoAssembly_, bool) error
	XsdGoPkgHasElems_STANDARDchoiceASSEMBLYsequenceREFERENCEALIGNMENTchoiceANALYSISTYPEsequenceAnalysisTypeschema_Standard_TxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceAssemblyChoiceStandard_                                                                                                                                                                                                                func(*XsdGoPkgHasElems_STANDARDchoiceASSEMBLYsequenceREFERENCEALIGNMENTchoiceANALYSISTYPEsequenceAnalysisTypeschema_Standard_TxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceAssemblyChoiceStandard_, bool) error
	XsdGoPkgHasElems_SecondaryIDsequenceIdentifierTypeschema_SecondaryId_TNameAndLabelType_                                                                                                                                                                                                                                                                                                                                           func(*XsdGoPkgHasElems_SecondaryIDsequenceIdentifierTypeschema_SecondaryId_TNameAndLabelType_, bool) error
	TxsdAnalysisTypeSequenceTargets                                                                                                                                                                                                                                                                                                                                                                                                   func(*TxsdAnalysisTypeSequenceTargets, bool) error
	XsdGoPkgHasElem_UUIDsequenceIdentifierTypeschema_Uuid_TNameAndLabelType_                                                                                                                                                                                                                                                                                                                                                          func(*XsdGoPkgHasElem_UUIDsequenceIdentifierTypeschema_Uuid_TNameAndLabelType_, bool) error
	XsdGoPkgHasElem_ReadINDEXsequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_ReadIndex_XsdtNonNegativeInteger_                                                                                                                                                                                                                                                                                                   func(*XsdGoPkgHasElem_ReadINDEXsequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_ReadIndex_XsdtNonNegativeInteger_, bool) error
	XsdGoPkgHasElem_InstrumentMODELsequenceABISOLIDchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceAbiSolidSequenceInstrumentModel_                                                                                                                                                                                                                                                                                    func(*XsdGoPkgHasElem_InstrumentMODELsequenceABISOLIDchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceAbiSolidSequenceInstrumentModel_, bool) error
	XsdGoPkgHasElems_InstrumentMODELsequenceCOMPLETEGENOMICSchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceCompleteGenomicsSequenceInstrumentModel_                                                                                                                                                                                                                                                                   func(*XsdGoPkgHasElems_InstrumentMODELsequenceCOMPLETEGENOMICSchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceCompleteGenomicsSequenceInstrumentModel_, bool) error
	XsdGoPkgHasElem_PROCESSINGsequenceTxsdAnalysisTypeSequenceAnalysisTypeChoiceDeNovoAssemblyDENovoASSEMBLYchoiceTxsdAnalysisTypeSequenceAnalysisTypeANALYSISTYPEsequenceAnalysisTypeschema_Processing_TDefaultProcessingType_                                                                                                                                                                                                       func(*XsdGoPkgHasElem_PROCESSINGsequenceTxsdAnalysisTypeSequenceAnalysisTypeChoiceDeNovoAssemblyDENovoASSEMBLYchoiceTxsdAnalysisTypeSequenceAnalysisTypeANALYSISTYPEsequenceAnalysisTypeschema_Processing_TDefaultProcessingType_, bool) error
	XsdGoPkgHasElems_SequenceANNOTATIONchoiceTxsdAnalysisTypeSequenceAnalysisTypeANALYSISTYPEsequenceAnalysisTypeschema_SequenceAnnotation_TxsdAnalysisTypeSequenceAnalysisTypeChoiceSequenceAnnotation_                                                                                                                                                                                                                              func(*XsdGoPkgHasElems_SequenceANNOTATIONchoiceTxsdAnalysisTypeSequenceAnalysisTypeANALYSISTYPEsequenceAnalysisTypeschema_SequenceAnnotation_TxsdAnalysisTypeSequenceAnalysisTypeChoiceSequenceAnnotation_, bool) error
	XsdGoPkgHasElems_VALUEallAttributeTypeschema_Value_XsdtString_                                                                                                                                                                                                                                                                                                                                                                    func(*XsdGoPkgHasElems_VALUEallAttributeTypeschema_Value_XsdtString_, bool) error
	XsdGoPkgHasElem_InstrumentMODELallHELICOSchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceHelicosAllInstrumentModel_                                                                                                                                                                                                                                                                                                func(*XsdGoPkgHasElem_InstrumentMODELallHELICOSchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceHelicosAllInstrumentModel_, bool) error
	XsdGoPkgHasElems_InstrumentMODELallHELICOSchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceHelicosAllInstrumentModel_                                                                                                                                                                                                                                                                                               func(*XsdGoPkgHasElems_InstrumentMODELallHELICOSchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceHelicosAllInstrumentModel_, bool) error
	XsdGoPkgHasElems_ANALYSISsequenceAnalysisSetTypeschema_Analysis_TAnalysisType_                                                                                                                                                                                                                                                                                                                                                    func(*XsdGoPkgHasElems_ANALYSISsequenceAnalysisSetTypeschema_Analysis_TAnalysisType_, bool) error
	TxsdPlatformTypeChoiceCapillary                                                                                                                                                                                                                                                                                                                                                                                                   func(*TxsdPlatformTypeChoiceCapillary, bool) error
	XsdGoPkgHasElem_AbiSOLIDchoicePlatformTypeschema_AbiSolid_TxsdPlatformTypeChoiceAbiSolid_                                                                                                                                                                                                                                                                                                                                         func(*XsdGoPkgHasElem_AbiSOLIDchoicePlatformTypeschema_AbiSolid_TxsdPlatformTypeChoiceAbiSolid_, bool) error
	XsdGoPkgHasElem_UNITSallAttributeTypeschema_Units_XsdtString_                                                                                                                                                                                                                                                                                                                                                                     func(*XsdGoPkgHasElem_UNITSallAttributeTypeschema_Units_XsdtString_, bool) error
	XsdGoPkgHasElems_DESCRIPTIONsequenceCUSTOMchoiceASSEMBLYsequenceREFERENCEALIGNMENTchoiceANALYSISTYPEsequenceAnalysisTypeschema_Description_XsdtString_                                                                                                                                                                                                                                                                            func(*XsdGoPkgHasElems_DESCRIPTIONsequenceCUSTOMchoiceASSEMBLYsequenceREFERENCEALIGNMENTchoiceANALYSISTYPEsequenceAnalysisTypeschema_Description_XsdtString_, bool) error
	TxsdAnalysisTypeSequenceAnalysisTypeChoiceAbundanceMeasurement                                                                                                                                                                                                                                                                                                                                                                    func(*TxsdAnalysisTypeSequenceAnalysisTypeChoiceAbundanceMeasurement, bool) error
	XsdGoPkgHasElems_SpotDecodeSPECchoiceSpotDescriptorTypeschema_SpotDecodeSpec_TxsdSpotDescriptorTypeChoiceSpotDecodeSpec_                                                                                                                                                                                                                                                                                                          func(*XsdGoPkgHasElems_SpotDecodeSPECchoiceSpotDescriptorTypeschema_SpotDecodeSpec_TxsdSpotDescriptorTypeChoiceSpotDecodeSpec_, bool) error
	XsdGoPkgHasElem_AlignmentIncludesFailedReadsallAlignmentDirectivesTypeschema_AlignmentIncludesFailedReads_XsdtBoolean_                                                                                                                                                                                                                                                                                                            func(*XsdGoPkgHasElem_AlignmentIncludesFailedReadsallAlignmentDirectivesTypeschema_AlignmentIncludesFailedReads_XsdtBoolean_, bool) error
	XsdGoPkgHasElems_RunLABELSsequenceREFERENCEALIGNMENTchoiceANALYSISTYPEsequenceAnalysisTypeschema_RunLabels_TxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceRunLabels_                                                                                                                                                                                                                                         func(*XsdGoPkgHasElems_RunLABELSsequenceREFERENCEALIGNMENTchoiceANALYSISTYPEsequenceAnalysisTypeschema_RunLabels_TxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceRunLabels_, bool) error
	XsdGoPkgHasElems_AlignmentIncludesUnalignedReadsallAlignmentDirectivesTypeschema_AlignmentIncludesUnalignedReads_XsdtBoolean_                                                                                                                                                                                                                                                                                                     func(*XsdGoPkgHasElems_AlignmentIncludesUnalignedReadsallAlignmentDirectivesTypeschema_AlignmentIncludesUnalignedReads_XsdtBoolean_, bool) error
	XsdGoPkgHasElem_ExpectedBasecallTABLEchoicesequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_ExpectedBasecallTable_TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceChoiceExpectedBasecallTable_                                                                                                                                                                                              func(*XsdGoPkgHasElem_ExpectedBasecallTABLEchoicesequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_ExpectedBasecallTable_TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceChoiceExpectedBasecallTable_, bool) error
	XsdGoPkgHasElem_AlignmentMarksDuplicateReadsallAlignmentDirectivesTypeschema_AlignmentMarksDuplicateReads_XsdtBoolean_                                                                                                                                                                                                                                                                                                            func(*XsdGoPkgHasElem_AlignmentMarksDuplicateReadsallAlignmentDirectivesTypeschema_AlignmentMarksDuplicateReads_XsdtBoolean_, bool) error
	TProcessingType                                                                                                                                                                                                                                                                                                                                                                                                                   func(*TProcessingType, bool) error
	XsdGoPkgHasElems_PrevStepINDEXsequencePIPESECTIONsequencePipelineTypeschema_PrevStepIndex_XsdtString_                                                                                                                                                                                                                                                                                                                             func(*XsdGoPkgHasElems_PrevStepINDEXsequencePIPESECTIONsequencePipelineTypeschema_PrevStepIndex_XsdtString_, bool) error
	XsdGoPkgHasElems_AnalysisLINKsequenceTxsdAnalysisTypeSequenceAnalysisLinksANALYSISLINKSsequenceAnalysisTypeschema_AnalysisLink_TLinkType_                                                                                                                                                                                                                                                                                         func(*XsdGoPkgHasElems_AnalysisLINKsequenceTxsdAnalysisTypeSequenceAnalysisLinksANALYSISLINKSsequenceAnalysisTypeschema_AnalysisLink_TLinkType_, bool) error
	TxsdAnalysisTypeSequenceSequenceDataBlock                                                                                                                                                                                                                                                                                                                                                                                         func(*TxsdAnalysisTypeSequenceSequenceDataBlock, bool) error
	TAnalysisSetType                                                                                                                                                                                                                                                                                                                                                                                                                  func(*TAnalysisSetType, bool) error
	XsdGoPkgHasElems_FILEsequenceTxsdAnalysisTypeSequenceSequenceDataBlockAllFilesFILESallTxsdAnalysisTypeSequenceSequenceDataBlockDATABLOCKsequencesequenceAnalysisTypeschema_File_TAnalysisFileType_                                                                                                                                                                                                                                func(*XsdGoPkgHasElems_FILEsequenceTxsdAnalysisTypeSequenceSequenceDataBlockAllFilesFILESallTxsdAnalysisTypeSequenceSequenceDataBlockDATABLOCKsequencesequenceAnalysisTypeschema_File_TAnalysisFileType_, bool) error
	TxsdPlatformTypeChoiceHelicos                                                                                                                                                                                                                                                                                                                                                                                                     func(*TxsdPlatformTypeChoiceHelicos, bool) error
	XsdGoPkgHasElem_SecondaryIDsequenceIdentifierTypeschema_SecondaryId_TNameAndLabelType_                                                                                                                                                                                                                                                                                                                                            func(*XsdGoPkgHasElem_SecondaryIDsequenceIdentifierTypeschema_SecondaryId_TNameAndLabelType_, bool) error
	TxsdPipelineTypeSequencePipeSection                                                                                                                                                                                                                                                                                                                                                                                               func(*TxsdPipelineTypeSequencePipeSection, bool) error
	XsdGoPkgHasElems_InstrumentMODELallLS454ChoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceLs454AllInstrumentModel_                                                                                                                                                                                                                                                                                                   func(*XsdGoPkgHasElems_InstrumentMODELallLS454ChoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceLs454AllInstrumentModel_, bool) error
	XsdGoPkgHasElems_PROCESSINGsequenceREFERENCEALIGNMENTchoiceANALYSISTYPEsequenceAnalysisTypeschema_Processing_TAlignmentProcessingType_                                                                                                                                                                                                                                                                                            func(*XsdGoPkgHasElems_PROCESSINGsequenceREFERENCEALIGNMENTchoiceANALYSISTYPEsequenceAnalysisTypeschema_Processing_TAlignmentProcessingType_, bool) error
	TxsdAnalysisTypeSequenceAnalysisAttributes                                                                                                                                                                                                                                                                                                                                                                                        func(*TxsdAnalysisTypeSequenceAnalysisAttributes, bool) error
	XsdGoPkgHasElem_InstrumentMODELsequencePACBIOSMRTchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoicePacbioSmrtSequenceInstrumentModel_                                                                                                                                                                                                                                                                                func(*XsdGoPkgHasElem_InstrumentMODELsequencePACBIOSMRTchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoicePacbioSmrtSequenceInstrumentModel_, bool) error
	XsdGoPkgHasElem_NAMEsequenceTxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceAssemblyChoiceStandardSTANDARDchoiceTxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceAssemblyASSEMBLYsequenceTxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentREFERENCEALIGNMENTchoiceTxsdAnalysisTypeSequenceAnalysisTypeANALYSISTYPEsequenceAnalysisTypeschema_Name_TXRefType_                    func(*XsdGoPkgHasElem_NAMEsequenceTxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceAssemblyChoiceStandardSTANDARDchoiceTxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceAssemblyASSEMBLYsequenceTxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentREFERENCEALIGNMENTchoiceTxsdAnalysisTypeSequenceAnalysisTypeANALYSISTYPEsequenceAnalysisTypeschema_Name_TXRefType_, bool) error
	XsdGoPkgHasElem_CAPILLARYchoicePlatformTypeschema_Capillary_TxsdPlatformTypeChoiceCapillary_                                                                                                                                                                                                                                                                                                                                      func(*XsdGoPkgHasElem_CAPILLARYchoicePlatformTypeschema_Capillary_TxsdPlatformTypeChoiceCapillary_, bool) error
	XsdGoPkgHasElems_AnalysisTYPEsequenceAnalysisTypeschema_AnalysisType_TxsdAnalysisTypeSequenceAnalysisType_                                                                                                                                                                                                                                                                                                                        func(*XsdGoPkgHasElems_AnalysisTYPEsequenceAnalysisTypeschema_AnalysisType_TxsdAnalysisTypeSequenceAnalysisType_, bool) error
	TXRefType                                                                                                                                                                                                                                                                                                                                                                                                                         func(*TXRefType, bool) error
	XsdGoPkgHasElems_NAMEsequenceTxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceAssemblyChoiceStandardSTANDARDchoiceTxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceAssemblyASSEMBLYsequenceTxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentREFERENCEALIGNMENTchoiceTxsdAnalysisTypeSequenceAnalysisTypeANALYSISTYPEsequenceAnalysisTypeschema_Name_TXRefType_                   func(*XsdGoPkgHasElems_NAMEsequenceTxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceAssemblyChoiceStandardSTANDARDchoiceTxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceAssemblyASSEMBLYsequenceTxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentREFERENCEALIGNMENTchoiceTxsdAnalysisTypeSequenceAnalysisTypeANALYSISTYPEsequenceAnalysisTypeschema_Name_TXRefType_, bool) error
	XsdGoPkgHasElems_BaseCOORDchoicesequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_BaseCoord_XsdtInteger_                                                                                                                                                                                                                                                                                                       func(*XsdGoPkgHasElems_BaseCOORDchoicesequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_BaseCoord_XsdtInteger_, bool) error
	XsdGoPkgHasElem_InstrumentMODELsequenceILLUMINAchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceIlluminaSequenceInstrumentModel_                                                                                                                                                                                                                                                                                    func(*XsdGoPkgHasElem_InstrumentMODELsequenceILLUMINAchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceIlluminaSequenceInstrumentModel_, bool) error
	TxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceSeqLabelsSequenceSequence                                                                                                                                                                                                                                                                                                                                     func(*TxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceSeqLabelsSequenceSequence, bool) error
	TxsdPlatformTypeChoiceOxfordNanopore                                                                                                                                                                                                                                                                                                                                                                                              func(*TxsdPlatformTypeChoiceOxfordNanopore, bool) error
	XsdGoPkgHasElems_HELICOSchoicePlatformTypeschema_Helicos_TxsdPlatformTypeChoiceHelicos_                                                                                                                                                                                                                                                                                                                                           func(*XsdGoPkgHasElems_HELICOSchoicePlatformTypeschema_Helicos_TxsdPlatformTypeChoiceHelicos_, bool) error
	XsdGoPkgHasElem_EntrezLINKchoiceLinkTypeschema_EntrezLink_TxsdLinkTypeChoiceEntrezLink_                                                                                                                                                                                                                                                                                                                                           func(*XsdGoPkgHasElem_EntrezLINKchoiceLinkTypeschema_EntrezLink_TxsdLinkTypeChoiceEntrezLink_, bool) error
	XsdGoPkgHasElems_IDENTIFIERSsequenceTxsdAnalysisTypeSequenceTargetsTARGETSsequenceAnalysisTypeschema_Identifiers_TIdentifierType_                                                                                                                                                                                                                                                                                                 func(*XsdGoPkgHasElems_IDENTIFIERSsequenceTxsdAnalysisTypeSequenceTargetsTARGETSsequenceAnalysisTypeschema_Identifiers_TIdentifierType_, bool) error
	XsdGoPkgHasElem_InstrumentMODELsequenceCOMPLETEGENOMICSchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceCompleteGenomicsSequenceInstrumentModel_                                                                                                                                                                                                                                                                    func(*XsdGoPkgHasElem_InstrumentMODELsequenceCOMPLETEGENOMICSchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceCompleteGenomicsSequenceInstrumentModel_, bool) error
	XsdGoPkgHasElems_InstrumentMODELsequenceIONTORRENTchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceIonTorrentSequenceInstrumentModel_                                                                                                                                                                                                                                                                               func(*XsdGoPkgHasElems_InstrumentMODELsequenceIONTORRENTchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceIonTorrentSequenceInstrumentModel_, bool) error
	XsdGoPkgHasElems_TARGETsequenceTxsdAnalysisTypeSequenceTargetsTARGETSsequenceAnalysisTypeschema_Target_TSraLinkType_                                                                                                                                                                                                                                                                                                              func(*XsdGoPkgHasElems_TARGETsequenceTxsdAnalysisTypeSequenceTargetsTARGETSsequenceAnalysisTypeschema_Target_TSraLinkType_, bool) error
	XsdGoPkgHasElem_InstrumentMODELsequenceIONTORRENTchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceIonTorrentSequenceInstrumentModel_                                                                                                                                                                                                                                                                                func(*XsdGoPkgHasElem_InstrumentMODELsequenceIONTORRENTchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceIonTorrentSequenceInstrumentModel_, bool) error
	XsdGoPkgHasElem_ReadLABELsequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_ReadLabel_XsdtString_                                                                                                                                                                                                                                                                                                               func(*XsdGoPkgHasElem_ReadLABELsequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_ReadLabel_XsdtString_, bool) error
	TPipelineType                                                                                                                                                                                                                                                                                                                                                                                                                     func(*TPipelineType, bool) error
	TAlignmentProcessingType                                                                                                                                                                                                                                                                                                                                                                                                          func(*TAlignmentProcessingType, bool) error
	XsdGoPkgHasElem_ReferenceALIGNMENTchoiceTxsdAnalysisTypeSequenceAnalysisTypeANALYSISTYPEsequenceAnalysisTypeschema_ReferenceAlignment_TxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignment_                                                                                                                                                                                                                               func(*XsdGoPkgHasElem_ReferenceALIGNMENTchoiceTxsdAnalysisTypeSequenceAnalysisTypeANALYSISTYPEsequenceAnalysisTypeschema_ReferenceAlignment_TxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignment_, bool) error
	XsdGoPkgHasElem_BaseCOORDchoicesequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_BaseCoord_XsdtInteger_                                                                                                                                                                                                                                                                                                        func(*XsdGoPkgHasElem_BaseCOORDchoicesequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_BaseCoord_XsdtInteger_, bool) error
	XsdGoPkgHasElem_ILLUMINAchoicePlatformTypeschema_Illumina_TxsdPlatformTypeChoiceIllumina_                                                                                                                                                                                                                                                                                                                                         func(*XsdGoPkgHasElem_ILLUMINAchoicePlatformTypeschema_Illumina_TxsdPlatformTypeChoiceIllumina_, bool) error
	XsdGoPkgHasElems_InstrumentMODELsequenceILLUMINAchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceIlluminaSequenceInstrumentModel_                                                                                                                                                                                                                                                                                   func(*XsdGoPkgHasElems_InstrumentMODELsequenceILLUMINAchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceIlluminaSequenceInstrumentModel_, bool) error
	XsdGoPkgHasElem_RelativeORDERchoicesequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_RelativeOrder_TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceChoiceRelativeOrder_                                                                                                                                                                                                                      func(*XsdGoPkgHasElem_RelativeORDERchoicesequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_RelativeOrder_TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceChoiceRelativeOrder_, bool) error
	XsdGoPkgHasElems_StudyREFsequenceAnalysisTypeschema_StudyRef_TxsdAnalysisTypeSequenceStudyRef_                                                                                                                                                                                                                                                                                                                                    func(*XsdGoPkgHasElems_StudyREFsequenceAnalysisTypeschema_StudyRef_TxsdAnalysisTypeSequenceStudyRef_, bool) error
	TLinkType                                                                                                                                                                                                                                                                                                                                                                                                                         func(*TLinkType, bool) error
	TxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceRunLabels                                                                                                                                                                                                                                                                                                                                                     func(*TxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceRunLabels, bool) error
	XsdGoPkgHasElem_SequenceANNOTATIONchoiceTxsdAnalysisTypeSequenceAnalysisTypeANALYSISTYPEsequenceAnalysisTypeschema_SequenceAnnotation_TxsdAnalysisTypeSequenceAnalysisTypeChoiceSequenceAnnotation_                                                                                                                                                                                                                               func(*XsdGoPkgHasElem_SequenceANNOTATIONchoiceTxsdAnalysisTypeSequenceAnalysisTypeANALYSISTYPEsequenceAnalysisTypeschema_SequenceAnnotation_TxsdAnalysisTypeSequenceAnalysisTypeChoiceSequenceAnnotation_, bool) error
	XsdGoPkgHasElem_AnalysisSet                                                                                                                                                                                                                                                                                                                                                                                                       func(*XsdGoPkgHasElem_AnalysisSet, bool) error
	XsdGoPkgHasElems_BASECALLsequenceEXPECTEDBasecallTABLEchoicesequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_Basecall_TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceChoiceExpectedBasecallTableSequenceBasecall_                                                                                                                                                                          func(*XsdGoPkgHasElems_BASECALLsequenceEXPECTEDBasecallTABLEchoicesequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_Basecall_TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceChoiceExpectedBasecallTableSequenceBasecall_, bool) error
	XsdGoPkgHasElems_DIRECTIVESsequenceProcessingTypeschema_Directives_TSequencingDirectivesType_                                                                                                                                                                                                                                                                                                                                     func(*XsdGoPkgHasElems_DIRECTIVESsequenceProcessingTypeschema_Directives_TSequencingDirectivesType_, bool) error
	XsdGoPkgHasElem_TITLEsequenceAnalysisTypeschema_Title_XsdtString_                                                                                                                                                                                                                                                                                                                                                                 func(*XsdGoPkgHasElem_TITLEsequenceAnalysisTypeschema_Title_XsdtString_, bool) error
	XsdGoPkgHasElem_CUSTOMchoiceTxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceAssemblyASSEMBLYsequenceTxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentREFERENCEALIGNMENTchoiceTxsdAnalysisTypeSequenceAnalysisTypeANALYSISTYPEsequenceAnalysisTypeschema_Custom_TxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceAssemblyChoiceCustom_                                           func(*XsdGoPkgHasElem_CUSTOMchoiceTxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceAssemblyASSEMBLYsequenceTxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentREFERENCEALIGNMENTchoiceTxsdAnalysisTypeSequenceAnalysisTypeANALYSISTYPEsequenceAnalysisTypeschema_Custom_TxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceAssemblyChoiceCustom_, bool) error
	TxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceAssembly                                                                                                                                                                                                                                                                                                                                                      func(*TxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceAssembly, bool) error
	TSraLinkType                                                                                                                                                                                                                                                                                                                                                                                                                      func(*TSraLinkType, bool) error
	XsdGoPkgHasElem_TAGallAttributeTypeschema_Tag_XsdtString_                                                                                                                                                                                                                                                                                                                                                                         func(*XsdGoPkgHasElem_TAGallAttributeTypeschema_Tag_XsdtString_, bool) error
	XsdGoPkgHasElem_SEQUENCEsequenceSEQLABELSsequenceREFERENCEALIGNMENTchoiceANALYSISTYPEsequenceAnalysisTypeschema_Sequence_TxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceSeqLabelsSequenceSequence_                                                                                                                                                                                                           func(*XsdGoPkgHasElem_SEQUENCEsequenceSEQLABELSsequenceREFERENCEALIGNMENTchoiceANALYSISTYPEsequenceAnalysisTypeschema_Sequence_TxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceSeqLabelsSequenceSequence_, bool) error
	XsdGoPkgHasElems_SubmitterIDsequenceIdentifierTypeschema_SubmitterId_TQualifiedNameType_                                                                                                                                                                                                                                                                                                                                          func(*XsdGoPkgHasElems_SubmitterIDsequenceIdentifierTypeschema_SubmitterId_TQualifiedNameType_, bool) error
	XsdGoPkgHasElems_IDchoicesequenceENTREZLINKchoiceLinkTypeschema_Id_XsdtNonNegativeInteger_                                                                                                                                                                                                                                                                                                                                        func(*XsdGoPkgHasElems_IDchoicesequenceENTREZLINKchoiceLinkTypeschema_Id_XsdtNonNegativeInteger_, bool) error
	XsdGoPkgHasElems_SampleDemuxDIRECTIVEallSequencingDirectivesTypeschema_SampleDemuxDirective_TxsdSequencingDirectivesTypeAllSampleDemuxDirective_                                                                                                                                                                                                                                                                                  func(*XsdGoPkgHasElems_SampleDemuxDIRECTIVEallSequencingDirectivesTypeschema_SampleDemuxDirective_TxsdSequencingDirectivesTypeAllSampleDemuxDirective_, bool) error
	XsdGoPkgHasElem_AlignmentIncludesUnalignedReadsallAlignmentDirectivesTypeschema_AlignmentIncludesUnalignedReads_XsdtBoolean_                                                                                                                                                                                                                                                                                                      func(*XsdGoPkgHasElem_AlignmentIncludesUnalignedReadsallAlignmentDirectivesTypeschema_AlignmentIncludesUnalignedReads_XsdtBoolean_, bool) error
	TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceChoiceExpectedBasecallTable                                                                                                                                                                                                                                                                                                                                     func(*TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceChoiceExpectedBasecallTable, bool) error
	XsdGoPkgHasElem_ReadTYPEsequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_ReadType_TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceReadType_Forward                                                                                                                                                                                                                                          func(*XsdGoPkgHasElem_ReadTYPEsequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_ReadType_TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceReadType_Forward, bool) error
	XsdGoPkgHasElems_PIPELINEallDefaultProcessingTypeschema_Pipeline_TPipelineType_                                                                                                                                                                                                                                                                                                                                                   func(*XsdGoPkgHasElems_PIPELINEallDefaultProcessingTypeschema_Pipeline_TPipelineType_, bool) error
	XsdGoPkgHasCdata                                                                                                                                                                                                                                                                                                                                                                                                                  func(*XsdGoPkgHasCdata, bool) error
	XsdGoPkgHasElem_FILESallTxsdAnalysisTypeSequenceSequenceDataBlockDATABLOCKsequencesequenceAnalysisTypeschema_Files_TxsdAnalysisTypeSequenceSequenceDataBlockAllFiles_                                                                                                                                                                                                                                                             func(*XsdGoPkgHasElem_FILESallTxsdAnalysisTypeSequenceSequenceDataBlockDATABLOCKsequencesequenceAnalysisTypeschema_Files_TxsdAnalysisTypeSequenceSequenceDataBlockAllFiles_, bool) error
	XsdGoPkgHasElems_AnalysisSet                                                                                                                                                                                                                                                                                                                                                                                                      func(*XsdGoPkgHasElems_AnalysisSet, bool) error
	XsdGoPkgHasElems_ReadINDEXsequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_ReadIndex_XsdtNonNegativeInteger_                                                                                                                                                                                                                                                                                                  func(*XsdGoPkgHasElems_ReadINDEXsequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_ReadIndex_XsdtNonNegativeInteger_, bool) error
	XsdGoPkgHasElems_ReadTYPEsequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_ReadType_TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceReadType_Forward                                                                                                                                                                                                                                         func(*XsdGoPkgHasElems_ReadTYPEsequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_ReadType_TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceReadType_Forward, bool) error
	XsdGoPkgHasElem_PipeSECTIONsequencePipelineTypeschema_PipeSection_TxsdPipelineTypeSequencePipeSection_                                                                                                                                                                                                                                                                                                                            func(*XsdGoPkgHasElem_PipeSECTIONsequencePipelineTypeschema_PipeSection_TxsdPipelineTypeSequencePipeSection_, bool) error
	XsdGoPkgHasElems_URLallURLLINKchoiceLinkTypeschema_Url_XsdtAnyURI_                                                                                                                                                                                                                                                                                                                                                                func(*XsdGoPkgHasElems_URLallURLLINKchoiceLinkTypeschema_Url_XsdtAnyURI_, bool) error
	XsdGoPkgHasElem_ExternalIDsequenceIdentifierTypeschema_ExternalId_TQualifiedNameType_                                                                                                                                                                                                                                                                                                                                             func(*XsdGoPkgHasElem_ExternalIDsequenceIdentifierTypeschema_ExternalId_TQualifiedNameType_, bool) error
	XsdGoPkgHasElem_FILEsequenceFILESallDATABLOCKsequencesequenceAnalysisTypeschema_File_TAnalysisFileType_                                                                                                                                                                                                                                                                                                                           func(*XsdGoPkgHasElem_FILEsequenceFILESallDATABLOCKsequencesequenceAnalysisTypeschema_File_TAnalysisFileType_, bool) error
	TNameAndLabelType                                                                                                                                                                                                                                                                                                                                                                                                                 func(*TNameAndLabelType, bool) error
	XsdGoPkgHasElems_SeqLABELSsequenceREFERENCEALIGNMENTchoiceANALYSISTYPEsequenceAnalysisTypeschema_SeqLabels_TxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceSeqLabels_                                                                                                                                                                                                                                         func(*XsdGoPkgHasElems_SeqLABELSsequenceREFERENCEALIGNMENTchoiceANALYSISTYPEsequenceAnalysisTypeschema_SeqLabels_TxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceSeqLabels_, bool) error
	XsdGoPkgHasElems_UUIDsequenceIdentifierTypeschema_Uuid_TNameAndLabelType_                                                                                                                                                                                                                                                                                                                                                         func(*XsdGoPkgHasElems_UUIDsequenceIdentifierTypeschema_Uuid_TNameAndLabelType_, bool) error
	XsdGoPkgHasElems_SEQUENCEsequenceTxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceSeqLabelsSEQLABELSsequenceTxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentREFERENCEALIGNMENTchoiceTxsdAnalysisTypeSequenceAnalysisTypeANALYSISTYPEsequenceAnalysisTypeschema_Sequence_TxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceSeqLabelsSequenceSequence_                             func(*XsdGoPkgHasElems_SEQUENCEsequenceTxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceSeqLabelsSEQLABELSsequenceTxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentREFERENCEALIGNMENTchoiceTxsdAnalysisTypeSequenceAnalysisTypeANALYSISTYPEsequenceAnalysisTypeschema_Sequence_TxsdAnalysisTypeSequenceAnalysisTypeChoiceReferenceAlignmentSequenceSeqLabelsSequenceSequence_, bool) error
	TAlignmentDirectivesType                                                                                                                                                                                                                                                                                                                                                                                                          func(*TAlignmentDirectivesType, bool) error
	XsdGoPkgHasElem_AnalysisTYPEsequenceAnalysisTypeschema_AnalysisType_TxsdAnalysisTypeSequenceAnalysisType_                                                                                                                                                                                                                                                                                                                         func(*XsdGoPkgHasElem_AnalysisTYPEsequenceAnalysisTypeschema_AnalysisType_TxsdAnalysisTypeSequenceAnalysisType_, bool) error
	XsdGoPkgHasElem_AnalysisLINKsequenceTxsdAnalysisTypeSequenceAnalysisLinksANALYSISLINKSsequenceAnalysisTypeschema_AnalysisLink_TLinkType_                                                                                                                                                                                                                                                                                          func(*XsdGoPkgHasElem_AnalysisLINKsequenceTxsdAnalysisTypeSequenceAnalysisLinksANALYSISLINKSsequenceAnalysisTypeschema_AnalysisLink_TLinkType_, bool) error
	XsdGoPkgHasElem_NOTESsequencePIPESECTIONsequencePipelineTypeschema_Notes_XsdtString_                                                                                                                                                                                                                                                                                                                                              func(*XsdGoPkgHasElem_NOTESsequencePIPESECTIONsequencePipelineTypeschema_Notes_XsdtString_, bool) error
	XsdGoPkgHasElem_StudyREFsequenceAnalysisTypeschema_StudyRef_TxsdAnalysisTypeSequenceStudyRef_                                                                                                                                                                                                                                                                                                                                     func(*XsdGoPkgHasElem_StudyREFsequenceAnalysisTypeschema_StudyRef_TxsdAnalysisTypeSequenceStudyRef_, bool) error
	XsdGoPkgHasElems_AbiSOLIDchoicePlatformTypeschema_AbiSolid_TxsdPlatformTypeChoiceAbiSolid_                                                                                                                                                                                                                                                                                                                                        func(*XsdGoPkgHasElems_AbiSOLIDchoicePlatformTypeschema_AbiSolid_TxsdPlatformTypeChoiceAbiSolid_, bool) error
	XsdGoPkgHasElem_BASECALLsequenceEXPECTEDBasecallTABLEchoicesequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_Basecall_TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceChoiceExpectedBasecallTableSequenceBasecall_                                                                                                                                                                           func(*XsdGoPkgHasElem_BASECALLsequenceEXPECTEDBasecallTABLEchoicesequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_Basecall_TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceChoiceExpectedBasecallTableSequenceBasecall_, bool) error
}
