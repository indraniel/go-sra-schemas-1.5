//	Auto-generated by the "go-xsd" package located at:
//		github.com/metaleap/go-xsd
//	Comments on types and fields (if any) are from the XSD file located at:
//		SRA.submission.xsd
package go_SraSubmission

import (
	xsdt "github.com/metaleap/go-xsd/types"
)

type XsdtString struct{ SubmitterId string `xml:",innerxml"` }

//	submission of this document type. If center_name is specified, the name should be unique in all submissions from that center of
//	this document type.
type XsdGoPkgHasAttr_Alias_XsdtString_ struct {
	//	Submitter designated name of the SRA document of this type. At minimum alias should be unique throughout the
	//	submission of this document type. If center_name is specified, the name should be unique in all submissions from that center of
	//	this document type.
	Alias xsdt.String `xml:"alias,attr"`
}

//	Owner authority of this document and namespace for submitter's name of this document. If not provided, then the
//	submitter is regarded as "Individual" and document resolution can only happen within the submission.
type XsdGoPkgHasAttr_CenterName_XsdtString_ struct {
	//	Owner authority of this document and namespace for submitter's name of this document. If not provided, then the
	//	submitter is regarded as "Individual" and document resolution can only happen within the submission.
	CenterName xsdt.String `xml:"center_name,attr"`
}

//	Broker authority of this document. If not provided, then the broker is considered "direct".
type XsdGoPkgHasAttr_BrokerName_XsdtString_ struct {
	//	Broker authority of this document. If not provided, then the broker is considered "direct".
	BrokerName xsdt.String `xml:"broker_name,attr"`
}

//	The document's accession as assigned by the Home Archive.
type XsdGoPkgHasAttr_Accession_XsdtString_ struct {
	//	The document's accession as assigned by the Home Archive.
	Accession xsdt.String `xml:"accession,attr"`
}

type XsdGoPkgHasAtts_NameGroup struct {
	//	Submitter designated name of the SRA document of this type. At minimum alias should be unique throughout the
	//	submission of this document type. If center_name is specified, the name should be unique in all submissions from that center of
	//	this document type.
	XsdGoPkgHasAttr_Alias_XsdtString_

	//	Owner authority of this document and namespace for submitter's name of this document. If not provided, then the
	//	submitter is regarded as "Individual" and document resolution can only happen within the submission.
	XsdGoPkgHasAttr_CenterName_XsdtString_

	//	Broker authority of this document. If not provided, then the broker is considered "direct".
	XsdGoPkgHasAttr_BrokerName_XsdtString_

	//	The document's accession as assigned by the Home Archive.
	XsdGoPkgHasAttr_Accession_XsdtString_
}

//	Identifies a record by name that is known within the namespace defined by attribute "refcenter" Use this field
//	when referencing an object for which an accession has not yet been issued.
type XsdGoPkgHasAttr_Refname_XsdtString_ struct {
	//	Identifies a record by name that is known within the namespace defined by attribute "refcenter" Use this field
	//	when referencing an object for which an accession has not yet been issued.
	Refname xsdt.String `xml:"refname,attr"`
}

//	The center namespace of the attribute "refname". When absent, the namespace is assumed to be the current
//	submission.
type XsdGoPkgHasAttr_Refcenter_XsdtString_ struct {
	//	The center namespace of the attribute "refname". When absent, the namespace is assumed to be the current
	//	submission.
	Refcenter xsdt.String `xml:"refcenter,attr"`
}

type XsdGoPkgHasAtts_RefNameGroup struct {
	//	Identifies a record by name that is known within the namespace defined by attribute "refcenter" Use this field
	//	when referencing an object for which an accession has not yet been issued.
	XsdGoPkgHasAttr_Refname_XsdtString_

	//	The center namespace of the attribute "refname". When absent, the namespace is assumed to be the current
	//	submission.
	XsdGoPkgHasAttr_Refcenter_XsdtString_

	//	Identifies a record by its accession. The scope of resolution is the entire Archive.
	XsdGoPkgHasAttr_Accession_XsdtString_
}

//	An SUBMISSION_SET is a container for a set of studies and a common namespace.
//	A Submission type is used to describe an object that contains submission information, contacts for the submission,
//	actions to be performed by the Archive, and file manifest.
//	Short text that can be used to call out submission records in searches or in displays. This element is strictly
//	optional and is useful mainly to submitters who wish to reference their submission, rather than underlying study or experiment.
type XsdGoPkgHasElem_TITLEsequenceSubmissionTypeschema_Title_XsdtString_ struct {
	//	Short text that can be used to call out submission records in searches or in displays. This element is strictly
	//	optional and is useful mainly to submitters who wish to reference their submission, rather than underlying study or experiment.
	Title xsdt.String `xml:"TITLE"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_TITLEsequenceSubmissionTypeschema_Title_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_TITLEsequenceSubmissionTypeschema_Title_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_TITLEsequenceSubmissionTypeschema_Title_XsdtString_ instance.
func (me *XsdGoPkgHasElem_TITLEsequenceSubmissionTypeschema_Title_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_TITLEsequenceSubmissionTypeschema_Title_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Name of contact person for this submission.
type XsdGoPkgHasAttr_Name_XsdtString_ struct {
	//	Name of contact person for this submission.
	Name xsdt.String `xml:"name,attr"`
}

//	Internet address of person or service to inform on any status changes for this submission.
type XsdGoPkgHasAttr_InformOnStatus_XsdtAnyURI_ struct {
	//	Internet address of person or service to inform on any status changes for this submission.
	InformOnStatus xsdt.AnyURI `xml:"inform_on_status,attr"`
}

//	Internet address of person or service to inform on any errors for this submission.
type XsdGoPkgHasAttr_InformOnError_XsdtAnyURI_ struct {
	//	Internet address of person or service to inform on any errors for this submission.
	InformOnError xsdt.AnyURI `xml:"inform_on_error,attr"`
}

type TxsdSubmissionTypeSequenceContactsSequenceContact struct {
	//	Internet address of person or service to inform on any errors for this submission.
	XsdGoPkgHasAttr_InformOnError_XsdtAnyURI_

	//	Name of contact person for this submission.
	XsdGoPkgHasAttr_Name_XsdtString_

	//	Internet address of person or service to inform on any status changes for this submission.
	XsdGoPkgHasAttr_InformOnStatus_XsdtAnyURI_
}

//	If the WalkHandlers.TxsdSubmissionTypeSequenceContactsSequenceContact function is not nil (ie. was set by outside code), calls it with this TxsdSubmissionTypeSequenceContactsSequenceContact instance as the single argument. Then calls the Walk() method on 0/3 embed(s) and 0/0 field(s) belonging to this TxsdSubmissionTypeSequenceContactsSequenceContact instance.
func (me *TxsdSubmissionTypeSequenceContactsSequenceContact) Walk() (err error) {
	if fn := WalkHandlers.TxsdSubmissionTypeSequenceContactsSequenceContact; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_CONTACTsequenceTxsdSubmissionTypeSequenceContactsCONTACTSsequenceSubmissionTypeschema_Contact_TxsdSubmissionTypeSequenceContactsSequenceContact_ struct {
	Contacts []*TxsdSubmissionTypeSequenceContactsSequenceContact `xml:"CONTACT"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_CONTACTsequenceTxsdSubmissionTypeSequenceContactsCONTACTSsequenceSubmissionTypeschema_Contact_TxsdSubmissionTypeSequenceContactsSequenceContact_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_CONTACTsequenceTxsdSubmissionTypeSequenceContactsCONTACTSsequenceSubmissionTypeschema_Contact_TxsdSubmissionTypeSequenceContactsSequenceContact_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_CONTACTsequenceTxsdSubmissionTypeSequenceContactsCONTACTSsequenceSubmissionTypeschema_Contact_TxsdSubmissionTypeSequenceContactsSequenceContact_ instance.
func (me *XsdGoPkgHasElems_CONTACTsequenceTxsdSubmissionTypeSequenceContactsCONTACTSsequenceSubmissionTypeschema_Contact_TxsdSubmissionTypeSequenceContactsSequenceContact_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_CONTACTsequenceTxsdSubmissionTypeSequenceContactsCONTACTSsequenceSubmissionTypeschema_Contact_TxsdSubmissionTypeSequenceContactsSequenceContact_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Contacts {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdSubmissionTypeSequenceContacts struct {
	XsdGoPkgHasElems_CONTACTsequenceTxsdSubmissionTypeSequenceContactsCONTACTSsequenceSubmissionTypeschema_Contact_TxsdSubmissionTypeSequenceContactsSequenceContact_
}

//	If the WalkHandlers.TxsdSubmissionTypeSequenceContacts function is not nil (ie. was set by outside code), calls it with this TxsdSubmissionTypeSequenceContacts instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this TxsdSubmissionTypeSequenceContacts instance.
func (me *TxsdSubmissionTypeSequenceContacts) Walk() (err error) {
	if fn := WalkHandlers.TxsdSubmissionTypeSequenceContacts; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_CONTACTsequenceTxsdSubmissionTypeSequenceContactsCONTACTSsequenceSubmissionTypeschema_Contact_TxsdSubmissionTypeSequenceContactsSequenceContact_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_CONTACTSsequenceSubmissionTypeschema_Contacts_TxsdSubmissionTypeSequenceContacts_ struct {
	Contacts *TxsdSubmissionTypeSequenceContacts `xml:"CONTACTS"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_CONTACTSsequenceSubmissionTypeschema_Contacts_TxsdSubmissionTypeSequenceContacts_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_CONTACTSsequenceSubmissionTypeschema_Contacts_TxsdSubmissionTypeSequenceContacts_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_CONTACTSsequenceSubmissionTypeschema_Contacts_TxsdSubmissionTypeSequenceContacts_ instance.
func (me *XsdGoPkgHasElem_CONTACTSsequenceSubmissionTypeschema_Contacts_TxsdSubmissionTypeSequenceContacts_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_CONTACTSsequenceSubmissionTypeschema_Contacts_TxsdSubmissionTypeSequenceContacts_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Contacts.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Select an action to execute with respect to this submission session.
//	Modify a study, experiment, sample, or analysis object that was submitted under this submission
//	session.
//	Filename or relative path of filename containing XML that defines the action. This will include
//	study, experiment, sample, run, or analysis files. Note that the run data files are named within the run XML and
//	not in this file.
type XsdGoPkgHasAttr_Source_XsdtString_ struct {
	//	Filename or relative path of filename containing XML that defines the action. This will include
	//	study, experiment, sample, run, or analysis files. Note that the run data files are named within the run XML and
	//	not in this file.
	Source xsdt.String `xml:"source,attr"`
}

//	Select a source type (schema) for the file. This will actually be required by the business
//	layer if the source documentation reference aliases that are not unique outside of their document type.
type TxsdSubmissionTypeSequenceActionsSequenceActionChoiceModifySchema xsdt.String

//	Returns true if the value of this enumerated TxsdSubmissionTypeSequenceActionsSequenceActionChoiceModifySchema is "run".
func (me TxsdSubmissionTypeSequenceActionsSequenceActionChoiceModifySchema) IsRun() bool {
	return me.String() == "run"
}

//	Returns true if the value of this enumerated TxsdSubmissionTypeSequenceActionsSequenceActionChoiceModifySchema is "analysis".
func (me TxsdSubmissionTypeSequenceActionsSequenceActionChoiceModifySchema) IsAnalysis() bool {
	return me.String() == "analysis"
}

//	Since TxsdSubmissionTypeSequenceActionsSequenceActionChoiceModifySchema is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdSubmissionTypeSequenceActionsSequenceActionChoiceModifySchema) Set(s string) {
	(*xsdt.String)(me).Set(s)
}

//	Since TxsdSubmissionTypeSequenceActionsSequenceActionChoiceModifySchema is just a simple String type, this merely returns the current string value.
func (me TxsdSubmissionTypeSequenceActionsSequenceActionChoiceModifySchema) String() string {
	return xsdt.String(me).String()
}

//	This convenience method just performs a simple type conversion to TxsdSubmissionTypeSequenceActionsSequenceActionChoiceModifySchema's alias type xsdt.String.
func (me TxsdSubmissionTypeSequenceActionsSequenceActionChoiceModifySchema) ToXsdtString() xsdt.String {
	return xsdt.String(me)
}

//	Returns true if the value of this enumerated TxsdSubmissionTypeSequenceActionsSequenceActionChoiceModifySchema is "study".
func (me TxsdSubmissionTypeSequenceActionsSequenceActionChoiceModifySchema) IsStudy() bool {
	return me.String() == "study"
}

//	Returns true if the value of this enumerated TxsdSubmissionTypeSequenceActionsSequenceActionChoiceModifySchema is "experiment".
func (me TxsdSubmissionTypeSequenceActionsSequenceActionChoiceModifySchema) IsExperiment() bool {
	return me.String() == "experiment"
}

//	Returns true if the value of this enumerated TxsdSubmissionTypeSequenceActionsSequenceActionChoiceModifySchema is "sample".
func (me TxsdSubmissionTypeSequenceActionsSequenceActionChoiceModifySchema) IsSample() bool {
	return me.String() == "sample"
}

type XsdGoPkgHasAttr_Schema_TxsdSubmissionTypeSequenceActionsSequenceActionChoiceModifySchema_ struct {
	//	Select a source type (schema) for the file. This will actually be required by the business
	//	layer if the source documentation reference aliases that are not unique outside of their document type.
	Schema TxsdSubmissionTypeSequenceActionsSequenceActionChoiceModifySchema `xml:"schema,attr"`
}

type TxsdSubmissionTypeSequenceActionsSequenceActionChoiceModify struct {
	//	Modify SRA metadata: a study, experiment, sample, run, or analysis object that was submitted
	//	under this submission session. Submit ammended XML for an existing accession. Note that the run data itself
	//	cannot be amended. To to that, withdraw the existing Run for the specified Experiment and add a new Run in its
	//	place.
	XsdGoPkgHasAttr_Source_XsdtString_

	//	Select a source type (schema) for the file. This will actually be required by the business
	//	layer if the source documentation reference aliases that are not unique outside of their document type.
	XsdGoPkgHasAttr_Schema_TxsdSubmissionTypeSequenceActionsSequenceActionChoiceModifySchema_
}

//	If the WalkHandlers.TxsdSubmissionTypeSequenceActionsSequenceActionChoiceModify function is not nil (ie. was set by outside code), calls it with this TxsdSubmissionTypeSequenceActionsSequenceActionChoiceModify instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdSubmissionTypeSequenceActionsSequenceActionChoiceModify instance.
func (me *TxsdSubmissionTypeSequenceActionsSequenceActionChoiceModify) Walk() (err error) {
	if fn := WalkHandlers.TxsdSubmissionTypeSequenceActionsSequenceActionChoiceModify; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_MODIFYchoiceTxsdSubmissionTypeSequenceActionsSequenceActionACTIONsequenceTxsdSubmissionTypeSequenceActionsACTIONSsequenceSubmissionTypeschema_Modify_TxsdSubmissionTypeSequenceActionsSequenceActionChoiceModify_ struct {
	//	Modify a study, experiment, sample, or analysis object that was submitted under this submission
	//	session.
	Modify *TxsdSubmissionTypeSequenceActionsSequenceActionChoiceModify `xml:"MODIFY"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_MODIFYchoiceTxsdSubmissionTypeSequenceActionsSequenceActionACTIONsequenceTxsdSubmissionTypeSequenceActionsACTIONSsequenceSubmissionTypeschema_Modify_TxsdSubmissionTypeSequenceActionsSequenceActionChoiceModify_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_MODIFYchoiceTxsdSubmissionTypeSequenceActionsSequenceActionACTIONsequenceTxsdSubmissionTypeSequenceActionsACTIONSsequenceSubmissionTypeschema_Modify_TxsdSubmissionTypeSequenceActionsSequenceActionChoiceModify_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_MODIFYchoiceTxsdSubmissionTypeSequenceActionsSequenceActionACTIONsequenceTxsdSubmissionTypeSequenceActionsACTIONSsequenceSubmissionTypeschema_Modify_TxsdSubmissionTypeSequenceActionsSequenceActionChoiceModify_ instance.
func (me *XsdGoPkgHasElem_MODIFYchoiceTxsdSubmissionTypeSequenceActionsSequenceActionACTIONsequenceTxsdSubmissionTypeSequenceActionsACTIONSsequenceSubmissionTypeschema_Modify_TxsdSubmissionTypeSequenceActionsSequenceActionChoiceModify_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_MODIFYchoiceTxsdSubmissionTypeSequenceActionsSequenceActionACTIONsequenceTxsdSubmissionTypeSequenceActionsACTIONSsequenceSubmissionTypeschema_Modify_TxsdSubmissionTypeSequenceActionsSequenceActionChoiceModify_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Modify.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Suppress object from view, indexing, and download from public site as prescribed by INSDC rules.
//	The object is not removed from the Archive, and can be obtained again by accession if requested. Suppression is
//	explicit and there is no cascade suppression. User must take care to remove only objects that do not have active
//	references.
//	Accession or refname that is the target for the action.
type XsdGoPkgHasAttr_Target_XsdtString_ struct {
	//	Accession or refname that is the target for the action.
	Target xsdt.String `xml:"target,attr"`
}

type TxsdSubmissionTypeSequenceActionsSequenceActionChoiceSuppress struct {
	//	Accession or refname that is the target for the action.
	XsdGoPkgHasAttr_Target_XsdtString_
}

//	If the WalkHandlers.TxsdSubmissionTypeSequenceActionsSequenceActionChoiceSuppress function is not nil (ie. was set by outside code), calls it with this TxsdSubmissionTypeSequenceActionsSequenceActionChoiceSuppress instance as the single argument. Then calls the Walk() method on 0/1 embed(s) and 0/0 field(s) belonging to this TxsdSubmissionTypeSequenceActionsSequenceActionChoiceSuppress instance.
func (me *TxsdSubmissionTypeSequenceActionsSequenceActionChoiceSuppress) Walk() (err error) {
	if fn := WalkHandlers.TxsdSubmissionTypeSequenceActionsSequenceActionChoiceSuppress; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_SUPPRESSchoiceTxsdSubmissionTypeSequenceActionsSequenceActionACTIONsequenceTxsdSubmissionTypeSequenceActionsACTIONSsequenceSubmissionTypeschema_Suppress_TxsdSubmissionTypeSequenceActionsSequenceActionChoiceSuppress_ struct {
	//	Suppress object from view, indexing, and download from public site as prescribed by INSDC rules.
	//	The object is not removed from the Archive, and can be obtained again by accession if requested. Suppression is
	//	explicit and there is no cascade suppression. User must take care to remove only objects that do not have active
	//	references.
	Suppress *TxsdSubmissionTypeSequenceActionsSequenceActionChoiceSuppress `xml:"SUPPRESS"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_SUPPRESSchoiceTxsdSubmissionTypeSequenceActionsSequenceActionACTIONsequenceTxsdSubmissionTypeSequenceActionsACTIONSsequenceSubmissionTypeschema_Suppress_TxsdSubmissionTypeSequenceActionsSequenceActionChoiceSuppress_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_SUPPRESSchoiceTxsdSubmissionTypeSequenceActionsSequenceActionACTIONsequenceTxsdSubmissionTypeSequenceActionsACTIONSsequenceSubmissionTypeschema_Suppress_TxsdSubmissionTypeSequenceActionsSequenceActionChoiceSuppress_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_SUPPRESSchoiceTxsdSubmissionTypeSequenceActionsSequenceActionACTIONsequenceTxsdSubmissionTypeSequenceActionsACTIONSsequenceSubmissionTypeschema_Suppress_TxsdSubmissionTypeSequenceActionsSequenceActionChoiceSuppress_ instance.
func (me *XsdGoPkgHasElem_SUPPRESSchoiceTxsdSubmissionTypeSequenceActionsSequenceActionACTIONsequenceTxsdSubmissionTypeSequenceActionsACTIONSsequenceSubmissionTypeschema_Suppress_TxsdSubmissionTypeSequenceActionsSequenceActionChoiceSuppress_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_SUPPRESSchoiceTxsdSubmissionTypeSequenceActionsSequenceActionACTIONsequenceTxsdSubmissionTypeSequenceActionsACTIONSsequenceSubmissionTypeschema_Suppress_TxsdSubmissionTypeSequenceActionsSequenceActionChoiceSuppress_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Suppress.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Hold content from public view for any study, experiment, sample, run, or analysis object that was
//	submitted under this submission session.
//	Direct the SRA to release the record on or after the specified number of date.
type XsdGoPkgHasAttr_HoldUntilDate_XsdtDate_ struct {
	//	Direct the SRA to release the record on or after the specified number of date.
	HoldUntilDate xsdt.Date `xml:"HoldUntilDate,attr"`
}

type TxsdSubmissionTypeSequenceActionsSequenceActionChoiceHold struct {
	//	Accession or refname that is the target for the action. If a target is not specified, then the
	//	hold is taken to include all objects referenced by this submission. If a modifier is not specified, then the
	//	hold is taken to mean hold until released by the submitter.
	XsdGoPkgHasAttr_Target_XsdtString_

	//	Direct the SRA to release the record on or after the specified number of date.
	XsdGoPkgHasAttr_HoldUntilDate_XsdtDate_
}

//	If the WalkHandlers.TxsdSubmissionTypeSequenceActionsSequenceActionChoiceHold function is not nil (ie. was set by outside code), calls it with this TxsdSubmissionTypeSequenceActionsSequenceActionChoiceHold instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdSubmissionTypeSequenceActionsSequenceActionChoiceHold instance.
func (me *TxsdSubmissionTypeSequenceActionsSequenceActionChoiceHold) Walk() (err error) {
	if fn := WalkHandlers.TxsdSubmissionTypeSequenceActionsSequenceActionChoiceHold; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_HOLDchoiceTxsdSubmissionTypeSequenceActionsSequenceActionACTIONsequenceTxsdSubmissionTypeSequenceActionsACTIONSsequenceSubmissionTypeschema_Hold_TxsdSubmissionTypeSequenceActionsSequenceActionChoiceHold_ struct {
	//	Hold content from public view for any study, experiment, sample, run, or analysis object that was
	//	submitted under this submission session.
	Hold *TxsdSubmissionTypeSequenceActionsSequenceActionChoiceHold `xml:"HOLD"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_HOLDchoiceTxsdSubmissionTypeSequenceActionsSequenceActionACTIONsequenceTxsdSubmissionTypeSequenceActionsACTIONSsequenceSubmissionTypeschema_Hold_TxsdSubmissionTypeSequenceActionsSequenceActionChoiceHold_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_HOLDchoiceTxsdSubmissionTypeSequenceActionsSequenceActionACTIONsequenceTxsdSubmissionTypeSequenceActionsACTIONSsequenceSubmissionTypeschema_Hold_TxsdSubmissionTypeSequenceActionsSequenceActionChoiceHold_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_HOLDchoiceTxsdSubmissionTypeSequenceActionsSequenceActionACTIONsequenceTxsdSubmissionTypeSequenceActionsACTIONSsequenceSubmissionTypeschema_Hold_TxsdSubmissionTypeSequenceActionsSequenceActionChoiceHold_ instance.
func (me *XsdGoPkgHasElem_HOLDchoiceTxsdSubmissionTypeSequenceActionsSequenceActionACTIONsequenceTxsdSubmissionTypeSequenceActionsACTIONSsequenceSubmissionTypeschema_Hold_TxsdSubmissionTypeSequenceActionsSequenceActionChoiceHold_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_HOLDchoiceTxsdSubmissionTypeSequenceActionsSequenceActionACTIONsequenceTxsdSubmissionTypeSequenceActionsACTIONSsequenceSubmissionTypeschema_Hold_TxsdSubmissionTypeSequenceActionsSequenceActionChoiceHold_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Hold.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Release content to public view and indexing for any study, experiment, sample, run, or analysis
//	object that was submitted under this submission session.
type XsdGoPkgHasElem_RELEASEchoiceTxsdSubmissionTypeSequenceActionsSequenceActionACTIONsequenceTxsdSubmissionTypeSequenceActionsACTIONSsequenceSubmissionTypeschema_Release_TxsdSubmissionTypeSequenceActionsSequenceActionChoiceRelease_ struct {
	//	Release content to public view and indexing for any study, experiment, sample, run, or analysis
	//	object that was submitted under this submission session.
	Release *TxsdSubmissionTypeSequenceActionsSequenceActionChoiceSuppress `xml:"RELEASE"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_RELEASEchoiceTxsdSubmissionTypeSequenceActionsSequenceActionACTIONsequenceTxsdSubmissionTypeSequenceActionsACTIONSsequenceSubmissionTypeschema_Release_TxsdSubmissionTypeSequenceActionsSequenceActionChoiceRelease_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_RELEASEchoiceTxsdSubmissionTypeSequenceActionsSequenceActionACTIONsequenceTxsdSubmissionTypeSequenceActionsACTIONSsequenceSubmissionTypeschema_Release_TxsdSubmissionTypeSequenceActionsSequenceActionChoiceRelease_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_RELEASEchoiceTxsdSubmissionTypeSequenceActionsSequenceActionACTIONsequenceTxsdSubmissionTypeSequenceActionsACTIONSsequenceSubmissionTypeschema_Release_TxsdSubmissionTypeSequenceActionsSequenceActionChoiceRelease_ instance.
func (me *XsdGoPkgHasElem_RELEASEchoiceTxsdSubmissionTypeSequenceActionsSequenceActionACTIONsequenceTxsdSubmissionTypeSequenceActionsACTIONSsequenceSubmissionTypeschema_Release_TxsdSubmissionTypeSequenceActionsSequenceActionChoiceRelease_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_RELEASEchoiceTxsdSubmissionTypeSequenceActionsSequenceActionACTIONsequenceTxsdSubmissionTypeSequenceActionsACTIONSsequenceSubmissionTypeschema_Release_TxsdSubmissionTypeSequenceActionsSequenceActionChoiceRelease_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Release.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Communicate the intention that the data are to be deposited in a protected database and not made
//	public under any circumstances. This is separate from hold/release directives, which indicate the public visibility
//	of the records.
type TxsdSubmissionTypeSequenceActionsSequenceActionChoiceProtect struct {
}

//	If the WalkHandlers.TxsdSubmissionTypeSequenceActionsSequenceActionChoiceProtect function is not nil (ie. was set by outside code), calls it with this TxsdSubmissionTypeSequenceActionsSequenceActionChoiceProtect instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/0 field(s) belonging to this TxsdSubmissionTypeSequenceActionsSequenceActionChoiceProtect instance.
func (me *TxsdSubmissionTypeSequenceActionsSequenceActionChoiceProtect) Walk() (err error) {
	if fn := WalkHandlers.TxsdSubmissionTypeSequenceActionsSequenceActionChoiceProtect; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_PROTECTchoiceTxsdSubmissionTypeSequenceActionsSequenceActionACTIONsequenceTxsdSubmissionTypeSequenceActionsACTIONSsequenceSubmissionTypeschema_Protect_TxsdSubmissionTypeSequenceActionsSequenceActionChoiceProtect_ struct {
	//	Communicate the intention that the data are to be deposited in a protected database and not made
	//	public under any circumstances. This is separate from hold/release directives, which indicate the public visibility
	//	of the records.
	Protect *TxsdSubmissionTypeSequenceActionsSequenceActionChoiceProtect `xml:"PROTECT"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_PROTECTchoiceTxsdSubmissionTypeSequenceActionsSequenceActionACTIONsequenceTxsdSubmissionTypeSequenceActionsACTIONSsequenceSubmissionTypeschema_Protect_TxsdSubmissionTypeSequenceActionsSequenceActionChoiceProtect_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_PROTECTchoiceTxsdSubmissionTypeSequenceActionsSequenceActionACTIONsequenceTxsdSubmissionTypeSequenceActionsACTIONSsequenceSubmissionTypeschema_Protect_TxsdSubmissionTypeSequenceActionsSequenceActionChoiceProtect_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_PROTECTchoiceTxsdSubmissionTypeSequenceActionsSequenceActionACTIONsequenceTxsdSubmissionTypeSequenceActionsACTIONSsequenceSubmissionTypeschema_Protect_TxsdSubmissionTypeSequenceActionsSequenceActionChoiceProtect_ instance.
func (me *XsdGoPkgHasElem_PROTECTchoiceTxsdSubmissionTypeSequenceActionsSequenceActionACTIONsequenceTxsdSubmissionTypeSequenceActionsACTIONSsequenceSubmissionTypeschema_Protect_TxsdSubmissionTypeSequenceActionsSequenceActionChoiceProtect_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_PROTECTchoiceTxsdSubmissionTypeSequenceActionsSequenceActionACTIONsequenceTxsdSubmissionTypeSequenceActionsACTIONSsequenceSubmissionTypeschema_Protect_TxsdSubmissionTypeSequenceActionsSequenceActionChoiceProtect_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Protect.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Process the submission but do not archive anything or issue valid accessions for any object.
//	Select a source type (schema) for the file. This will actually be required by the business
//	layer if the source documentation reference aliases that are not unique outside of their document type.
type XsdGoPkgHasAttr_Schema_TxsdSubmissionTypeSequenceActionsSequenceActionChoiceValidateSchema_ struct {
	//	Select a source type (schema) for the file. This will actually be required by the business
	//	layer if the source documentation reference aliases that are not unique outside of their document type.
	Schema TxsdSubmissionTypeSequenceActionsSequenceActionChoiceModifySchema `xml:"schema,attr"`
}

type TxsdSubmissionTypeSequenceActionsSequenceActionChoiceValidate struct {
	//	Modify SRA metadata: a study, experiment, sample, run, or analysis object that was submitted
	//	under this submission session. Submit ammended XML for an existing accession. Note that the run data itself
	//	cannot be amended. To to that, withdraw the existing Run for the specified Experiment and add a new Run in its
	//	place.
	XsdGoPkgHasAttr_Source_XsdtString_

	//	Select a source type (schema) for the file. This will actually be required by the business
	//	layer if the source documentation reference aliases that are not unique outside of their document type.
	XsdGoPkgHasAttr_Schema_TxsdSubmissionTypeSequenceActionsSequenceActionChoiceValidateSchema_
}

//	If the WalkHandlers.TxsdSubmissionTypeSequenceActionsSequenceActionChoiceValidate function is not nil (ie. was set by outside code), calls it with this TxsdSubmissionTypeSequenceActionsSequenceActionChoiceValidate instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdSubmissionTypeSequenceActionsSequenceActionChoiceValidate instance.
func (me *TxsdSubmissionTypeSequenceActionsSequenceActionChoiceValidate) Walk() (err error) {
	if fn := WalkHandlers.TxsdSubmissionTypeSequenceActionsSequenceActionChoiceValidate; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_VALIDATEchoiceTxsdSubmissionTypeSequenceActionsSequenceActionACTIONsequenceTxsdSubmissionTypeSequenceActionsACTIONSsequenceSubmissionTypeschema_Validate_TxsdSubmissionTypeSequenceActionsSequenceActionChoiceValidate_ struct {
	//	Process the submission but do not archive anything or issue valid accessions for any object.
	Validate *TxsdSubmissionTypeSequenceActionsSequenceActionChoiceValidate `xml:"VALIDATE"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_VALIDATEchoiceTxsdSubmissionTypeSequenceActionsSequenceActionACTIONsequenceTxsdSubmissionTypeSequenceActionsACTIONSsequenceSubmissionTypeschema_Validate_TxsdSubmissionTypeSequenceActionsSequenceActionChoiceValidate_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_VALIDATEchoiceTxsdSubmissionTypeSequenceActionsSequenceActionACTIONsequenceTxsdSubmissionTypeSequenceActionsACTIONSsequenceSubmissionTypeschema_Validate_TxsdSubmissionTypeSequenceActionsSequenceActionChoiceValidate_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_VALIDATEchoiceTxsdSubmissionTypeSequenceActionsSequenceActionACTIONsequenceTxsdSubmissionTypeSequenceActionsACTIONSsequenceSubmissionTypeschema_Validate_TxsdSubmissionTypeSequenceActionsSequenceActionChoiceValidate_ instance.
func (me *XsdGoPkgHasElem_VALIDATEchoiceTxsdSubmissionTypeSequenceActionsSequenceActionACTIONsequenceTxsdSubmissionTypeSequenceActionsACTIONSsequenceSubmissionTypeschema_Validate_TxsdSubmissionTypeSequenceActionsSequenceActionChoiceValidate_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_VALIDATEchoiceTxsdSubmissionTypeSequenceActionsSequenceActionACTIONsequenceTxsdSubmissionTypeSequenceActionsACTIONSsequenceSubmissionTypeschema_Validate_TxsdSubmissionTypeSequenceActionsSequenceActionChoiceValidate_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Validate.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Add a study, experiment, sample, run, or analysis to the submission session.
//	Select a source type (schema) for the file.
type XsdGoPkgHasAttr_Schema_TxsdSubmissionTypeSequenceActionsSequenceActionChoiceAddSchema_ struct {
	//	Select a source type (schema) for the file.
	Schema TxsdSubmissionTypeSequenceActionsSequenceActionChoiceModifySchema `xml:"schema,attr"`
}

type TxsdSubmissionTypeSequenceActionsSequenceActionChoiceAdd struct {
	//	Filename or relative path of filename containing XML that defines the action. This will include
	//	study, experiment, sample, run, or analysis files. Note that the run data files are named within the run XML and
	//	not in this file.
	XsdGoPkgHasAttr_Source_XsdtString_

	//	Select a source type (schema) for the file.
	XsdGoPkgHasAttr_Schema_TxsdSubmissionTypeSequenceActionsSequenceActionChoiceAddSchema_
}

//	If the WalkHandlers.TxsdSubmissionTypeSequenceActionsSequenceActionChoiceAdd function is not nil (ie. was set by outside code), calls it with this TxsdSubmissionTypeSequenceActionsSequenceActionChoiceAdd instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdSubmissionTypeSequenceActionsSequenceActionChoiceAdd instance.
func (me *TxsdSubmissionTypeSequenceActionsSequenceActionChoiceAdd) Walk() (err error) {
	if fn := WalkHandlers.TxsdSubmissionTypeSequenceActionsSequenceActionChoiceAdd; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_ADDchoiceTxsdSubmissionTypeSequenceActionsSequenceActionACTIONsequenceTxsdSubmissionTypeSequenceActionsACTIONSsequenceSubmissionTypeschema_Add_TxsdSubmissionTypeSequenceActionsSequenceActionChoiceAdd_ struct {
	//	Add a study, experiment, sample, run, or analysis to the submission session.
	Add *TxsdSubmissionTypeSequenceActionsSequenceActionChoiceAdd `xml:"ADD"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_ADDchoiceTxsdSubmissionTypeSequenceActionsSequenceActionACTIONsequenceTxsdSubmissionTypeSequenceActionsACTIONSsequenceSubmissionTypeschema_Add_TxsdSubmissionTypeSequenceActionsSequenceActionChoiceAdd_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ADDchoiceTxsdSubmissionTypeSequenceActionsSequenceActionACTIONsequenceTxsdSubmissionTypeSequenceActionsACTIONSsequenceSubmissionTypeschema_Add_TxsdSubmissionTypeSequenceActionsSequenceActionChoiceAdd_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_ADDchoiceTxsdSubmissionTypeSequenceActionsSequenceActionACTIONsequenceTxsdSubmissionTypeSequenceActionsACTIONSsequenceSubmissionTypeschema_Add_TxsdSubmissionTypeSequenceActionsSequenceActionChoiceAdd_ instance.
func (me *XsdGoPkgHasElem_ADDchoiceTxsdSubmissionTypeSequenceActionsSequenceActionACTIONsequenceTxsdSubmissionTypeSequenceActionsACTIONSsequenceSubmissionTypeschema_Add_TxsdSubmissionTypeSequenceActionsSequenceActionChoiceAdd_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_ADDchoiceTxsdSubmissionTypeSequenceActionsSequenceActionACTIONsequenceTxsdSubmissionTypeSequenceActionsACTIONSsequenceSubmissionTypeschema_Add_TxsdSubmissionTypeSequenceActionsSequenceActionChoiceAdd_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Add.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdSubmissionTypeSequenceActionsSequenceAction struct {
	//	Add a study, experiment, sample, run, or analysis to the submission session.
	XsdGoPkgHasElem_ADDchoiceTxsdSubmissionTypeSequenceActionsSequenceActionACTIONsequenceTxsdSubmissionTypeSequenceActionsACTIONSsequenceSubmissionTypeschema_Add_TxsdSubmissionTypeSequenceActionsSequenceActionChoiceAdd_

	//	Modify a study, experiment, sample, or analysis object that was submitted under this submission
	//	session.
	XsdGoPkgHasElem_MODIFYchoiceTxsdSubmissionTypeSequenceActionsSequenceActionACTIONsequenceTxsdSubmissionTypeSequenceActionsACTIONSsequenceSubmissionTypeschema_Modify_TxsdSubmissionTypeSequenceActionsSequenceActionChoiceModify_

	//	Suppress object from view, indexing, and download from public site as prescribed by INSDC rules.
	//	The object is not removed from the Archive, and can be obtained again by accession if requested. Suppression is
	//	explicit and there is no cascade suppression. User must take care to remove only objects that do not have active
	//	references.
	XsdGoPkgHasElem_SUPPRESSchoiceTxsdSubmissionTypeSequenceActionsSequenceActionACTIONsequenceTxsdSubmissionTypeSequenceActionsACTIONSsequenceSubmissionTypeschema_Suppress_TxsdSubmissionTypeSequenceActionsSequenceActionChoiceSuppress_

	//	Hold content from public view for any study, experiment, sample, run, or analysis object that was
	//	submitted under this submission session.
	XsdGoPkgHasElem_HOLDchoiceTxsdSubmissionTypeSequenceActionsSequenceActionACTIONsequenceTxsdSubmissionTypeSequenceActionsACTIONSsequenceSubmissionTypeschema_Hold_TxsdSubmissionTypeSequenceActionsSequenceActionChoiceHold_

	//	Release content to public view and indexing for any study, experiment, sample, run, or analysis
	//	object that was submitted under this submission session.
	XsdGoPkgHasElem_RELEASEchoiceTxsdSubmissionTypeSequenceActionsSequenceActionACTIONsequenceTxsdSubmissionTypeSequenceActionsACTIONSsequenceSubmissionTypeschema_Release_TxsdSubmissionTypeSequenceActionsSequenceActionChoiceRelease_

	//	Communicate the intention that the data are to be deposited in a protected database and not made
	//	public under any circumstances. This is separate from hold/release directives, which indicate the public visibility
	//	of the records.
	XsdGoPkgHasElem_PROTECTchoiceTxsdSubmissionTypeSequenceActionsSequenceActionACTIONsequenceTxsdSubmissionTypeSequenceActionsACTIONSsequenceSubmissionTypeschema_Protect_TxsdSubmissionTypeSequenceActionsSequenceActionChoiceProtect_

	//	Process the submission but do not archive anything or issue valid accessions for any object.
	XsdGoPkgHasElem_VALIDATEchoiceTxsdSubmissionTypeSequenceActionsSequenceActionACTIONsequenceTxsdSubmissionTypeSequenceActionsACTIONSsequenceSubmissionTypeschema_Validate_TxsdSubmissionTypeSequenceActionsSequenceActionChoiceValidate_
}

//	If the WalkHandlers.TxsdSubmissionTypeSequenceActionsSequenceAction function is not nil (ie. was set by outside code), calls it with this TxsdSubmissionTypeSequenceActionsSequenceAction instance as the single argument. Then calls the Walk() method on 7/7 embed(s) and 0/0 field(s) belonging to this TxsdSubmissionTypeSequenceActionsSequenceAction instance.
func (me *TxsdSubmissionTypeSequenceActionsSequenceAction) Walk() (err error) {
	if fn := WalkHandlers.TxsdSubmissionTypeSequenceActionsSequenceAction; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_SUPPRESSchoiceTxsdSubmissionTypeSequenceActionsSequenceActionACTIONsequenceTxsdSubmissionTypeSequenceActionsACTIONSsequenceSubmissionTypeschema_Suppress_TxsdSubmissionTypeSequenceActionsSequenceActionChoiceSuppress_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_HOLDchoiceTxsdSubmissionTypeSequenceActionsSequenceActionACTIONsequenceTxsdSubmissionTypeSequenceActionsACTIONSsequenceSubmissionTypeschema_Hold_TxsdSubmissionTypeSequenceActionsSequenceActionChoiceHold_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_RELEASEchoiceTxsdSubmissionTypeSequenceActionsSequenceActionACTIONsequenceTxsdSubmissionTypeSequenceActionsACTIONSsequenceSubmissionTypeschema_Release_TxsdSubmissionTypeSequenceActionsSequenceActionChoiceRelease_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_PROTECTchoiceTxsdSubmissionTypeSequenceActionsSequenceActionACTIONsequenceTxsdSubmissionTypeSequenceActionsACTIONSsequenceSubmissionTypeschema_Protect_TxsdSubmissionTypeSequenceActionsSequenceActionChoiceProtect_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_VALIDATEchoiceTxsdSubmissionTypeSequenceActionsSequenceActionACTIONsequenceTxsdSubmissionTypeSequenceActionsACTIONSsequenceSubmissionTypeschema_Validate_TxsdSubmissionTypeSequenceActionsSequenceActionChoiceValidate_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_ADDchoiceTxsdSubmissionTypeSequenceActionsSequenceActionACTIONsequenceTxsdSubmissionTypeSequenceActionsACTIONSsequenceSubmissionTypeschema_Add_TxsdSubmissionTypeSequenceActionsSequenceActionChoiceAdd_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_MODIFYchoiceTxsdSubmissionTypeSequenceActionsSequenceActionACTIONsequenceTxsdSubmissionTypeSequenceActionsACTIONSsequenceSubmissionTypeschema_Modify_TxsdSubmissionTypeSequenceActionsSequenceActionChoiceModify_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_ACTIONsequenceTxsdSubmissionTypeSequenceActionsACTIONSsequenceSubmissionTypeschema_Action_TxsdSubmissionTypeSequenceActionsSequenceAction_ struct {
	//	Select an action to execute with respect to this submission session.
	Actions []*TxsdSubmissionTypeSequenceActionsSequenceAction `xml:"ACTION"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_ACTIONsequenceTxsdSubmissionTypeSequenceActionsACTIONSsequenceSubmissionTypeschema_Action_TxsdSubmissionTypeSequenceActionsSequenceAction_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ACTIONsequenceTxsdSubmissionTypeSequenceActionsACTIONSsequenceSubmissionTypeschema_Action_TxsdSubmissionTypeSequenceActionsSequenceAction_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ACTIONsequenceTxsdSubmissionTypeSequenceActionsACTIONSsequenceSubmissionTypeschema_Action_TxsdSubmissionTypeSequenceActionsSequenceAction_ instance.
func (me *XsdGoPkgHasElems_ACTIONsequenceTxsdSubmissionTypeSequenceActionsACTIONSsequenceSubmissionTypeschema_Action_TxsdSubmissionTypeSequenceActionsSequenceAction_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_ACTIONsequenceTxsdSubmissionTypeSequenceActionsACTIONSsequenceSubmissionTypeschema_Action_TxsdSubmissionTypeSequenceActionsSequenceAction_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Actions {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdSubmissionTypeSequenceActions struct {
	//	Select an action to execute with respect to this submission session.
	XsdGoPkgHasElems_ACTIONsequenceTxsdSubmissionTypeSequenceActionsACTIONSsequenceSubmissionTypeschema_Action_TxsdSubmissionTypeSequenceActionsSequenceAction_
}

//	If the WalkHandlers.TxsdSubmissionTypeSequenceActions function is not nil (ie. was set by outside code), calls it with this TxsdSubmissionTypeSequenceActions instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this TxsdSubmissionTypeSequenceActions instance.
func (me *TxsdSubmissionTypeSequenceActions) Walk() (err error) {
	if fn := WalkHandlers.TxsdSubmissionTypeSequenceActions; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_ACTIONsequenceTxsdSubmissionTypeSequenceActionsACTIONSsequenceSubmissionTypeschema_Action_TxsdSubmissionTypeSequenceActionsSequenceAction_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_ACTIONSsequenceSubmissionTypeschema_Actions_TxsdSubmissionTypeSequenceActions_ struct {
	Actions *TxsdSubmissionTypeSequenceActions `xml:"ACTIONS"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_ACTIONSsequenceSubmissionTypeschema_Actions_TxsdSubmissionTypeSequenceActions_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ACTIONSsequenceSubmissionTypeschema_Actions_TxsdSubmissionTypeSequenceActions_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_ACTIONSsequenceSubmissionTypeschema_Actions_TxsdSubmissionTypeSequenceActions_ instance.
func (me *XsdGoPkgHasElem_ACTIONSsequenceSubmissionTypeschema_Actions_TxsdSubmissionTypeSequenceActions_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_ACTIONSsequenceSubmissionTypeschema_Actions_TxsdSubmissionTypeSequenceActions_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Actions.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Submitter assigned comment.
type XsdGoPkgHasAttr_SubmissionComment_XsdtString_ struct {
	//	Submitter assigned comment.
	SubmissionComment xsdt.String `xml:"submission_comment,attr"`
}

//	Laboratory name within submitting institution.
type XsdGoPkgHasAttr_LabName_XsdtString_ struct {
	//	Laboratory name within submitting institution.
	LabName xsdt.String `xml:"lab_name,attr"`
}

//	List of primary and alternate identifiers including those records replacing or replaced by this record.
//	Set of record identifiers.
//	primary accession of the record in one of INSDC SRA archives.
//	Alternative/explanatory description of the same object/identifier.
type XsdGoPkgHasAttr_Label_XsdtString_ struct {
	//	Alternative/explanatory description of the same object/identifier.
	Label xsdt.String `xml:"label,attr"`
}

type TNameAndLabelType struct {
	XsdtString

	//	Alternative/explanatory description of the same object/identifier.
	XsdGoPkgHasAttr_Label_XsdtString_
}

//	If the WalkHandlers.TNameAndLabelType function is not nil (ie. was set by outside code), calls it with this TNameAndLabelType instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TNameAndLabelType instance.
func (me *TNameAndLabelType) Walk() (err error) {
	if fn := WalkHandlers.TNameAndLabelType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_PrimaryIDsequenceIdentifierTypeschema_PrimaryId_TNameAndLabelType_ struct {
	//	primary accession of the record in one of INSDC SRA archives.
	PrimaryId *TNameAndLabelType `xml:"PRIMARY_ID"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_PrimaryIDsequenceIdentifierTypeschema_PrimaryId_TNameAndLabelType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_PrimaryIDsequenceIdentifierTypeschema_PrimaryId_TNameAndLabelType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_PrimaryIDsequenceIdentifierTypeschema_PrimaryId_TNameAndLabelType_ instance.
func (me *XsdGoPkgHasElem_PrimaryIDsequenceIdentifierTypeschema_PrimaryId_TNameAndLabelType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_PrimaryIDsequenceIdentifierTypeschema_PrimaryId_TNameAndLabelType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.PrimaryId.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	A secondary or defunct primary key in an INSDC primary data database.
type XsdGoPkgHasElems_SecondaryIDsequenceIdentifierTypeschema_SecondaryId_TNameAndLabelType_ struct {
	//	A secondary or defunct primary key in an INSDC primary data database.
	SecondaryIds []*TNameAndLabelType `xml:"SECONDARY_ID"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_SecondaryIDsequenceIdentifierTypeschema_SecondaryId_TNameAndLabelType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_SecondaryIDsequenceIdentifierTypeschema_SecondaryId_TNameAndLabelType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_SecondaryIDsequenceIdentifierTypeschema_SecondaryId_TNameAndLabelType_ instance.
func (me *XsdGoPkgHasElems_SecondaryIDsequenceIdentifierTypeschema_SecondaryId_TNameAndLabelType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_SecondaryIDsequenceIdentifierTypeschema_SecondaryId_TNameAndLabelType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.SecondaryIds {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	An identifier from a public non-SRA resource. @namespace would be an official short name of that
//	resource.
//	A string value that constrains the domain of named identifiers (namespace).
type XsdGoPkgHasAttr_Namespace_XsdtString_ struct {
	//	A string value that constrains the domain of named identifiers (namespace).
	Namespace xsdt.String `xml:"namespace,attr"`
}

type TQualifiedNameType struct {
	TNameAndLabelType

	//	A string value that constrains the domain of named identifiers (namespace).
	XsdGoPkgHasAttr_Namespace_XsdtString_
}

//	If the WalkHandlers.TQualifiedNameType function is not nil (ie. was set by outside code), calls it with this TQualifiedNameType instance as the single argument. Then calls the Walk() method on 1/2 embed(s) and 0/0 field(s) belonging to this TQualifiedNameType instance.
func (me *TQualifiedNameType) Walk() (err error) {
	if fn := WalkHandlers.TQualifiedNameType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TNameAndLabelType.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_ExternalIDsequenceIdentifierTypeschema_ExternalId_TQualifiedNameType_ struct {
	//	An identifier from a public non-SRA resource. @namespace would be an official short name of that
	//	resource.
	ExternalIds []*TQualifiedNameType `xml:"EXTERNAL_ID"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_ExternalIDsequenceIdentifierTypeschema_ExternalId_TQualifiedNameType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ExternalIDsequenceIdentifierTypeschema_ExternalId_TQualifiedNameType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ExternalIDsequenceIdentifierTypeschema_ExternalId_TQualifiedNameType_ instance.
func (me *XsdGoPkgHasElems_ExternalIDsequenceIdentifierTypeschema_ExternalId_TQualifiedNameType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_ExternalIDsequenceIdentifierTypeschema_ExternalId_TQualifiedNameType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.ExternalIds {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	A submitter provided identifier of the (new) record. used in submisison process and replaced by primary archive
//	id on successfull load. @namespace is optional and may refer to submitter private database or LIMS
//	identifier.
type XsdGoPkgHasElems_SubmitterIDsequenceIdentifierTypeschema_SubmitterId_TQualifiedNameType_ struct {
	//	A submitter provided identifier of the (new) record. used in submisison process and replaced by primary archive
	//	id on successfull load. @namespace is optional and may refer to submitter private database or LIMS
	//	identifier.
	SubmitterIds []*TQualifiedNameType `xml:"SUBMITTER_ID"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_SubmitterIDsequenceIdentifierTypeschema_SubmitterId_TQualifiedNameType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_SubmitterIDsequenceIdentifierTypeschema_SubmitterId_TQualifiedNameType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_SubmitterIDsequenceIdentifierTypeschema_SubmitterId_TQualifiedNameType_ instance.
func (me *XsdGoPkgHasElems_SubmitterIDsequenceIdentifierTypeschema_SubmitterId_TQualifiedNameType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_SubmitterIDsequenceIdentifierTypeschema_SubmitterId_TQualifiedNameType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.SubmitterIds {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	A universally unique identifier that requires no namespace.
type XsdGoPkgHasElems_UUIDsequenceIdentifierTypeschema_Uuid_TNameAndLabelType_ struct {
	//	A universally unique identifier that requires no namespace.
	Uuids []*TNameAndLabelType `xml:"UUID"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_UUIDsequenceIdentifierTypeschema_Uuid_TNameAndLabelType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_UUIDsequenceIdentifierTypeschema_Uuid_TNameAndLabelType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_UUIDsequenceIdentifierTypeschema_Uuid_TNameAndLabelType_ instance.
func (me *XsdGoPkgHasElems_UUIDsequenceIdentifierTypeschema_Uuid_TNameAndLabelType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_UUIDsequenceIdentifierTypeschema_Uuid_TNameAndLabelType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Uuids {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TIdentifierType struct {
	//	An identifier from a public non-SRA resource. @namespace would be an official short name of that
	//	resource.
	XsdGoPkgHasElems_ExternalIDsequenceIdentifierTypeschema_ExternalId_TQualifiedNameType_

	//	A submitter provided identifier of the (new) record. used in submisison process and replaced by primary archive
	//	id on successfull load. @namespace is optional and may refer to submitter private database or LIMS
	//	identifier.
	XsdGoPkgHasElems_SubmitterIDsequenceIdentifierTypeschema_SubmitterId_TQualifiedNameType_

	//	A universally unique identifier that requires no namespace.
	XsdGoPkgHasElems_UUIDsequenceIdentifierTypeschema_Uuid_TNameAndLabelType_

	//	primary accession of the record in one of INSDC SRA archives.
	XsdGoPkgHasElem_PrimaryIDsequenceIdentifierTypeschema_PrimaryId_TNameAndLabelType_

	//	A secondary or defunct primary key in an INSDC primary data database.
	XsdGoPkgHasElems_SecondaryIDsequenceIdentifierTypeschema_SecondaryId_TNameAndLabelType_
}

//	If the WalkHandlers.TIdentifierType function is not nil (ie. was set by outside code), calls it with this TIdentifierType instance as the single argument. Then calls the Walk() method on 5/5 embed(s) and 0/0 field(s) belonging to this TIdentifierType instance.
func (me *TIdentifierType) Walk() (err error) {
	if fn := WalkHandlers.TIdentifierType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_SubmitterIDsequenceIdentifierTypeschema_SubmitterId_TQualifiedNameType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_UUIDsequenceIdentifierTypeschema_Uuid_TNameAndLabelType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_PrimaryIDsequenceIdentifierTypeschema_PrimaryId_TNameAndLabelType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_SecondaryIDsequenceIdentifierTypeschema_SecondaryId_TNameAndLabelType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_ExternalIDsequenceIdentifierTypeschema_ExternalId_TQualifiedNameType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_IDENTIFIERSsequenceSubmissionTypeschema_Identifiers_TIdentifierType_ struct {
	//	List of primary and alternate identifiers including those records replacing or replaced by this record.
	Identifiers *TIdentifierType `xml:"IDENTIFIERS"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_IDENTIFIERSsequenceSubmissionTypeschema_Identifiers_TIdentifierType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_IDENTIFIERSsequenceSubmissionTypeschema_Identifiers_TIdentifierType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_IDENTIFIERSsequenceSubmissionTypeschema_Identifiers_TIdentifierType_ instance.
func (me *XsdGoPkgHasElem_IDENTIFIERSsequenceSubmissionTypeschema_Identifiers_TIdentifierType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_IDENTIFIERSsequenceSubmissionTypeschema_Identifiers_TIdentifierType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Identifiers.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Archive created links to associated submissions.
//	Reusable external links type to encode URL links, Entrez links, and db_xref links.
//	Text label to display for the link.
type XsdGoPkgHasElem_LABELallURLLINKchoiceLinkTypeschema_Label_XsdtString_ struct {
	//	Text label to display for the link.
	Label xsdt.String `xml:"LABEL"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_LABELallURLLINKchoiceLinkTypeschema_Label_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_LABELallURLLINKchoiceLinkTypeschema_Label_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_LABELallURLLINKchoiceLinkTypeschema_Label_XsdtString_ instance.
func (me *XsdGoPkgHasElem_LABELallURLLINKchoiceLinkTypeschema_Label_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_LABELallURLLINKchoiceLinkTypeschema_Label_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The internet service link (file:, http:, ftp:, etc).
type XsdGoPkgHasElem_URLallURLLINKchoiceLinkTypeschema_Url_XsdtAnyURI_ struct {
	//	The internet service link (file:, http:, ftp:, etc).
	Url xsdt.AnyURI `xml:"URL"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_URLallURLLINKchoiceLinkTypeschema_Url_XsdtAnyURI_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_URLallURLLINKchoiceLinkTypeschema_Url_XsdtAnyURI_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_URLallURLLINKchoiceLinkTypeschema_Url_XsdtAnyURI_ instance.
func (me *XsdGoPkgHasElem_URLallURLLINKchoiceLinkTypeschema_Url_XsdtAnyURI_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_URLallURLLINKchoiceLinkTypeschema_Url_XsdtAnyURI_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdLinkTypeChoiceUrlLink struct {
	//	Text label to display for the link.
	XsdGoPkgHasElem_LABELallURLLINKchoiceLinkTypeschema_Label_XsdtString_

	//	The internet service link (file:, http:, ftp:, etc).
	XsdGoPkgHasElem_URLallURLLINKchoiceLinkTypeschema_Url_XsdtAnyURI_
}

//	If the WalkHandlers.TxsdLinkTypeChoiceUrlLink function is not nil (ie. was set by outside code), calls it with this TxsdLinkTypeChoiceUrlLink instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TxsdLinkTypeChoiceUrlLink instance.
func (me *TxsdLinkTypeChoiceUrlLink) Walk() (err error) {
	if fn := WalkHandlers.TxsdLinkTypeChoiceUrlLink; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_LABELallURLLINKchoiceLinkTypeschema_Label_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_URLallURLLINKchoiceLinkTypeschema_Url_XsdtAnyURI_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_UrlLINKchoiceLinkTypeschema_UrlLink_TxsdLinkTypeChoiceUrlLink_ struct {
	UrlLink *TxsdLinkTypeChoiceUrlLink `xml:"URL_LINK"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_UrlLINKchoiceLinkTypeschema_UrlLink_TxsdLinkTypeChoiceUrlLink_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_UrlLINKchoiceLinkTypeschema_UrlLink_TxsdLinkTypeChoiceUrlLink_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_UrlLINKchoiceLinkTypeschema_UrlLink_TxsdLinkTypeChoiceUrlLink_ instance.
func (me *XsdGoPkgHasElem_UrlLINKchoiceLinkTypeschema_UrlLink_TxsdLinkTypeChoiceUrlLink_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_UrlLINKchoiceLinkTypeschema_UrlLink_TxsdLinkTypeChoiceUrlLink_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.UrlLink.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	INSDC controlled vocabulary of permitted cross references. Please see http://www.insdc.org/db_xref.html . For
//	example, FLYBASE.
type XsdGoPkgHasElem_DBallXRefTypeschema_Db_XsdtString_ struct {
	//	INSDC controlled vocabulary of permitted cross references. Please see http://www.insdc.org/db_xref.html . For
	//	example, FLYBASE.
	Db xsdt.String `xml:"DB"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_DBallXRefTypeschema_Db_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_DBallXRefTypeschema_Db_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_DBallXRefTypeschema_Db_XsdtString_ instance.
func (me *XsdGoPkgHasElem_DBallXRefTypeschema_Db_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_DBallXRefTypeschema_Db_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Accession in the referenced database. For example, FBtr0080008 (in FLYBASE).
type XsdGoPkgHasElem_IDallXRefTypeschema_Id_XsdtString_ struct {
	//	Accession in the referenced database. For example, FBtr0080008 (in FLYBASE).
	Id xsdt.String `xml:"ID"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_IDallXRefTypeschema_Id_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_IDallXRefTypeschema_Id_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_IDallXRefTypeschema_Id_XsdtString_ instance.
func (me *XsdGoPkgHasElem_IDallXRefTypeschema_Id_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_IDallXRefTypeschema_Id_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TXRefType struct {
	//	INSDC controlled vocabulary of permitted cross references. Please see http://www.insdc.org/db_xref.html . For
	//	example, FLYBASE.
	XsdGoPkgHasElem_DBallXRefTypeschema_Db_XsdtString_

	//	Accession in the referenced database. For example, FBtr0080008 (in FLYBASE).
	XsdGoPkgHasElem_IDallXRefTypeschema_Id_XsdtString_

	//	Text label to display for the link.
	XsdGoPkgHasElem_LABELallURLLINKchoiceLinkTypeschema_Label_XsdtString_
}

//	If the WalkHandlers.TXRefType function is not nil (ie. was set by outside code), calls it with this TXRefType instance as the single argument. Then calls the Walk() method on 3/3 embed(s) and 0/0 field(s) belonging to this TXRefType instance.
func (me *TXRefType) Walk() (err error) {
	if fn := WalkHandlers.TXRefType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_DBallXRefTypeschema_Db_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_IDallXRefTypeschema_Id_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_LABELallURLLINKchoiceLinkTypeschema_Label_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_XrefLINKchoiceLinkTypeschema_XrefLink_TXRefType_ struct {
	XrefLink *TXRefType `xml:"XREF_LINK"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_XrefLINKchoiceLinkTypeschema_XrefLink_TXRefType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_XrefLINKchoiceLinkTypeschema_XrefLink_TXRefType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_XrefLINKchoiceLinkTypeschema_XrefLink_TXRefType_ instance.
func (me *XsdGoPkgHasElem_XrefLINKchoiceLinkTypeschema_XrefLink_TXRefType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_XrefLINKchoiceLinkTypeschema_XrefLink_TXRefType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XrefLink.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Numeric record id meaningful to the NCBI Entrez system.
type XsdGoPkgHasElem_IDchoicesequenceENTREZLINKchoiceLinkTypeschema_Id_XsdtNonNegativeInteger_ struct {
	//	Numeric record id meaningful to the NCBI Entrez system.
	Id *xsdt.NonNegativeInteger `xml:"ID"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_IDchoicesequenceENTREZLINKchoiceLinkTypeschema_Id_XsdtNonNegativeInteger_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_IDchoicesequenceENTREZLINKchoiceLinkTypeschema_Id_XsdtNonNegativeInteger_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_IDchoicesequenceENTREZLINKchoiceLinkTypeschema_Id_XsdtNonNegativeInteger_ instance.
func (me *XsdGoPkgHasElem_IDchoicesequenceENTREZLINKchoiceLinkTypeschema_Id_XsdtNonNegativeInteger_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_IDchoicesequenceENTREZLINKchoiceLinkTypeschema_Id_XsdtNonNegativeInteger_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Accession string meaningful to the NCBI Entrez system.
type XsdGoPkgHasElem_QUERYchoicesequenceENTREZLINKchoiceLinkTypeschema_Query_XsdtString_ struct {
	//	Accession string meaningful to the NCBI Entrez system.
	Query xsdt.String `xml:"QUERY"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_QUERYchoicesequenceENTREZLINKchoiceLinkTypeschema_Query_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_QUERYchoicesequenceENTREZLINKchoiceLinkTypeschema_Query_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_QUERYchoicesequenceENTREZLINKchoiceLinkTypeschema_Query_XsdtString_ instance.
func (me *XsdGoPkgHasElem_QUERYchoicesequenceENTREZLINKchoiceLinkTypeschema_Query_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_QUERYchoicesequenceENTREZLINKchoiceLinkTypeschema_Query_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdLinkTypeChoiceEntrezLink struct {
	//	Numeric record id meaningful to the NCBI Entrez system.
	XsdGoPkgHasElem_IDchoicesequenceENTREZLINKchoiceLinkTypeschema_Id_XsdtNonNegativeInteger_

	//	Accession string meaningful to the NCBI Entrez system.
	XsdGoPkgHasElem_QUERYchoicesequenceENTREZLINKchoiceLinkTypeschema_Query_XsdtString_

	//	NCBI controlled vocabulary of permitted cross references. Please see
	//	http://www.ncbi.nlm.nih.gov/entrez/eutils/einfo.fcgi? .
	XsdGoPkgHasElem_DBallXRefTypeschema_Db_XsdtString_

	//	How to label the link.
	XsdGoPkgHasElem_LABELallURLLINKchoiceLinkTypeschema_Label_XsdtString_
}

//	If the WalkHandlers.TxsdLinkTypeChoiceEntrezLink function is not nil (ie. was set by outside code), calls it with this TxsdLinkTypeChoiceEntrezLink instance as the single argument. Then calls the Walk() method on 4/4 embed(s) and 0/0 field(s) belonging to this TxsdLinkTypeChoiceEntrezLink instance.
func (me *TxsdLinkTypeChoiceEntrezLink) Walk() (err error) {
	if fn := WalkHandlers.TxsdLinkTypeChoiceEntrezLink; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_IDchoicesequenceENTREZLINKchoiceLinkTypeschema_Id_XsdtNonNegativeInteger_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_QUERYchoicesequenceENTREZLINKchoiceLinkTypeschema_Query_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_DBallXRefTypeschema_Db_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_LABELallURLLINKchoiceLinkTypeschema_Label_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_EntrezLINKchoiceLinkTypeschema_EntrezLink_TxsdLinkTypeChoiceEntrezLink_ struct {
	EntrezLink *TxsdLinkTypeChoiceEntrezLink `xml:"ENTREZ_LINK"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_EntrezLINKchoiceLinkTypeschema_EntrezLink_TxsdLinkTypeChoiceEntrezLink_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_EntrezLINKchoiceLinkTypeschema_EntrezLink_TxsdLinkTypeChoiceEntrezLink_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_EntrezLINKchoiceLinkTypeschema_EntrezLink_TxsdLinkTypeChoiceEntrezLink_ instance.
func (me *XsdGoPkgHasElem_EntrezLINKchoiceLinkTypeschema_EntrezLink_TxsdLinkTypeChoiceEntrezLink_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_EntrezLINKchoiceLinkTypeschema_EntrezLink_TxsdLinkTypeChoiceEntrezLink_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.EntrezLink.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TLinkType struct {
	XsdGoPkgHasElem_UrlLINKchoiceLinkTypeschema_UrlLink_TxsdLinkTypeChoiceUrlLink_

	XsdGoPkgHasElem_XrefLINKchoiceLinkTypeschema_XrefLink_TXRefType_

	XsdGoPkgHasElem_EntrezLINKchoiceLinkTypeschema_EntrezLink_TxsdLinkTypeChoiceEntrezLink_
}

//	If the WalkHandlers.TLinkType function is not nil (ie. was set by outside code), calls it with this TLinkType instance as the single argument. Then calls the Walk() method on 3/3 embed(s) and 0/0 field(s) belonging to this TLinkType instance.
func (me *TLinkType) Walk() (err error) {
	if fn := WalkHandlers.TLinkType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_EntrezLINKchoiceLinkTypeschema_EntrezLink_TxsdLinkTypeChoiceEntrezLink_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_UrlLINKchoiceLinkTypeschema_UrlLink_TxsdLinkTypeChoiceUrlLink_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_XrefLINKchoiceLinkTypeschema_XrefLink_TXRefType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_SubmissionLINKsequenceTxsdSubmissionTypeSequenceSubmissionLinksSUBMISSIONLINKSsequenceSubmissionTypeschema_SubmissionLink_TLinkType_ struct {
	SubmissionLinks []*TLinkType `xml:"SUBMISSION_LINK"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_SubmissionLINKsequenceTxsdSubmissionTypeSequenceSubmissionLinksSUBMISSIONLINKSsequenceSubmissionTypeschema_SubmissionLink_TLinkType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_SubmissionLINKsequenceTxsdSubmissionTypeSequenceSubmissionLinksSUBMISSIONLINKSsequenceSubmissionTypeschema_SubmissionLink_TLinkType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_SubmissionLINKsequenceTxsdSubmissionTypeSequenceSubmissionLinksSUBMISSIONLINKSsequenceSubmissionTypeschema_SubmissionLink_TLinkType_ instance.
func (me *XsdGoPkgHasElems_SubmissionLINKsequenceTxsdSubmissionTypeSequenceSubmissionLinksSUBMISSIONLINKSsequenceSubmissionTypeschema_SubmissionLink_TLinkType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_SubmissionLINKsequenceTxsdSubmissionTypeSequenceSubmissionLinksSUBMISSIONLINKSsequenceSubmissionTypeschema_SubmissionLink_TLinkType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.SubmissionLinks {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdSubmissionTypeSequenceSubmissionLinks struct {
	XsdGoPkgHasElems_SubmissionLINKsequenceTxsdSubmissionTypeSequenceSubmissionLinksSUBMISSIONLINKSsequenceSubmissionTypeschema_SubmissionLink_TLinkType_
}

//	If the WalkHandlers.TxsdSubmissionTypeSequenceSubmissionLinks function is not nil (ie. was set by outside code), calls it with this TxsdSubmissionTypeSequenceSubmissionLinks instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this TxsdSubmissionTypeSequenceSubmissionLinks instance.
func (me *TxsdSubmissionTypeSequenceSubmissionLinks) Walk() (err error) {
	if fn := WalkHandlers.TxsdSubmissionTypeSequenceSubmissionLinks; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_SubmissionLINKsequenceTxsdSubmissionTypeSequenceSubmissionLinksSUBMISSIONLINKSsequenceSubmissionTypeschema_SubmissionLink_TLinkType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_SubmissionLINKSsequenceSubmissionTypeschema_SubmissionLinks_TxsdSubmissionTypeSequenceSubmissionLinks_ struct {
	//	Archive created links to associated submissions.
	SubmissionLinks *TxsdSubmissionTypeSequenceSubmissionLinks `xml:"SUBMISSION_LINKS"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_SubmissionLINKSsequenceSubmissionTypeschema_SubmissionLinks_TxsdSubmissionTypeSequenceSubmissionLinks_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_SubmissionLINKSsequenceSubmissionTypeschema_SubmissionLinks_TxsdSubmissionTypeSequenceSubmissionLinks_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_SubmissionLINKSsequenceSubmissionTypeschema_SubmissionLinks_TxsdSubmissionTypeSequenceSubmissionLinks_ instance.
func (me *XsdGoPkgHasElem_SubmissionLINKSsequenceSubmissionTypeschema_SubmissionLinks_TxsdSubmissionTypeSequenceSubmissionLinks_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_SubmissionLINKSsequenceSubmissionTypeschema_SubmissionLinks_TxsdSubmissionTypeSequenceSubmissionLinks_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.SubmissionLinks.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Archive assigned properties and attributes of a SUBMISSION.
//	Reusable attributes to encode tag-value pairs with optional units.
//	Name of the attribute.
type XsdGoPkgHasElem_TAGallAttributeTypeschema_Tag_XsdtString_ struct {
	//	Name of the attribute.
	Tag xsdt.String `xml:"TAG"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_TAGallAttributeTypeschema_Tag_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_TAGallAttributeTypeschema_Tag_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_TAGallAttributeTypeschema_Tag_XsdtString_ instance.
func (me *XsdGoPkgHasElem_TAGallAttributeTypeschema_Tag_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_TAGallAttributeTypeschema_Tag_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Value of the attribute.
type XsdGoPkgHasElem_VALUEallAttributeTypeschema_Value_XsdtString_ struct {
	//	Value of the attribute.
	Value xsdt.String `xml:"VALUE"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_VALUEallAttributeTypeschema_Value_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_VALUEallAttributeTypeschema_Value_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_VALUEallAttributeTypeschema_Value_XsdtString_ instance.
func (me *XsdGoPkgHasElem_VALUEallAttributeTypeschema_Value_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_VALUEallAttributeTypeschema_Value_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Optional scientific units.
type XsdGoPkgHasElem_UNITSallAttributeTypeschema_Units_XsdtString_ struct {
	//	Optional scientific units.
	Units xsdt.String `xml:"UNITS"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_UNITSallAttributeTypeschema_Units_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_UNITSallAttributeTypeschema_Units_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_UNITSallAttributeTypeschema_Units_XsdtString_ instance.
func (me *XsdGoPkgHasElem_UNITSallAttributeTypeschema_Units_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_UNITSallAttributeTypeschema_Units_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TAttributeType struct {
	//	Name of the attribute.
	XsdGoPkgHasElem_TAGallAttributeTypeschema_Tag_XsdtString_

	//	Value of the attribute.
	XsdGoPkgHasElem_VALUEallAttributeTypeschema_Value_XsdtString_

	//	Optional scientific units.
	XsdGoPkgHasElem_UNITSallAttributeTypeschema_Units_XsdtString_
}

//	If the WalkHandlers.TAttributeType function is not nil (ie. was set by outside code), calls it with this TAttributeType instance as the single argument. Then calls the Walk() method on 3/3 embed(s) and 0/0 field(s) belonging to this TAttributeType instance.
func (me *TAttributeType) Walk() (err error) {
	if fn := WalkHandlers.TAttributeType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_TAGallAttributeTypeschema_Tag_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_VALUEallAttributeTypeschema_Value_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_UNITSallAttributeTypeschema_Units_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_SubmissionATTRIBUTEsequenceTxsdSubmissionTypeSequenceSubmissionAttributesSUBMISSIONATTRIBUTESsequenceSubmissionTypeschema_SubmissionAttribute_TAttributeType_ struct {
	SubmissionAttributes []*TAttributeType `xml:"SUBMISSION_ATTRIBUTE"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_SubmissionATTRIBUTEsequenceTxsdSubmissionTypeSequenceSubmissionAttributesSUBMISSIONATTRIBUTESsequenceSubmissionTypeschema_SubmissionAttribute_TAttributeType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_SubmissionATTRIBUTEsequenceTxsdSubmissionTypeSequenceSubmissionAttributesSUBMISSIONATTRIBUTESsequenceSubmissionTypeschema_SubmissionAttribute_TAttributeType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_SubmissionATTRIBUTEsequenceTxsdSubmissionTypeSequenceSubmissionAttributesSUBMISSIONATTRIBUTESsequenceSubmissionTypeschema_SubmissionAttribute_TAttributeType_ instance.
func (me *XsdGoPkgHasElems_SubmissionATTRIBUTEsequenceTxsdSubmissionTypeSequenceSubmissionAttributesSUBMISSIONATTRIBUTESsequenceSubmissionTypeschema_SubmissionAttribute_TAttributeType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_SubmissionATTRIBUTEsequenceTxsdSubmissionTypeSequenceSubmissionAttributesSUBMISSIONATTRIBUTESsequenceSubmissionTypeschema_SubmissionAttribute_TAttributeType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.SubmissionAttributes {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdSubmissionTypeSequenceSubmissionAttributes struct {
	XsdGoPkgHasElems_SubmissionATTRIBUTEsequenceTxsdSubmissionTypeSequenceSubmissionAttributesSUBMISSIONATTRIBUTESsequenceSubmissionTypeschema_SubmissionAttribute_TAttributeType_
}

//	If the WalkHandlers.TxsdSubmissionTypeSequenceSubmissionAttributes function is not nil (ie. was set by outside code), calls it with this TxsdSubmissionTypeSequenceSubmissionAttributes instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this TxsdSubmissionTypeSequenceSubmissionAttributes instance.
func (me *TxsdSubmissionTypeSequenceSubmissionAttributes) Walk() (err error) {
	if fn := WalkHandlers.TxsdSubmissionTypeSequenceSubmissionAttributes; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_SubmissionATTRIBUTEsequenceTxsdSubmissionTypeSequenceSubmissionAttributesSUBMISSIONATTRIBUTESsequenceSubmissionTypeschema_SubmissionAttribute_TAttributeType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_SubmissionATTRIBUTESsequenceSubmissionTypeschema_SubmissionAttributes_TxsdSubmissionTypeSequenceSubmissionAttributes_ struct {
	//	Archive assigned properties and attributes of a SUBMISSION.
	SubmissionAttributes *TxsdSubmissionTypeSequenceSubmissionAttributes `xml:"SUBMISSION_ATTRIBUTES"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_SubmissionATTRIBUTESsequenceSubmissionTypeschema_SubmissionAttributes_TxsdSubmissionTypeSequenceSubmissionAttributes_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_SubmissionATTRIBUTESsequenceSubmissionTypeschema_SubmissionAttributes_TxsdSubmissionTypeSequenceSubmissionAttributes_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_SubmissionATTRIBUTESsequenceSubmissionTypeschema_SubmissionAttributes_TxsdSubmissionTypeSequenceSubmissionAttributes_ instance.
func (me *XsdGoPkgHasElem_SubmissionATTRIBUTESsequenceSubmissionTypeschema_SubmissionAttributes_TxsdSubmissionTypeSequenceSubmissionAttributes_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_SubmissionATTRIBUTESsequenceSubmissionTypeschema_SubmissionAttributes_TxsdSubmissionTypeSequenceSubmissionAttributes_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.SubmissionAttributes.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Submitter assigned preparation date of this submission object.
type XsdGoPkgHasAttr_SubmissionDate_XsdtDateTime_ struct {
	//	Submitter assigned preparation date of this submission object.
	SubmissionDate xsdt.DateTime `xml:"submission_date,attr"`
}

type TSubmissionType struct {
	XsdGoPkgHasElem_CONTACTSsequenceSubmissionTypeschema_Contacts_TxsdSubmissionTypeSequenceContacts_

	XsdGoPkgHasElem_ACTIONSsequenceSubmissionTypeschema_Actions_TxsdSubmissionTypeSequenceActions_

	//	Submitter assigned comment.
	XsdGoPkgHasAttr_SubmissionComment_XsdtString_

	//	Laboratory name within submitting institution.
	XsdGoPkgHasAttr_LabName_XsdtString_

	//	Short text that can be used to call out submission records in searches or in displays. This element is strictly
	//	optional and is useful mainly to submitters who wish to reference their submission, rather than underlying study or experiment.
	XsdGoPkgHasElem_TITLEsequenceSubmissionTypeschema_Title_XsdtString_

	//	Archive created links to associated submissions.
	XsdGoPkgHasElem_SubmissionLINKSsequenceSubmissionTypeschema_SubmissionLinks_TxsdSubmissionTypeSequenceSubmissionLinks_

	//	Archive assigned properties and attributes of a SUBMISSION.
	XsdGoPkgHasElem_SubmissionATTRIBUTESsequenceSubmissionTypeschema_SubmissionAttributes_TxsdSubmissionTypeSequenceSubmissionAttributes_

	XsdGoPkgHasAtts_NameGroup

	//	Submitter assigned preparation date of this submission object.
	XsdGoPkgHasAttr_SubmissionDate_XsdtDateTime_

	//	List of primary and alternate identifiers including those records replacing or replaced by this record.
	XsdGoPkgHasElem_IDENTIFIERSsequenceSubmissionTypeschema_Identifiers_TIdentifierType_
}

//	If the WalkHandlers.TSubmissionType function is not nil (ie. was set by outside code), calls it with this TSubmissionType instance as the single argument. Then calls the Walk() method on 6/10 embed(s) and 0/0 field(s) belonging to this TSubmissionType instance.
func (me *TSubmissionType) Walk() (err error) {
	if fn := WalkHandlers.TSubmissionType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_TITLEsequenceSubmissionTypeschema_Title_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_CONTACTSsequenceSubmissionTypeschema_Contacts_TxsdSubmissionTypeSequenceContacts_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_ACTIONSsequenceSubmissionTypeschema_Actions_TxsdSubmissionTypeSequenceActions_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_IDENTIFIERSsequenceSubmissionTypeschema_Identifiers_TIdentifierType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_SubmissionLINKSsequenceSubmissionTypeschema_SubmissionLinks_TxsdSubmissionTypeSequenceSubmissionLinks_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_SubmissionATTRIBUTESsequenceSubmissionTypeschema_SubmissionAttributes_TxsdSubmissionTypeSequenceSubmissionAttributes_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_SUBMISSIONsequenceSubmissionSetTypeschema_Submission_TSubmissionType_ struct {
	Submissions []*TSubmissionType `xml:"SUBMISSION"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_SUBMISSIONsequenceSubmissionSetTypeschema_Submission_TSubmissionType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_SUBMISSIONsequenceSubmissionSetTypeschema_Submission_TSubmissionType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_SUBMISSIONsequenceSubmissionSetTypeschema_Submission_TSubmissionType_ instance.
func (me *XsdGoPkgHasElems_SUBMISSIONsequenceSubmissionSetTypeschema_Submission_TSubmissionType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_SUBMISSIONsequenceSubmissionSetTypeschema_Submission_TSubmissionType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Submissions {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TSubmissionSetType struct {
	XsdGoPkgHasElems_SUBMISSIONsequenceSubmissionSetTypeschema_Submission_TSubmissionType_
}

//	If the WalkHandlers.TSubmissionSetType function is not nil (ie. was set by outside code), calls it with this TSubmissionSetType instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this TSubmissionSetType instance.
func (me *TSubmissionSetType) Walk() (err error) {
	if fn := WalkHandlers.TSubmissionSetType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_SUBMISSIONsequenceSubmissionSetTypeschema_Submission_TSubmissionType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_SubmissionSet struct {
	//	An SUBMISSION_SET is a container for a set of studies and a common namespace.
	SubmissionSet *TSubmissionSetType `xml:"SUBMISSION_SET"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_SubmissionSet function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_SubmissionSet instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_SubmissionSet instance.
func (me *XsdGoPkgHasElem_SubmissionSet) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_SubmissionSet; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.SubmissionSet.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	An SUBMISSION_SET is a container for a set of studies and a common namespace.
type XsdGoPkgHasElems_SubmissionSet struct {
	//	An SUBMISSION_SET is a container for a set of studies and a common namespace.
	SubmissionSets []*TSubmissionSetType `xml:"SUBMISSION_SET"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_SubmissionSet function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_SubmissionSet instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_SubmissionSet instance.
func (me *XsdGoPkgHasElems_SubmissionSet) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_SubmissionSet; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.SubmissionSets {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Submission struct {
	Submission *TSubmissionType `xml:"SUBMISSION"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Submission function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Submission instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Submission instance.
func (me *XsdGoPkgHasElem_Submission) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Submission; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Submission.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdPlatformTypeChoiceOxfordNanoporeSequenceInstrumentModel xsdt.String

//	Since TxsdPlatformTypeChoiceOxfordNanoporeSequenceInstrumentModel is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdPlatformTypeChoiceOxfordNanoporeSequenceInstrumentModel) Set(s string) {
	(*xsdt.String)(me).Set(s)
}

//	Since TxsdPlatformTypeChoiceOxfordNanoporeSequenceInstrumentModel is just a simple String type, this merely returns the current string value.
func (me TxsdPlatformTypeChoiceOxfordNanoporeSequenceInstrumentModel) String() string {
	return xsdt.String(me).String()
}

//	This convenience method just performs a simple type conversion to TxsdPlatformTypeChoiceOxfordNanoporeSequenceInstrumentModel's alias type xsdt.String.
func (me TxsdPlatformTypeChoiceOxfordNanoporeSequenceInstrumentModel) ToXsdtString() xsdt.String {
	return xsdt.String(me)
}

//	Returns true if the value of this enumerated TxsdPlatformTypeChoiceOxfordNanoporeSequenceInstrumentModel is "MinION".
func (me TxsdPlatformTypeChoiceOxfordNanoporeSequenceInstrumentModel) IsMinION() bool {
	return me.String() == "MinION"
}

//	Returns true if the value of this enumerated TxsdPlatformTypeChoiceOxfordNanoporeSequenceInstrumentModel is "GridION".
func (me TxsdPlatformTypeChoiceOxfordNanoporeSequenceInstrumentModel) IsGridION() bool {
	return me.String() == "GridION"
}

type XsdGoPkgHasElem_InstrumentMODELsequenceOXFORDNANOPOREchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceOxfordNanoporeSequenceInstrumentModel_ struct {
	InstrumentModel TxsdPlatformTypeChoiceOxfordNanoporeSequenceInstrumentModel `xml:"INSTRUMENT_MODEL"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_InstrumentMODELsequenceOXFORDNANOPOREchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceOxfordNanoporeSequenceInstrumentModel_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_InstrumentMODELsequenceOXFORDNANOPOREchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceOxfordNanoporeSequenceInstrumentModel_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_InstrumentMODELsequenceOXFORDNANOPOREchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceOxfordNanoporeSequenceInstrumentModel_ instance.
func (me *XsdGoPkgHasElem_InstrumentMODELsequenceOXFORDNANOPOREchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceOxfordNanoporeSequenceInstrumentModel_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_InstrumentMODELsequenceOXFORDNANOPOREchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceOxfordNanoporeSequenceInstrumentModel_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdPlatformTypeChoiceOxfordNanopore struct {
	XsdGoPkgHasElem_InstrumentMODELsequenceOXFORDNANOPOREchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceOxfordNanoporeSequenceInstrumentModel_
}

//	If the WalkHandlers.TxsdPlatformTypeChoiceOxfordNanopore function is not nil (ie. was set by outside code), calls it with this TxsdPlatformTypeChoiceOxfordNanopore instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this TxsdPlatformTypeChoiceOxfordNanopore instance.
func (me *TxsdPlatformTypeChoiceOxfordNanopore) Walk() (err error) {
	if fn := WalkHandlers.TxsdPlatformTypeChoiceOxfordNanopore; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_InstrumentMODELsequenceOXFORDNANOPOREchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceOxfordNanoporeSequenceInstrumentModel_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdPlatformTypeChoiceIonTorrentSequenceInstrumentModel xsdt.String

//	This convenience method just performs a simple type conversion to TxsdPlatformTypeChoiceIonTorrentSequenceInstrumentModel's alias type xsdt.String.
func (me TxsdPlatformTypeChoiceIonTorrentSequenceInstrumentModel) ToXsdtString() xsdt.String {
	return xsdt.String(me)
}

//	Returns true if the value of this enumerated TxsdPlatformTypeChoiceIonTorrentSequenceInstrumentModel is "Ion Torrent PGM".
func (me TxsdPlatformTypeChoiceIonTorrentSequenceInstrumentModel) IsIonTorrentPgm() bool {
	return me.String() == "Ion Torrent PGM"
}

//	Returns true if the value of this enumerated TxsdPlatformTypeChoiceIonTorrentSequenceInstrumentModel is "Ion Torrent Proton".
func (me TxsdPlatformTypeChoiceIonTorrentSequenceInstrumentModel) IsIonTorrentProton() bool {
	return me.String() == "Ion Torrent Proton"
}

//	Returns true if the value of this enumerated TxsdPlatformTypeChoiceIonTorrentSequenceInstrumentModel is "unspecified".
func (me TxsdPlatformTypeChoiceIonTorrentSequenceInstrumentModel) IsUnspecified() bool {
	return me.String() == "unspecified"
}

//	Since TxsdPlatformTypeChoiceIonTorrentSequenceInstrumentModel is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdPlatformTypeChoiceIonTorrentSequenceInstrumentModel) Set(s string) {
	(*xsdt.String)(me).Set(s)
}

//	Since TxsdPlatformTypeChoiceIonTorrentSequenceInstrumentModel is just a simple String type, this merely returns the current string value.
func (me TxsdPlatformTypeChoiceIonTorrentSequenceInstrumentModel) String() string {
	return xsdt.String(me).String()
}

type XsdGoPkgHasElem_InstrumentMODELsequenceIONTORRENTchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceIonTorrentSequenceInstrumentModel_ struct {
	InstrumentModel TxsdPlatformTypeChoiceIonTorrentSequenceInstrumentModel `xml:"INSTRUMENT_MODEL"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_InstrumentMODELsequenceIONTORRENTchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceIonTorrentSequenceInstrumentModel_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_InstrumentMODELsequenceIONTORRENTchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceIonTorrentSequenceInstrumentModel_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_InstrumentMODELsequenceIONTORRENTchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceIonTorrentSequenceInstrumentModel_ instance.
func (me *XsdGoPkgHasElem_InstrumentMODELsequenceIONTORRENTchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceIonTorrentSequenceInstrumentModel_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_InstrumentMODELsequenceIONTORRENTchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceIonTorrentSequenceInstrumentModel_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdPlatformTypeChoiceIonTorrent struct {
	XsdGoPkgHasElem_InstrumentMODELsequenceIONTORRENTchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceIonTorrentSequenceInstrumentModel_
}

//	If the WalkHandlers.TxsdPlatformTypeChoiceIonTorrent function is not nil (ie. was set by outside code), calls it with this TxsdPlatformTypeChoiceIonTorrent instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this TxsdPlatformTypeChoiceIonTorrent instance.
func (me *TxsdPlatformTypeChoiceIonTorrent) Walk() (err error) {
	if fn := WalkHandlers.TxsdPlatformTypeChoiceIonTorrent; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_InstrumentMODELsequenceIONTORRENTchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceIonTorrentSequenceInstrumentModel_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Lexically ordered value that allows for the pipe section to be hierarchically ordered. The float
//	primitive data type is used to allow for pipe sections to be inserted later on.
type XsdGoPkgHasElem_StepINDEXsequencePIPESECTIONsequencePipelineTypeschema_StepIndex_XsdtString_ struct {
	//	Lexically ordered value that allows for the pipe section to be hierarchically ordered. The float
	//	primitive data type is used to allow for pipe sections to be inserted later on.
	StepIndex xsdt.String `xml:"STEP_INDEX"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_StepINDEXsequencePIPESECTIONsequencePipelineTypeschema_StepIndex_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_StepINDEXsequencePIPESECTIONsequencePipelineTypeschema_StepIndex_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_StepINDEXsequencePIPESECTIONsequencePipelineTypeschema_StepIndex_XsdtString_ instance.
func (me *XsdGoPkgHasElem_StepINDEXsequencePIPESECTIONsequencePipelineTypeschema_StepIndex_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_StepINDEXsequencePIPESECTIONsequencePipelineTypeschema_StepIndex_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Specify the read index that precedes this read.
type XsdGoPkgHasAttr_FollowsReadIndex_XsdtNonNegativeInteger_ struct {
	//	Specify the read index that precedes this read.
	FollowsReadIndex xsdt.NonNegativeInteger `xml:"follows_read_index,attr"`
}

//	Specify the read index that follows this read.
type XsdGoPkgHasAttr_PrecedesReadIndex_XsdtNonNegativeInteger_ struct {
	//	Specify the read index that follows this read.
	PrecedesReadIndex xsdt.NonNegativeInteger `xml:"precedes_read_index,attr"`
}

type TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceChoiceRelativeOrder struct {
	//	Specify the read index that precedes this read.
	XsdGoPkgHasAttr_FollowsReadIndex_XsdtNonNegativeInteger_

	//	Specify the read index that follows this read.
	XsdGoPkgHasAttr_PrecedesReadIndex_XsdtNonNegativeInteger_
}

//	If the WalkHandlers.TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceChoiceRelativeOrder function is not nil (ie. was set by outside code), calls it with this TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceChoiceRelativeOrder instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceChoiceRelativeOrder instance.
func (me *TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceChoiceRelativeOrder) Walk() (err error) {
	if fn := WalkHandlers.TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceChoiceRelativeOrder; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdPlatformTypeChoiceLs454AllInstrumentModel xsdt.String

//	Since TxsdPlatformTypeChoiceLs454AllInstrumentModel is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdPlatformTypeChoiceLs454AllInstrumentModel) Set(s string) { (*xsdt.String)(me).Set(s) }

//	This convenience method just performs a simple type conversion to TxsdPlatformTypeChoiceLs454AllInstrumentModel's alias type xsdt.String.
func (me TxsdPlatformTypeChoiceLs454AllInstrumentModel) ToXsdtString() xsdt.String {
	return xsdt.String(me)
}

//	Returns true if the value of this enumerated TxsdPlatformTypeChoiceLs454AllInstrumentModel is "454 GS".
func (me TxsdPlatformTypeChoiceLs454AllInstrumentModel) Is454Gs() bool {
	return me.String() == "454 GS"
}

//	Returns true if the value of this enumerated TxsdPlatformTypeChoiceLs454AllInstrumentModel is "454 GS 20".
func (me TxsdPlatformTypeChoiceLs454AllInstrumentModel) Is454Gs20() bool {
	return me.String() == "454 GS 20"
}

//	Since TxsdPlatformTypeChoiceLs454AllInstrumentModel is just a simple String type, this merely returns the current string value.
func (me TxsdPlatformTypeChoiceLs454AllInstrumentModel) String() string {
	return xsdt.String(me).String()
}

//	Returns true if the value of this enumerated TxsdPlatformTypeChoiceLs454AllInstrumentModel is "454 GS FLX+".
func (me TxsdPlatformTypeChoiceLs454AllInstrumentModel) Is454GsFlx() bool {
	return me.String() == "454 GS FLX+"
}

//	Returns true if the value of this enumerated TxsdPlatformTypeChoiceLs454AllInstrumentModel is "454 GS FLX Titanium".
func (me TxsdPlatformTypeChoiceLs454AllInstrumentModel) Is454GsFlxTitanium() bool {
	return me.String() == "454 GS FLX Titanium"
}

//	Returns true if the value of this enumerated TxsdPlatformTypeChoiceLs454AllInstrumentModel is "454 GS Junior".
func (me TxsdPlatformTypeChoiceLs454AllInstrumentModel) Is454GsJunior() bool {
	return me.String() == "454 GS Junior"
}

//	Returns true if the value of this enumerated TxsdPlatformTypeChoiceLs454AllInstrumentModel is "unspecified".
func (me TxsdPlatformTypeChoiceLs454AllInstrumentModel) IsUnspecified() bool {
	return me.String() == "unspecified"
}

type XsdGoPkgHasElem_InstrumentMODELallLS454ChoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceLs454AllInstrumentModel_ struct {
	InstrumentModel TxsdPlatformTypeChoiceLs454AllInstrumentModel `xml:"INSTRUMENT_MODEL"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_InstrumentMODELallLS454ChoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceLs454AllInstrumentModel_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_InstrumentMODELallLS454ChoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceLs454AllInstrumentModel_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_InstrumentMODELallLS454ChoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceLs454AllInstrumentModel_ instance.
func (me *XsdGoPkgHasElem_InstrumentMODELallLS454ChoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceLs454AllInstrumentModel_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_InstrumentMODELallLS454ChoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceLs454AllInstrumentModel_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdPlatformTypeChoiceCompleteGenomicsSequenceInstrumentModel xsdt.String

//	Since TxsdPlatformTypeChoiceCompleteGenomicsSequenceInstrumentModel is just a simple String type, this merely returns the current string value.
func (me TxsdPlatformTypeChoiceCompleteGenomicsSequenceInstrumentModel) String() string {
	return xsdt.String(me).String()
}

//	This convenience method just performs a simple type conversion to TxsdPlatformTypeChoiceCompleteGenomicsSequenceInstrumentModel's alias type xsdt.String.
func (me TxsdPlatformTypeChoiceCompleteGenomicsSequenceInstrumentModel) ToXsdtString() xsdt.String {
	return xsdt.String(me)
}

//	Returns true if the value of this enumerated TxsdPlatformTypeChoiceCompleteGenomicsSequenceInstrumentModel is "Complete Genomics".
func (me TxsdPlatformTypeChoiceCompleteGenomicsSequenceInstrumentModel) IsCompleteGenomics() bool {
	return me.String() == "Complete Genomics"
}

//	Returns true if the value of this enumerated TxsdPlatformTypeChoiceCompleteGenomicsSequenceInstrumentModel is "unspecified".
func (me TxsdPlatformTypeChoiceCompleteGenomicsSequenceInstrumentModel) IsUnspecified() bool {
	return me.String() == "unspecified"
}

//	Since TxsdPlatformTypeChoiceCompleteGenomicsSequenceInstrumentModel is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdPlatformTypeChoiceCompleteGenomicsSequenceInstrumentModel) Set(s string) {
	(*xsdt.String)(me).Set(s)
}

type XsdGoPkgHasElem_InstrumentMODELsequenceCOMPLETEGENOMICSchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceCompleteGenomicsSequenceInstrumentModel_ struct {
	InstrumentModel TxsdPlatformTypeChoiceCompleteGenomicsSequenceInstrumentModel `xml:"INSTRUMENT_MODEL"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_InstrumentMODELsequenceCOMPLETEGENOMICSchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceCompleteGenomicsSequenceInstrumentModel_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_InstrumentMODELsequenceCOMPLETEGENOMICSchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceCompleteGenomicsSequenceInstrumentModel_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_InstrumentMODELsequenceCOMPLETEGENOMICSchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceCompleteGenomicsSequenceInstrumentModel_ instance.
func (me *XsdGoPkgHasElem_InstrumentMODELsequenceCOMPLETEGENOMICSchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceCompleteGenomicsSequenceInstrumentModel_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_InstrumentMODELsequenceCOMPLETEGENOMICSchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceCompleteGenomicsSequenceInstrumentModel_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdPlatformTypeChoiceCapillarySequenceInstrumentModel xsdt.String

//	Since TxsdPlatformTypeChoiceCapillarySequenceInstrumentModel is just a simple String type, this merely returns the current string value.
func (me TxsdPlatformTypeChoiceCapillarySequenceInstrumentModel) String() string {
	return xsdt.String(me).String()
}

//	Returns true if the value of this enumerated TxsdPlatformTypeChoiceCapillarySequenceInstrumentModel is "AB 3730xL Genetic Analyzer".
func (me TxsdPlatformTypeChoiceCapillarySequenceInstrumentModel) IsAb3730XlGeneticAnalyzer() bool {
	return me.String() == "AB 3730xL Genetic Analyzer"
}

//	Returns true if the value of this enumerated TxsdPlatformTypeChoiceCapillarySequenceInstrumentModel is "AB 3730 Genetic Analyzer".
func (me TxsdPlatformTypeChoiceCapillarySequenceInstrumentModel) IsAb3730GeneticAnalyzer() bool {
	return me.String() == "AB 3730 Genetic Analyzer"
}

//	Returns true if the value of this enumerated TxsdPlatformTypeChoiceCapillarySequenceInstrumentModel is "AB 3500xL Genetic Analyzer".
func (me TxsdPlatformTypeChoiceCapillarySequenceInstrumentModel) IsAb3500XlGeneticAnalyzer() bool {
	return me.String() == "AB 3500xL Genetic Analyzer"
}

//	Returns true if the value of this enumerated TxsdPlatformTypeChoiceCapillarySequenceInstrumentModel is "AB 3130xL Genetic Analyzer".
func (me TxsdPlatformTypeChoiceCapillarySequenceInstrumentModel) IsAb3130XlGeneticAnalyzer() bool {
	return me.String() == "AB 3130xL Genetic Analyzer"
}

//	Returns true if the value of this enumerated TxsdPlatformTypeChoiceCapillarySequenceInstrumentModel is "AB 310 Genetic Analyzer".
func (me TxsdPlatformTypeChoiceCapillarySequenceInstrumentModel) IsAb310GeneticAnalyzer() bool {
	return me.String() == "AB 310 Genetic Analyzer"
}

//	Returns true if the value of this enumerated TxsdPlatformTypeChoiceCapillarySequenceInstrumentModel is "unspecified".
func (me TxsdPlatformTypeChoiceCapillarySequenceInstrumentModel) IsUnspecified() bool {
	return me.String() == "unspecified"
}

//	Since TxsdPlatformTypeChoiceCapillarySequenceInstrumentModel is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdPlatformTypeChoiceCapillarySequenceInstrumentModel) Set(s string) {
	(*xsdt.String)(me).Set(s)
}

//	Returns true if the value of this enumerated TxsdPlatformTypeChoiceCapillarySequenceInstrumentModel is "AB 3500 Genetic Analyzer".
func (me TxsdPlatformTypeChoiceCapillarySequenceInstrumentModel) IsAb3500GeneticAnalyzer() bool {
	return me.String() == "AB 3500 Genetic Analyzer"
}

//	Returns true if the value of this enumerated TxsdPlatformTypeChoiceCapillarySequenceInstrumentModel is "AB 3130 Genetic Analyzer".
func (me TxsdPlatformTypeChoiceCapillarySequenceInstrumentModel) IsAb3130GeneticAnalyzer() bool {
	return me.String() == "AB 3130 Genetic Analyzer"
}

//	This convenience method just performs a simple type conversion to TxsdPlatformTypeChoiceCapillarySequenceInstrumentModel's alias type xsdt.String.
func (me TxsdPlatformTypeChoiceCapillarySequenceInstrumentModel) ToXsdtString() xsdt.String {
	return xsdt.String(me)
}

//	Sequencers based on capillary electrophoresis technology manufactured by LifeTech (formerly Applied
//	BioSciences).
type XsdGoPkgHasElem_InstrumentMODELsequenceCAPILLARYchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceCapillarySequenceInstrumentModel_ struct {
	InstrumentModel TxsdPlatformTypeChoiceCapillarySequenceInstrumentModel `xml:"INSTRUMENT_MODEL"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_InstrumentMODELsequenceCAPILLARYchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceCapillarySequenceInstrumentModel_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_InstrumentMODELsequenceCAPILLARYchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceCapillarySequenceInstrumentModel_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_InstrumentMODELsequenceCAPILLARYchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceCapillarySequenceInstrumentModel_ instance.
func (me *XsdGoPkgHasElem_InstrumentMODELsequenceCAPILLARYchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceCapillarySequenceInstrumentModel_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_InstrumentMODELsequenceCAPILLARYchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceCapillarySequenceInstrumentModel_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdPlatformTypeChoiceCapillary struct {
	XsdGoPkgHasElem_InstrumentMODELsequenceCAPILLARYchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceCapillarySequenceInstrumentModel_
}

//	If the WalkHandlers.TxsdPlatformTypeChoiceCapillary function is not nil (ie. was set by outside code), calls it with this TxsdPlatformTypeChoiceCapillary instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this TxsdPlatformTypeChoiceCapillary instance.
func (me *TxsdPlatformTypeChoiceCapillary) Walk() (err error) {
	if fn := WalkHandlers.TxsdPlatformTypeChoiceCapillary; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_InstrumentMODELsequenceCAPILLARYchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceCapillarySequenceInstrumentModel_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_CAPILLARYchoicePlatformTypeschema_Capillary_TxsdPlatformTypeChoiceCapillary_ struct {
	//	Sequencers based on capillary electrophoresis technology manufactured by LifeTech (formerly Applied
	//	BioSciences).
	Capillary *TxsdPlatformTypeChoiceCapillary `xml:"CAPILLARY"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_CAPILLARYchoicePlatformTypeschema_Capillary_TxsdPlatformTypeChoiceCapillary_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_CAPILLARYchoicePlatformTypeschema_Capillary_TxsdPlatformTypeChoiceCapillary_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_CAPILLARYchoicePlatformTypeschema_Capillary_TxsdPlatformTypeChoiceCapillary_ instance.
func (me *XsdGoPkgHasElem_CAPILLARYchoicePlatformTypeschema_Capillary_TxsdPlatformTypeChoiceCapillary_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_CAPILLARYchoicePlatformTypeschema_Capillary_TxsdPlatformTypeChoiceCapillary_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Capillary.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Add a study, experiment, sample, run, or analysis to the submission session.
type XsdGoPkgHasElems_ADDchoiceTxsdSubmissionTypeSequenceActionsSequenceActionACTIONsequenceTxsdSubmissionTypeSequenceActionsACTIONSsequenceSubmissionTypeschema_Add_TxsdSubmissionTypeSequenceActionsSequenceActionChoiceAdd_ struct {
	//	Add a study, experiment, sample, run, or analysis to the submission session.
	Adds []*TxsdSubmissionTypeSequenceActionsSequenceActionChoiceAdd `xml:"ADD"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_ADDchoiceTxsdSubmissionTypeSequenceActionsSequenceActionACTIONsequenceTxsdSubmissionTypeSequenceActionsACTIONSsequenceSubmissionTypeschema_Add_TxsdSubmissionTypeSequenceActionsSequenceActionChoiceAdd_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ADDchoiceTxsdSubmissionTypeSequenceActionsSequenceActionACTIONsequenceTxsdSubmissionTypeSequenceActionsACTIONSsequenceSubmissionTypeschema_Add_TxsdSubmissionTypeSequenceActionsSequenceActionChoiceAdd_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ADDchoiceTxsdSubmissionTypeSequenceActionsSequenceActionACTIONsequenceTxsdSubmissionTypeSequenceActionsACTIONSsequenceSubmissionTypeschema_Add_TxsdSubmissionTypeSequenceActionsSequenceActionChoiceAdd_ instance.
func (me *XsdGoPkgHasElems_ADDchoiceTxsdSubmissionTypeSequenceActionsSequenceActionACTIONsequenceTxsdSubmissionTypeSequenceActionsACTIONSsequenceSubmissionTypeschema_Add_TxsdSubmissionTypeSequenceActionsSequenceActionChoiceAdd_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_ADDchoiceTxsdSubmissionTypeSequenceActionsSequenceActionACTIONsequenceTxsdSubmissionTypeSequenceActionsACTIONSsequenceSubmissionTypeschema_Add_TxsdSubmissionTypeSequenceActionsSequenceActionChoiceAdd_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Adds {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_CONTACTSsequenceSubmissionTypeschema_Contacts_TxsdSubmissionTypeSequenceContacts_ struct {
	Contactses []*TxsdSubmissionTypeSequenceContacts `xml:"CONTACTS"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_CONTACTSsequenceSubmissionTypeschema_Contacts_TxsdSubmissionTypeSequenceContacts_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_CONTACTSsequenceSubmissionTypeschema_Contacts_TxsdSubmissionTypeSequenceContacts_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_CONTACTSsequenceSubmissionTypeschema_Contacts_TxsdSubmissionTypeSequenceContacts_ instance.
func (me *XsdGoPkgHasElems_CONTACTSsequenceSubmissionTypeschema_Contacts_TxsdSubmissionTypeSequenceContacts_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_CONTACTSsequenceSubmissionTypeschema_Contacts_TxsdSubmissionTypeSequenceContacts_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Contactses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceChoiceExpectedBasecallTableSequenceBasecallSimpleContentExtensionMatchEdge xsdt.String

//	Returns true if the value of this enumerated TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceChoiceExpectedBasecallTableSequenceBasecallSimpleContentExtensionMatchEdge is "end".
func (me TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceChoiceExpectedBasecallTableSequenceBasecallSimpleContentExtensionMatchEdge) IsEnd() bool {
	return me.String() == "end"
}

//	Since TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceChoiceExpectedBasecallTableSequenceBasecallSimpleContentExtensionMatchEdge is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceChoiceExpectedBasecallTableSequenceBasecallSimpleContentExtensionMatchEdge) Set(s string) {
	(*xsdt.String)(me).Set(s)
}

//	Since TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceChoiceExpectedBasecallTableSequenceBasecallSimpleContentExtensionMatchEdge is just a simple String type, this merely returns the current string value.
func (me TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceChoiceExpectedBasecallTableSequenceBasecallSimpleContentExtensionMatchEdge) String() string {
	return xsdt.String(me).String()
}

//	This convenience method just performs a simple type conversion to TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceChoiceExpectedBasecallTableSequenceBasecallSimpleContentExtensionMatchEdge's alias type xsdt.String.
func (me TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceChoiceExpectedBasecallTableSequenceBasecallSimpleContentExtensionMatchEdge) ToXsdtString() xsdt.String {
	return xsdt.String(me)
}

//	Returns true if the value of this enumerated TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceChoiceExpectedBasecallTableSequenceBasecallSimpleContentExtensionMatchEdge is "full".
func (me TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceChoiceExpectedBasecallTableSequenceBasecallSimpleContentExtensionMatchEdge) IsFull() bool {
	return me.String() == "full"
}

//	Returns true if the value of this enumerated TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceChoiceExpectedBasecallTableSequenceBasecallSimpleContentExtensionMatchEdge is "start".
func (me TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceChoiceExpectedBasecallTableSequenceBasecallSimpleContentExtensionMatchEdge) IsStart() bool {
	return me.String() == "start"
}

type TxsdPlatformTypeChoiceAbiSolidSequenceInstrumentModel xsdt.String

//	Returns true if the value of this enumerated TxsdPlatformTypeChoiceAbiSolidSequenceInstrumentModel is "AB SOLiD System".
func (me TxsdPlatformTypeChoiceAbiSolidSequenceInstrumentModel) IsAbSOLiDSystem() bool {
	return me.String() == "AB SOLiD System"
}

//	Returns true if the value of this enumerated TxsdPlatformTypeChoiceAbiSolidSequenceInstrumentModel is "AB SOLiD 3 Plus System".
func (me TxsdPlatformTypeChoiceAbiSolidSequenceInstrumentModel) IsAbSOLiD3PlusSystem() bool {
	return me.String() == "AB SOLiD 3 Plus System"
}

//	Returns true if the value of this enumerated TxsdPlatformTypeChoiceAbiSolidSequenceInstrumentModel is "AB SOLiD 4 System".
func (me TxsdPlatformTypeChoiceAbiSolidSequenceInstrumentModel) IsAbSOLiD4System() bool {
	return me.String() == "AB SOLiD 4 System"
}

//	Returns true if the value of this enumerated TxsdPlatformTypeChoiceAbiSolidSequenceInstrumentModel is "unspecified".
func (me TxsdPlatformTypeChoiceAbiSolidSequenceInstrumentModel) IsUnspecified() bool {
	return me.String() == "unspecified"
}

//	Since TxsdPlatformTypeChoiceAbiSolidSequenceInstrumentModel is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdPlatformTypeChoiceAbiSolidSequenceInstrumentModel) Set(s string) {
	(*xsdt.String)(me).Set(s)
}

//	Returns true if the value of this enumerated TxsdPlatformTypeChoiceAbiSolidSequenceInstrumentModel is "AB SOLiD System 2.0".
func (me TxsdPlatformTypeChoiceAbiSolidSequenceInstrumentModel) IsAbSOLiDSystem20() bool {
	return me.String() == "AB SOLiD System 2.0"
}

//	Returns true if the value of this enumerated TxsdPlatformTypeChoiceAbiSolidSequenceInstrumentModel is "AB SOLiD PI System".
func (me TxsdPlatformTypeChoiceAbiSolidSequenceInstrumentModel) IsAbSOLiDPiSystem() bool {
	return me.String() == "AB SOLiD PI System"
}

//	Returns true if the value of this enumerated TxsdPlatformTypeChoiceAbiSolidSequenceInstrumentModel is "AB 5500xl Genetic Analyzer".
func (me TxsdPlatformTypeChoiceAbiSolidSequenceInstrumentModel) IsAb5500XlGeneticAnalyzer() bool {
	return me.String() == "AB 5500xl Genetic Analyzer"
}

//	Returns true if the value of this enumerated TxsdPlatformTypeChoiceAbiSolidSequenceInstrumentModel is "AB 5500 Genetic Analyzer".
func (me TxsdPlatformTypeChoiceAbiSolidSequenceInstrumentModel) IsAb5500GeneticAnalyzer() bool {
	return me.String() == "AB 5500 Genetic Analyzer"
}

//	Since TxsdPlatformTypeChoiceAbiSolidSequenceInstrumentModel is just a simple String type, this merely returns the current string value.
func (me TxsdPlatformTypeChoiceAbiSolidSequenceInstrumentModel) String() string {
	return xsdt.String(me).String()
}

//	This convenience method just performs a simple type conversion to TxsdPlatformTypeChoiceAbiSolidSequenceInstrumentModel's alias type xsdt.String.
func (me TxsdPlatformTypeChoiceAbiSolidSequenceInstrumentModel) ToXsdtString() xsdt.String {
	return xsdt.String(me)
}

//	Returns true if the value of this enumerated TxsdPlatformTypeChoiceAbiSolidSequenceInstrumentModel is "AB SOLiD System 3.0".
func (me TxsdPlatformTypeChoiceAbiSolidSequenceInstrumentModel) IsAbSOLiDSystem30() bool {
	return me.String() == "AB SOLiD System 3.0"
}

//	Returns true if the value of this enumerated TxsdPlatformTypeChoiceAbiSolidSequenceInstrumentModel is "AB SOLiD 4hq System".
func (me TxsdPlatformTypeChoiceAbiSolidSequenceInstrumentModel) IsAbSOLiD4HqSystem() bool {
	return me.String() == "AB SOLiD 4hq System"
}

//	Returns true if the value of this enumerated TxsdPlatformTypeChoiceAbiSolidSequenceInstrumentModel is "AB 5500xl-W Genetic Analysis System".
func (me TxsdPlatformTypeChoiceAbiSolidSequenceInstrumentModel) IsAb5500XlWGeneticAnalysisSystem() bool {
	return me.String() == "AB 5500xl-W Genetic Analysis System"
}

type XsdGoPkgHasElems_InstrumentMODELsequenceABISOLIDchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceAbiSolidSequenceInstrumentModel_ struct {
	InstrumentModels []TxsdPlatformTypeChoiceAbiSolidSequenceInstrumentModel `xml:"INSTRUMENT_MODEL"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_InstrumentMODELsequenceABISOLIDchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceAbiSolidSequenceInstrumentModel_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_InstrumentMODELsequenceABISOLIDchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceAbiSolidSequenceInstrumentModel_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_InstrumentMODELsequenceABISOLIDchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceAbiSolidSequenceInstrumentModel_ instance.
func (me *XsdGoPkgHasElems_InstrumentMODELsequenceABISOLIDchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceAbiSolidSequenceInstrumentModel_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_InstrumentMODELsequenceABISOLIDchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceAbiSolidSequenceInstrumentModel_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Hold content from public view for any study, experiment, sample, run, or analysis object that was
//	submitted under this submission session.
type XsdGoPkgHasElems_HOLDchoiceTxsdSubmissionTypeSequenceActionsSequenceActionACTIONsequenceTxsdSubmissionTypeSequenceActionsACTIONSsequenceSubmissionTypeschema_Hold_TxsdSubmissionTypeSequenceActionsSequenceActionChoiceHold_ struct {
	//	Hold content from public view for any study, experiment, sample, run, or analysis object that was
	//	submitted under this submission session.
	Holds []*TxsdSubmissionTypeSequenceActionsSequenceActionChoiceHold `xml:"HOLD"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_HOLDchoiceTxsdSubmissionTypeSequenceActionsSequenceActionACTIONsequenceTxsdSubmissionTypeSequenceActionsACTIONSsequenceSubmissionTypeschema_Hold_TxsdSubmissionTypeSequenceActionsSequenceActionChoiceHold_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_HOLDchoiceTxsdSubmissionTypeSequenceActionsSequenceActionACTIONsequenceTxsdSubmissionTypeSequenceActionsACTIONSsequenceSubmissionTypeschema_Hold_TxsdSubmissionTypeSequenceActionsSequenceActionChoiceHold_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_HOLDchoiceTxsdSubmissionTypeSequenceActionsSequenceActionACTIONsequenceTxsdSubmissionTypeSequenceActionsACTIONSsequenceSubmissionTypeschema_Hold_TxsdSubmissionTypeSequenceActionsSequenceActionChoiceHold_ instance.
func (me *XsdGoPkgHasElems_HOLDchoiceTxsdSubmissionTypeSequenceActionsSequenceActionACTIONsequenceTxsdSubmissionTypeSequenceActionsACTIONSsequenceSubmissionTypeschema_Hold_TxsdSubmissionTypeSequenceActionsSequenceActionChoiceHold_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_HOLDchoiceTxsdSubmissionTypeSequenceActionsSequenceActionACTIONsequenceTxsdSubmissionTypeSequenceActionsACTIONSsequenceSubmissionTypeschema_Hold_TxsdSubmissionTypeSequenceActionsSequenceActionChoiceHold_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Holds {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdPlatformTypeChoiceHelicosAllInstrumentModel xsdt.String

//	Returns true if the value of this enumerated TxsdPlatformTypeChoiceHelicosAllInstrumentModel is "unspecified".
func (me TxsdPlatformTypeChoiceHelicosAllInstrumentModel) IsUnspecified() bool {
	return me.String() == "unspecified"
}

//	Since TxsdPlatformTypeChoiceHelicosAllInstrumentModel is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdPlatformTypeChoiceHelicosAllInstrumentModel) Set(s string) { (*xsdt.String)(me).Set(s) }

//	Since TxsdPlatformTypeChoiceHelicosAllInstrumentModel is just a simple String type, this merely returns the current string value.
func (me TxsdPlatformTypeChoiceHelicosAllInstrumentModel) String() string {
	return xsdt.String(me).String()
}

//	This convenience method just performs a simple type conversion to TxsdPlatformTypeChoiceHelicosAllInstrumentModel's alias type xsdt.String.
func (me TxsdPlatformTypeChoiceHelicosAllInstrumentModel) ToXsdtString() xsdt.String {
	return xsdt.String(me)
}

//	Returns true if the value of this enumerated TxsdPlatformTypeChoiceHelicosAllInstrumentModel is "Helicos HeliScope".
func (me TxsdPlatformTypeChoiceHelicosAllInstrumentModel) IsHelicosHeliScope() bool {
	return me.String() == "Helicos HeliScope"
}

//	Whether the reference alignment includes all reads regardless of whether they fail the instrument vendor's
//	quality check.
type XsdGoPkgHasElems_AlignmentIncludesFailedReadsallAlignmentDirectivesTypeschema_AlignmentIncludesFailedReads_XsdtBoolean_ struct {
	//	Whether the reference alignment includes all reads regardless of whether they fail the instrument vendor's
	//	quality check.
	AlignmentIncludesFailedReadses []xsdt.Boolean `xml:"alignment_includes_failed_reads"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_AlignmentIncludesFailedReadsallAlignmentDirectivesTypeschema_AlignmentIncludesFailedReads_XsdtBoolean_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_AlignmentIncludesFailedReadsallAlignmentDirectivesTypeschema_AlignmentIncludesFailedReads_XsdtBoolean_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_AlignmentIncludesFailedReadsallAlignmentDirectivesTypeschema_AlignmentIncludesFailedReads_XsdtBoolean_ instance.
func (me *XsdGoPkgHasElems_AlignmentIncludesFailedReadsallAlignmentDirectivesTypeschema_AlignmentIncludesFailedReads_XsdtBoolean_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_AlignmentIncludesFailedReadsallAlignmentDirectivesTypeschema_AlignmentIncludesFailedReads_XsdtBoolean_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Number of base/color calls, cycles, or flows per spot (raw sequence length or flow length including all
//	application and technical tags and mate pairs, but not including gap lengths). This value will be platform dependent,
//	library dependent, and possibly run dependent. Variable length platforms will still have a constant flow/cycle length.
type XsdGoPkgHasElem_SpotLENGTHsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_SpotLength_XsdtNonNegativeInteger_ struct {
	//	Number of base/color calls, cycles, or flows per spot (raw sequence length or flow length including all
	//	application and technical tags and mate pairs, but not including gap lengths). This value will be platform dependent,
	//	library dependent, and possibly run dependent. Variable length platforms will still have a constant flow/cycle length.
	SpotLength xsdt.NonNegativeInteger `xml:"SPOT_LENGTH"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_SpotLENGTHsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_SpotLength_XsdtNonNegativeInteger_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_SpotLENGTHsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_SpotLength_XsdtNonNegativeInteger_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_SpotLENGTHsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_SpotLength_XsdtNonNegativeInteger_ instance.
func (me *XsdGoPkgHasElem_SpotLENGTHsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_SpotLength_XsdtNonNegativeInteger_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_SpotLENGTHsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_SpotLength_XsdtNonNegativeInteger_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The read is located beginning at the offset or cycle relative to another read. This choice is
//	appropriate for example when specifying a read that follows a variable length expected sequence(s).
type XsdGoPkgHasElem_RelativeORDERchoicesequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_RelativeOrder_TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceChoiceRelativeOrder_ struct {
	//	The read is located beginning at the offset or cycle relative to another read. This choice is
	//	appropriate for example when specifying a read that follows a variable length expected sequence(s).
	RelativeOrder *TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceChoiceRelativeOrder `xml:"RELATIVE_ORDER"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_RelativeORDERchoicesequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_RelativeOrder_TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceChoiceRelativeOrder_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_RelativeORDERchoicesequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_RelativeOrder_TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceChoiceRelativeOrder_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_RelativeORDERchoicesequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_RelativeOrder_TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceChoiceRelativeOrder_ instance.
func (me *XsdGoPkgHasElem_RelativeORDERchoicesequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_RelativeOrder_TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceChoiceRelativeOrder_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_RelativeORDERchoicesequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_RelativeOrder_TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceChoiceRelativeOrder_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.RelativeOrder.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The location of the read start in terms of base count (1 is beginning of spot).
type XsdGoPkgHasElem_BaseCOORDchoicesequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_BaseCoord_XsdtInteger_ struct {
	//	The location of the read start in terms of base count (1 is beginning of spot).
	BaseCoord *xsdt.Integer `xml:"BASE_COORD"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_BaseCOORDchoicesequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_BaseCoord_XsdtInteger_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_BaseCOORDchoicesequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_BaseCoord_XsdtInteger_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_BaseCOORDchoicesequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_BaseCoord_XsdtInteger_ instance.
func (me *XsdGoPkgHasElem_BaseCOORDchoicesequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_BaseCoord_XsdtInteger_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_BaseCOORDchoicesequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_BaseCoord_XsdtInteger_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	A set of choices of expected basecalls for a current read. Read will be zero-length if none is
//	found.
//	Element's body contains a basecall, attribute provide description of this read meaning as
//	well as matching rules.
//	When match occurs, the read will be tagged with this group membership
type XsdGoPkgHasAttr_ReadGroupTag_XsdtString_ struct {
	//	When match occurs, the read will be tagged with this group membership
	ReadGroupTag xsdt.String `xml:"read_group_tag,attr"`
}

//	Minimum number of matches to trigger identification.
type XsdGoPkgHasAttr_MinMatch_XsdtNonNegativeInteger_ struct {
	//	Minimum number of matches to trigger identification.
	MinMatch xsdt.NonNegativeInteger `xml:"min_match,attr"`
}

//	Maximum number of mismatches
type XsdGoPkgHasAttr_MaxMismatch_XsdtNonNegativeInteger_ struct {
	//	Maximum number of mismatches
	MaxMismatch xsdt.NonNegativeInteger `xml:"max_mismatch,attr"`
}

//	Where the match should occur. Changes the rules on how min_match and max_mismatch
//	are counted.
type XsdGoPkgHasAttr_MatchEdge_TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceChoiceExpectedBasecallTableSequenceBasecallSimpleContentExtensionMatchEdge_ struct {
	//	Where the match should occur. Changes the rules on how min_match and max_mismatch
	//	are counted.
	MatchEdge TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceChoiceExpectedBasecallTableSequenceBasecallSimpleContentExtensionMatchEdge `xml:"match_edge,attr"`
}

type TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceChoiceExpectedBasecallTableSequenceBasecall struct {
	XsdtString

	//	Maximum number of mismatches
	XsdGoPkgHasAttr_MaxMismatch_XsdtNonNegativeInteger_

	//	Where the match should occur. Changes the rules on how min_match and max_mismatch
	//	are counted.
	XsdGoPkgHasAttr_MatchEdge_TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceChoiceExpectedBasecallTableSequenceBasecallSimpleContentExtensionMatchEdge_

	//	When match occurs, the read will be tagged with this group membership
	XsdGoPkgHasAttr_ReadGroupTag_XsdtString_

	//	Minimum number of matches to trigger identification.
	XsdGoPkgHasAttr_MinMatch_XsdtNonNegativeInteger_
}

//	If the WalkHandlers.TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceChoiceExpectedBasecallTableSequenceBasecall function is not nil (ie. was set by outside code), calls it with this TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceChoiceExpectedBasecallTableSequenceBasecall instance as the single argument. Then calls the Walk() method on 0/5 embed(s) and 0/0 field(s) belonging to this TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceChoiceExpectedBasecallTableSequenceBasecall instance.
func (me *TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceChoiceExpectedBasecallTableSequenceBasecall) Walk() (err error) {
	if fn := WalkHandlers.TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceChoiceExpectedBasecallTableSequenceBasecall; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_BASECALLsequenceEXPECTEDBasecallTABLEchoicesequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_Basecall_TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceChoiceExpectedBasecallTableSequenceBasecall_ struct {
	//	Element's body contains a basecall, attribute provide description of this read meaning as
	//	well as matching rules.
	Basecalls []*TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceChoiceExpectedBasecallTableSequenceBasecall `xml:"BASECALL"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_BASECALLsequenceEXPECTEDBasecallTABLEchoicesequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_Basecall_TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceChoiceExpectedBasecallTableSequenceBasecall_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_BASECALLsequenceEXPECTEDBasecallTABLEchoicesequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_Basecall_TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceChoiceExpectedBasecallTableSequenceBasecall_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_BASECALLsequenceEXPECTEDBasecallTABLEchoicesequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_Basecall_TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceChoiceExpectedBasecallTableSequenceBasecall_ instance.
func (me *XsdGoPkgHasElems_BASECALLsequenceEXPECTEDBasecallTABLEchoicesequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_Basecall_TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceChoiceExpectedBasecallTableSequenceBasecall_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_BASECALLsequenceEXPECTEDBasecallTABLEchoicesequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_Basecall_TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceChoiceExpectedBasecallTableSequenceBasecall_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Basecalls {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Specify whether the spot should have a default length for this tag if the expected base
//	cannot be matched.
type XsdGoPkgHasAttr_DefaultLength_XsdtNonNegativeInteger_ struct {
	//	Specify whether the spot should have a default length for this tag if the expected base
	//	cannot be matched.
	DefaultLength xsdt.NonNegativeInteger `xml:"default_length,attr"`
}

//	Specify an optional starting point for tag (base offset from 1).
type XsdGoPkgHasAttr_BaseCoord_XsdtNonNegativeInteger_ struct {
	//	Specify an optional starting point for tag (base offset from 1).
	BaseCoord xsdt.NonNegativeInteger `xml:"base_coord,attr"`
}

type TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceChoiceExpectedBasecallTable struct {
	//	Specify whether the spot should have a default length for this tag if the expected base
	//	cannot be matched.
	XsdGoPkgHasAttr_DefaultLength_XsdtNonNegativeInteger_

	//	Specify an optional starting point for tag (base offset from 1).
	XsdGoPkgHasAttr_BaseCoord_XsdtNonNegativeInteger_

	//	Element's body contains a basecall, attribute provide description of this read meaning as
	//	well as matching rules.
	XsdGoPkgHasElems_BASECALLsequenceEXPECTEDBasecallTABLEchoicesequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_Basecall_TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceChoiceExpectedBasecallTableSequenceBasecall_
}

//	If the WalkHandlers.TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceChoiceExpectedBasecallTable function is not nil (ie. was set by outside code), calls it with this TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceChoiceExpectedBasecallTable instance as the single argument. Then calls the Walk() method on 1/3 embed(s) and 0/0 field(s) belonging to this TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceChoiceExpectedBasecallTable instance.
func (me *TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceChoiceExpectedBasecallTable) Walk() (err error) {
	if fn := WalkHandlers.TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceChoiceExpectedBasecallTable; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_BASECALLsequenceEXPECTEDBasecallTABLEchoicesequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_Basecall_TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceChoiceExpectedBasecallTableSequenceBasecall_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_ExpectedBasecallTABLEchoicesequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_ExpectedBasecallTable_TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceChoiceExpectedBasecallTable_ struct {
	//	A set of choices of expected basecalls for a current read. Read will be zero-length if none is
	//	found.
	ExpectedBasecallTable *TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceChoiceExpectedBasecallTable `xml:"EXPECTED_BASECALL_TABLE"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_ExpectedBasecallTABLEchoicesequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_ExpectedBasecallTable_TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceChoiceExpectedBasecallTable_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ExpectedBasecallTABLEchoicesequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_ExpectedBasecallTable_TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceChoiceExpectedBasecallTable_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_ExpectedBasecallTABLEchoicesequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_ExpectedBasecallTable_TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceChoiceExpectedBasecallTable_ instance.
func (me *XsdGoPkgHasElem_ExpectedBasecallTABLEchoicesequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_ExpectedBasecallTable_TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceChoiceExpectedBasecallTable_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_ExpectedBasecallTABLEchoicesequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_ExpectedBasecallTable_TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceChoiceExpectedBasecallTable_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.ExpectedBasecallTable.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	READ_INDEX starts at 0 and is incrementally increased for each sequential READ_SPEC within a
//	SPOT_DECODE_SPEC
type XsdGoPkgHasElem_ReadINDEXsequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_ReadIndex_XsdtNonNegativeInteger_ struct {
	//	READ_INDEX starts at 0 and is incrementally increased for each sequential READ_SPEC within a
	//	SPOT_DECODE_SPEC
	ReadIndex xsdt.NonNegativeInteger `xml:"READ_INDEX"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_ReadINDEXsequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_ReadIndex_XsdtNonNegativeInteger_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ReadINDEXsequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_ReadIndex_XsdtNonNegativeInteger_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_ReadINDEXsequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_ReadIndex_XsdtNonNegativeInteger_ instance.
func (me *XsdGoPkgHasElem_ReadINDEXsequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_ReadIndex_XsdtNonNegativeInteger_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_ReadINDEXsequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_ReadIndex_XsdtNonNegativeInteger_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	READ_LABEL is a name for this tag, and can be used to on output to determine read name, for example
//	F or R.
type XsdGoPkgHasElem_ReadLABELsequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_ReadLabel_XsdtString_ struct {
	//	READ_LABEL is a name for this tag, and can be used to on output to determine read name, for example
	//	F or R.
	ReadLabel xsdt.String `xml:"READ_LABEL"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_ReadLABELsequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_ReadLabel_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ReadLABELsequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_ReadLabel_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_ReadLABELsequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_ReadLabel_XsdtString_ instance.
func (me *XsdGoPkgHasElem_ReadLABELsequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_ReadLabel_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_ReadLABELsequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_ReadLabel_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceReadClass xsdt.String

//	Since TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceReadClass is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceReadClass) Set(s string) {
	(*xsdt.String)(me).Set(s)
}

//	Since TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceReadClass is just a simple String type, this merely returns the current string value.
func (me TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceReadClass) String() string {
	return xsdt.String(me).String()
}

//	This convenience method just performs a simple type conversion to TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceReadClass's alias type xsdt.String.
func (me TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceReadClass) ToXsdtString() xsdt.String {
	return xsdt.String(me)
}

//	Returns true if the value of this enumerated TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceReadClass is "Application Read".
func (me TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceReadClass) IsApplicationRead() bool {
	return me.String() == "Application Read"
}

//	Returns true if the value of this enumerated TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceReadClass is "Technical Read".
func (me TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceReadClass) IsTechnicalRead() bool {
	return me.String() == "Technical Read"
}

type XsdGoPkgHasElem_ReadCLASSsequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_ReadClass_TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceReadClass_ struct {
	ReadClass TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceReadClass `xml:"READ_CLASS"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_ReadCLASSsequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_ReadClass_TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceReadClass_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ReadCLASSsequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_ReadClass_TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceReadClass_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_ReadCLASSsequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_ReadClass_TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceReadClass_ instance.
func (me *XsdGoPkgHasElem_ReadCLASSsequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_ReadClass_TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceReadClass_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_ReadCLASSsequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_ReadClass_TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceReadClass_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceReadType xsdt.String

//	Since TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceReadType is just a simple String type, this merely returns the current string value.
func (me TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceReadType) String() string {
	return xsdt.String(me).String()
}

//	Returns true if the value of this enumerated TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceReadType is "Reverse".
func (me TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceReadType) IsReverse() bool {
	return me.String() == "Reverse"
}

//	Returns true if the value of this enumerated TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceReadType is "Linker".
func (me TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceReadType) IsLinker() bool {
	return me.String() == "Linker"
}

//	Since TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceReadType is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceReadType) Set(s string) {
	(*xsdt.String)(me).Set(s)
}

//	This convenience method just performs a simple type conversion to TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceReadType's alias type xsdt.String.
func (me TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceReadType) ToXsdtString() xsdt.String {
	return xsdt.String(me)
}

//	Returns true if the value of this enumerated TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceReadType is "Forward".
func (me TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceReadType) IsForward() bool {
	return me.String() == "Forward"
}

//	Returns true if the value of this enumerated TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceReadType is "Adapter".
func (me TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceReadType) IsAdapter() bool {
	return me.String() == "Adapter"
}

//	Returns true if the value of this enumerated TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceReadType is "Primer".
func (me TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceReadType) IsPrimer() bool {
	return me.String() == "Primer"
}

//	Returns true if the value of this enumerated TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceReadType is "BarCode".
func (me TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceReadType) IsBarCode() bool {
	return me.String() == "BarCode"
}

//	Returns true if the value of this enumerated TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceReadType is "Other".
func (me TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceReadType) IsOther() bool {
	return me.String() == "Other"
}

type XsdGoPkgHasElem_ReadTYPEsequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_ReadType_TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceReadType_Forward struct {
	ReadType TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceReadType `xml:"READ_TYPE"`
}

//	Returns the default value for ReadType -- "Forward"
func (me XsdGoPkgHasElem_ReadTYPEsequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_ReadType_TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceReadType_Forward) ReadTypeDefault() TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceReadType {
	return TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceReadType("Forward")
}

//	If the WalkHandlers.XsdGoPkgHasElem_ReadTYPEsequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_ReadType_TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceReadType_Forward function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ReadTYPEsequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_ReadType_TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceReadType_Forward instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_ReadTYPEsequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_ReadType_TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceReadType_Forward instance.
func (me *XsdGoPkgHasElem_ReadTYPEsequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_ReadType_TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceReadType_Forward) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_ReadTYPEsequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_ReadType_TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceReadType_Forward; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpec struct {
	XsdGoPkgHasElem_ReadCLASSsequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_ReadClass_TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceReadClass_

	XsdGoPkgHasElem_ReadTYPEsequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_ReadType_TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceReadType_Forward

	//	There are various methods to ordering the reads on the spot.
	//	The read is located beginning at the offset or cycle relative to another read. This choice is
	//	appropriate for example when specifying a read that follows a variable length expected sequence(s).
	XsdGoPkgHasElem_RelativeORDERchoicesequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_RelativeOrder_TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceChoiceRelativeOrder_

	//	There are various methods to ordering the reads on the spot.
	//	The location of the read start in terms of base count (1 is beginning of spot).
	XsdGoPkgHasElem_BaseCOORDchoicesequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_BaseCoord_XsdtInteger_

	//	There are various methods to ordering the reads on the spot.
	//	A set of choices of expected basecalls for a current read. Read will be zero-length if none is
	//	found.
	XsdGoPkgHasElem_ExpectedBasecallTABLEchoicesequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_ExpectedBasecallTable_TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceChoiceExpectedBasecallTable_

	//	READ_INDEX starts at 0 and is incrementally increased for each sequential READ_SPEC within a
	//	SPOT_DECODE_SPEC
	XsdGoPkgHasElem_ReadINDEXsequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_ReadIndex_XsdtNonNegativeInteger_

	//	READ_LABEL is a name for this tag, and can be used to on output to determine read name, for example
	//	F or R.
	XsdGoPkgHasElem_ReadLABELsequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_ReadLabel_XsdtString_
}

//	If the WalkHandlers.TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpec function is not nil (ie. was set by outside code), calls it with this TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpec instance as the single argument. Then calls the Walk() method on 7/7 embed(s) and 0/0 field(s) belonging to this TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpec instance.
func (me *TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpec) Walk() (err error) {
	if fn := WalkHandlers.TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpec; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_RelativeORDERchoicesequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_RelativeOrder_TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceChoiceRelativeOrder_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_BaseCOORDchoicesequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_BaseCoord_XsdtInteger_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_ExpectedBasecallTABLEchoicesequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_ExpectedBasecallTable_TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceChoiceExpectedBasecallTable_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_ReadINDEXsequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_ReadIndex_XsdtNonNegativeInteger_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_ReadLABELsequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_ReadLabel_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_ReadCLASSsequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_ReadClass_TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceReadClass_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_ReadTYPEsequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_ReadType_TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceReadType_Forward.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_ReadSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_ReadSpec_TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpec_ struct {
	ReadSpecs []*TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpec `xml:"READ_SPEC"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_ReadSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_ReadSpec_TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpec_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ReadSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_ReadSpec_TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpec_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ReadSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_ReadSpec_TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpec_ instance.
func (me *XsdGoPkgHasElems_ReadSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_ReadSpec_TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpec_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_ReadSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_ReadSpec_TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpec_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.ReadSpecs {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdSpotDescriptorTypeChoiceSpotDecodeSpec struct {
	//	Number of base/color calls, cycles, or flows per spot (raw sequence length or flow length including all
	//	application and technical tags and mate pairs, but not including gap lengths). This value will be platform dependent,
	//	library dependent, and possibly run dependent. Variable length platforms will still have a constant flow/cycle length.
	XsdGoPkgHasElem_SpotLENGTHsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_SpotLength_XsdtNonNegativeInteger_

	XsdGoPkgHasElems_ReadSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_ReadSpec_TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpec_
}

//	If the WalkHandlers.TxsdSpotDescriptorTypeChoiceSpotDecodeSpec function is not nil (ie. was set by outside code), calls it with this TxsdSpotDescriptorTypeChoiceSpotDecodeSpec instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TxsdSpotDescriptorTypeChoiceSpotDecodeSpec instance.
func (me *TxsdSpotDescriptorTypeChoiceSpotDecodeSpec) Walk() (err error) {
	if fn := WalkHandlers.TxsdSpotDescriptorTypeChoiceSpotDecodeSpec; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_SpotLENGTHsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_SpotLength_XsdtNonNegativeInteger_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_ReadSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_ReadSpec_TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpec_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_InstrumentMODELallLS454ChoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceLs454AllInstrumentModel_ struct {
	InstrumentModels []TxsdPlatformTypeChoiceLs454AllInstrumentModel `xml:"INSTRUMENT_MODEL"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_InstrumentMODELallLS454ChoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceLs454AllInstrumentModel_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_InstrumentMODELallLS454ChoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceLs454AllInstrumentModel_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_InstrumentMODELallLS454ChoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceLs454AllInstrumentModel_ instance.
func (me *XsdGoPkgHasElems_InstrumentMODELallLS454ChoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceLs454AllInstrumentModel_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_InstrumentMODELallLS454ChoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceLs454AllInstrumentModel_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Suppress object from view, indexing, and download from public site as prescribed by INSDC rules.
//	The object is not removed from the Archive, and can be obtained again by accession if requested. Suppression is
//	explicit and there is no cascade suppression. User must take care to remove only objects that do not have active
//	references.
type XsdGoPkgHasElems_SUPPRESSchoiceTxsdSubmissionTypeSequenceActionsSequenceActionACTIONsequenceTxsdSubmissionTypeSequenceActionsACTIONSsequenceSubmissionTypeschema_Suppress_TxsdSubmissionTypeSequenceActionsSequenceActionChoiceSuppress_ struct {
	//	Suppress object from view, indexing, and download from public site as prescribed by INSDC rules.
	//	The object is not removed from the Archive, and can be obtained again by accession if requested. Suppression is
	//	explicit and there is no cascade suppression. User must take care to remove only objects that do not have active
	//	references.
	Suppresses []*TxsdSubmissionTypeSequenceActionsSequenceActionChoiceSuppress `xml:"SUPPRESS"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_SUPPRESSchoiceTxsdSubmissionTypeSequenceActionsSequenceActionACTIONsequenceTxsdSubmissionTypeSequenceActionsACTIONSsequenceSubmissionTypeschema_Suppress_TxsdSubmissionTypeSequenceActionsSequenceActionChoiceSuppress_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_SUPPRESSchoiceTxsdSubmissionTypeSequenceActionsSequenceActionACTIONsequenceTxsdSubmissionTypeSequenceActionsACTIONSsequenceSubmissionTypeschema_Suppress_TxsdSubmissionTypeSequenceActionsSequenceActionChoiceSuppress_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_SUPPRESSchoiceTxsdSubmissionTypeSequenceActionsSequenceActionACTIONsequenceTxsdSubmissionTypeSequenceActionsACTIONSsequenceSubmissionTypeschema_Suppress_TxsdSubmissionTypeSequenceActionsSequenceActionChoiceSuppress_ instance.
func (me *XsdGoPkgHasElems_SUPPRESSchoiceTxsdSubmissionTypeSequenceActionsSequenceActionACTIONsequenceTxsdSubmissionTypeSequenceActionsACTIONSsequenceSubmissionTypeschema_Suppress_TxsdSubmissionTypeSequenceActionsSequenceActionChoiceSuppress_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_SUPPRESSchoiceTxsdSubmissionTypeSequenceActionsSequenceActionACTIONsequenceTxsdSubmissionTypeSequenceActionsACTIONSsequenceSubmissionTypeschema_Suppress_TxsdSubmissionTypeSequenceActionsSequenceActionChoiceSuppress_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Suppresses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_SpotDecodeSPECchoiceSpotDescriptorTypeschema_SpotDecodeSpec_TxsdSpotDescriptorTypeChoiceSpotDecodeSpec_ struct {
	SpotDecodeSpecs []*TxsdSpotDescriptorTypeChoiceSpotDecodeSpec `xml:"SPOT_DECODE_SPEC"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_SpotDecodeSPECchoiceSpotDescriptorTypeschema_SpotDecodeSpec_TxsdSpotDescriptorTypeChoiceSpotDecodeSpec_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_SpotDecodeSPECchoiceSpotDescriptorTypeschema_SpotDecodeSpec_TxsdSpotDescriptorTypeChoiceSpotDecodeSpec_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_SpotDecodeSPECchoiceSpotDescriptorTypeschema_SpotDecodeSpec_TxsdSpotDescriptorTypeChoiceSpotDecodeSpec_ instance.
func (me *XsdGoPkgHasElems_SpotDecodeSPECchoiceSpotDescriptorTypeschema_SpotDecodeSpec_TxsdSpotDescriptorTypeChoiceSpotDecodeSpec_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_SpotDecodeSPECchoiceSpotDescriptorTypeschema_SpotDecodeSpec_TxsdSpotDescriptorTypeChoiceSpotDecodeSpec_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.SpotDecodeSpecs {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdPlatformTypeChoiceIlluminaSequenceInstrumentModel xsdt.String

//	Returns true if the value of this enumerated TxsdPlatformTypeChoiceIlluminaSequenceInstrumentModel is "Illumina HiSeq 2500".
func (me TxsdPlatformTypeChoiceIlluminaSequenceInstrumentModel) IsIlluminaHiSeq2500() bool {
	return me.String() == "Illumina HiSeq 2500"
}

//	Returns true if the value of this enumerated TxsdPlatformTypeChoiceIlluminaSequenceInstrumentModel is "unspecified".
func (me TxsdPlatformTypeChoiceIlluminaSequenceInstrumentModel) IsUnspecified() bool {
	return me.String() == "unspecified"
}

//	This convenience method just performs a simple type conversion to TxsdPlatformTypeChoiceIlluminaSequenceInstrumentModel's alias type xsdt.String.
func (me TxsdPlatformTypeChoiceIlluminaSequenceInstrumentModel) ToXsdtString() xsdt.String {
	return xsdt.String(me)
}

//	Returns true if the value of this enumerated TxsdPlatformTypeChoiceIlluminaSequenceInstrumentModel is "Illumina Genome Analyzer II".
func (me TxsdPlatformTypeChoiceIlluminaSequenceInstrumentModel) IsIlluminaGenomeAnalyzerIi() bool {
	return me.String() == "Illumina Genome Analyzer II"
}

//	Returns true if the value of this enumerated TxsdPlatformTypeChoiceIlluminaSequenceInstrumentModel is "Illumina HiSeq 2000".
func (me TxsdPlatformTypeChoiceIlluminaSequenceInstrumentModel) IsIlluminaHiSeq2000() bool {
	return me.String() == "Illumina HiSeq 2000"
}

//	Returns true if the value of this enumerated TxsdPlatformTypeChoiceIlluminaSequenceInstrumentModel is "Illumina HiSeq 1500".
func (me TxsdPlatformTypeChoiceIlluminaSequenceInstrumentModel) IsIlluminaHiSeq1500() bool {
	return me.String() == "Illumina HiSeq 1500"
}

//	Returns true if the value of this enumerated TxsdPlatformTypeChoiceIlluminaSequenceInstrumentModel is "Illumina HiSeq 1000".
func (me TxsdPlatformTypeChoiceIlluminaSequenceInstrumentModel) IsIlluminaHiSeq1000() bool {
	return me.String() == "Illumina HiSeq 1000"
}

//	Returns true if the value of this enumerated TxsdPlatformTypeChoiceIlluminaSequenceInstrumentModel is "Illumina HiScanSQ".
func (me TxsdPlatformTypeChoiceIlluminaSequenceInstrumentModel) IsIlluminaHiScanSQ() bool {
	return me.String() == "Illumina HiScanSQ"
}

//	Since TxsdPlatformTypeChoiceIlluminaSequenceInstrumentModel is just a simple String type, this merely returns the current string value.
func (me TxsdPlatformTypeChoiceIlluminaSequenceInstrumentModel) String() string {
	return xsdt.String(me).String()
}

//	Returns true if the value of this enumerated TxsdPlatformTypeChoiceIlluminaSequenceInstrumentModel is "Illumina Genome Analyzer".
func (me TxsdPlatformTypeChoiceIlluminaSequenceInstrumentModel) IsIlluminaGenomeAnalyzer() bool {
	return me.String() == "Illumina Genome Analyzer"
}

//	Returns true if the value of this enumerated TxsdPlatformTypeChoiceIlluminaSequenceInstrumentModel is "Illumina MiSeq".
func (me TxsdPlatformTypeChoiceIlluminaSequenceInstrumentModel) IsIlluminaMiSeq() bool {
	return me.String() == "Illumina MiSeq"
}

//	Returns true if the value of this enumerated TxsdPlatformTypeChoiceIlluminaSequenceInstrumentModel is "HiSeq X Ten".
func (me TxsdPlatformTypeChoiceIlluminaSequenceInstrumentModel) IsHiSeqXTen() bool {
	return me.String() == "HiSeq X Ten"
}

//	Returns true if the value of this enumerated TxsdPlatformTypeChoiceIlluminaSequenceInstrumentModel is "NextSeq 500".
func (me TxsdPlatformTypeChoiceIlluminaSequenceInstrumentModel) IsNextSeq500() bool {
	return me.String() == "NextSeq 500"
}

//	Since TxsdPlatformTypeChoiceIlluminaSequenceInstrumentModel is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdPlatformTypeChoiceIlluminaSequenceInstrumentModel) Set(s string) {
	(*xsdt.String)(me).Set(s)
}

//	Returns true if the value of this enumerated TxsdPlatformTypeChoiceIlluminaSequenceInstrumentModel is "Illumina Genome Analyzer IIx".
func (me TxsdPlatformTypeChoiceIlluminaSequenceInstrumentModel) IsIlluminaGenomeAnalyzerIIx() bool {
	return me.String() == "Illumina Genome Analyzer IIx"
}

type XsdGoPkgHasElems_InstrumentMODELsequenceILLUMINAchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceIlluminaSequenceInstrumentModel_ struct {
	InstrumentModels []TxsdPlatformTypeChoiceIlluminaSequenceInstrumentModel `xml:"INSTRUMENT_MODEL"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_InstrumentMODELsequenceILLUMINAchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceIlluminaSequenceInstrumentModel_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_InstrumentMODELsequenceILLUMINAchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceIlluminaSequenceInstrumentModel_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_InstrumentMODELsequenceILLUMINAchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceIlluminaSequenceInstrumentModel_ instance.
func (me *XsdGoPkgHasElems_InstrumentMODELsequenceILLUMINAchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceIlluminaSequenceInstrumentModel_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_InstrumentMODELsequenceILLUMINAchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceIlluminaSequenceInstrumentModel_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Generic processing pipeline specification.
//	The PipelineType identifies the sequence or tree of actions to process the sequencing data.
//	Name of the program or process for primary analysis. This may include a test or condition that leads to
//	branching in the workflow.
type XsdGoPkgHasElem_PROGRAMsequencePIPESECTIONsequencePipelineTypeschema_Program_XsdtString_ struct {
	//	Name of the program or process for primary analysis. This may include a test or condition that leads to
	//	branching in the workflow.
	Program xsdt.String `xml:"PROGRAM"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_PROGRAMsequencePIPESECTIONsequencePipelineTypeschema_Program_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_PROGRAMsequencePIPESECTIONsequencePipelineTypeschema_Program_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_PROGRAMsequencePIPESECTIONsequencePipelineTypeschema_Program_XsdtString_ instance.
func (me *XsdGoPkgHasElem_PROGRAMsequencePIPESECTIONsequencePipelineTypeschema_Program_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_PROGRAMsequencePIPESECTIONsequencePipelineTypeschema_Program_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Version of the program or process for primary analysis.
type XsdGoPkgHasElem_VERSIONsequencePIPESECTIONsequencePipelineTypeschema_Version_XsdtString_ struct {
	//	Version of the program or process for primary analysis.
	Version xsdt.String `xml:"VERSION"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_VERSIONsequencePIPESECTIONsequencePipelineTypeschema_Version_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_VERSIONsequencePIPESECTIONsequencePipelineTypeschema_Version_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_VERSIONsequencePIPESECTIONsequencePipelineTypeschema_Version_XsdtString_ instance.
func (me *XsdGoPkgHasElem_VERSIONsequencePIPESECTIONsequencePipelineTypeschema_Version_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_VERSIONsequencePIPESECTIONsequencePipelineTypeschema_Version_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Notes about the program or process for primary analysis.
type XsdGoPkgHasElem_NOTESsequencePIPESECTIONsequencePipelineTypeschema_Notes_XsdtString_ struct {
	//	Notes about the program or process for primary analysis.
	Notes xsdt.String `xml:"NOTES"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_NOTESsequencePIPESECTIONsequencePipelineTypeschema_Notes_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_NOTESsequencePIPESECTIONsequencePipelineTypeschema_Notes_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_NOTESsequencePIPESECTIONsequencePipelineTypeschema_Notes_XsdtString_ instance.
func (me *XsdGoPkgHasElem_NOTESsequencePIPESECTIONsequencePipelineTypeschema_Notes_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_NOTESsequencePIPESECTIONsequencePipelineTypeschema_Notes_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Name of the processing pipeline section.
type XsdGoPkgHasAttr_SectionName_XsdtString_ struct {
	//	Name of the processing pipeline section.
	SectionName xsdt.String `xml:"section_name,attr"`
}

//	STEP_INDEX of the previous step in the workflow. Set toNIL if the first pipe section.
type XsdGoPkgHasElems_PrevStepINDEXsequencePIPESECTIONsequencePipelineTypeschema_PrevStepIndex_XsdtString_ struct {
	//	STEP_INDEX of the previous step in the workflow. Set toNIL if the first pipe section.
	PrevStepIndexs []xsdt.String `xml:"PREV_STEP_INDEX"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_PrevStepINDEXsequencePIPESECTIONsequencePipelineTypeschema_PrevStepIndex_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_PrevStepINDEXsequencePIPESECTIONsequencePipelineTypeschema_PrevStepIndex_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_PrevStepINDEXsequencePIPESECTIONsequencePipelineTypeschema_PrevStepIndex_XsdtString_ instance.
func (me *XsdGoPkgHasElems_PrevStepINDEXsequencePIPESECTIONsequencePipelineTypeschema_PrevStepIndex_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_PrevStepINDEXsequencePIPESECTIONsequencePipelineTypeschema_PrevStepIndex_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdPipelineTypeSequencePipeSection struct {
	//	Version of the program or process for primary analysis.
	XsdGoPkgHasElem_VERSIONsequencePIPESECTIONsequencePipelineTypeschema_Version_XsdtString_

	//	Notes about the program or process for primary analysis.
	XsdGoPkgHasElem_NOTESsequencePIPESECTIONsequencePipelineTypeschema_Notes_XsdtString_

	//	Name of the processing pipeline section.
	XsdGoPkgHasAttr_SectionName_XsdtString_

	//	Lexically ordered value that allows for the pipe section to be hierarchically ordered. The float
	//	primitive data type is used to allow for pipe sections to be inserted later on.
	XsdGoPkgHasElem_StepINDEXsequencePIPESECTIONsequencePipelineTypeschema_StepIndex_XsdtString_

	//	STEP_INDEX of the previous step in the workflow. Set toNIL if the first pipe section.
	XsdGoPkgHasElems_PrevStepINDEXsequencePIPESECTIONsequencePipelineTypeschema_PrevStepIndex_XsdtString_

	//	Name of the program or process for primary analysis. This may include a test or condition that leads to
	//	branching in the workflow.
	XsdGoPkgHasElem_PROGRAMsequencePIPESECTIONsequencePipelineTypeschema_Program_XsdtString_
}

//	If the WalkHandlers.TxsdPipelineTypeSequencePipeSection function is not nil (ie. was set by outside code), calls it with this TxsdPipelineTypeSequencePipeSection instance as the single argument. Then calls the Walk() method on 5/6 embed(s) and 0/0 field(s) belonging to this TxsdPipelineTypeSequencePipeSection instance.
func (me *TxsdPipelineTypeSequencePipeSection) Walk() (err error) {
	if fn := WalkHandlers.TxsdPipelineTypeSequencePipeSection; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_StepINDEXsequencePIPESECTIONsequencePipelineTypeschema_StepIndex_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_PrevStepINDEXsequencePIPESECTIONsequencePipelineTypeschema_PrevStepIndex_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_PROGRAMsequencePIPESECTIONsequencePipelineTypeschema_Program_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_VERSIONsequencePIPESECTIONsequencePipelineTypeschema_Version_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_NOTESsequencePIPESECTIONsequencePipelineTypeschema_Notes_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_PipeSECTIONsequencePipelineTypeschema_PipeSection_TxsdPipelineTypeSequencePipeSection_ struct {
	PipeSections []*TxsdPipelineTypeSequencePipeSection `xml:"PIPE_SECTION"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_PipeSECTIONsequencePipelineTypeschema_PipeSection_TxsdPipelineTypeSequencePipeSection_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_PipeSECTIONsequencePipelineTypeschema_PipeSection_TxsdPipelineTypeSequencePipeSection_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_PipeSECTIONsequencePipelineTypeschema_PipeSection_TxsdPipelineTypeSequencePipeSection_ instance.
func (me *XsdGoPkgHasElems_PipeSECTIONsequencePipelineTypeschema_PipeSection_TxsdPipelineTypeSequencePipeSection_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_PipeSECTIONsequencePipelineTypeschema_PipeSection_TxsdPipelineTypeSequencePipeSection_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.PipeSections {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TPipelineType struct {
	XsdGoPkgHasElems_PipeSECTIONsequencePipelineTypeschema_PipeSection_TxsdPipelineTypeSequencePipeSection_
}

//	If the WalkHandlers.TPipelineType function is not nil (ie. was set by outside code), calls it with this TPipelineType instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this TPipelineType instance.
func (me *TPipelineType) Walk() (err error) {
	if fn := WalkHandlers.TPipelineType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_PipeSECTIONsequencePipelineTypeschema_PipeSection_TxsdPipelineTypeSequencePipeSection_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_PIPELINEsequenceProcessingTypeschema_Pipeline_TPipelineType_ struct {
	//	Generic processing pipeline specification.
	Pipeline *TPipelineType `xml:"PIPELINE"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_PIPELINEsequenceProcessingTypeschema_Pipeline_TPipelineType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_PIPELINEsequenceProcessingTypeschema_Pipeline_TPipelineType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_PIPELINEsequenceProcessingTypeschema_Pipeline_TPipelineType_ instance.
func (me *XsdGoPkgHasElem_PIPELINEsequenceProcessingTypeschema_Pipeline_TPipelineType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_PIPELINEsequenceProcessingTypeschema_Pipeline_TPipelineType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Pipeline.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Processing directives tell the Sequence Read Archive how to treat the input data, if any treatment is
//	requested.
//	Tells the Archive who will execute the sample demultiplexing operation..
type TxsdSequencingDirectivesTypeAllSampleDemuxDirective xsdt.String

//	Since TxsdSequencingDirectivesTypeAllSampleDemuxDirective is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdSequencingDirectivesTypeAllSampleDemuxDirective) Set(s string) {
	(*xsdt.String)(me).Set(s)
}

//	Since TxsdSequencingDirectivesTypeAllSampleDemuxDirective is just a simple String type, this merely returns the current string value.
func (me TxsdSequencingDirectivesTypeAllSampleDemuxDirective) String() string {
	return xsdt.String(me).String()
}

//	This convenience method just performs a simple type conversion to TxsdSequencingDirectivesTypeAllSampleDemuxDirective's alias type xsdt.String.
func (me TxsdSequencingDirectivesTypeAllSampleDemuxDirective) ToXsdtString() xsdt.String {
	return xsdt.String(me)
}

//	Returns true if the value of this enumerated TxsdSequencingDirectivesTypeAllSampleDemuxDirective is "leave_as_pool".
func (me TxsdSequencingDirectivesTypeAllSampleDemuxDirective) IsLeaveAsPool() bool {
	return me.String() == "leave_as_pool"
}

//	Returns true if the value of this enumerated TxsdSequencingDirectivesTypeAllSampleDemuxDirective is "submitter_demultiplexed".
func (me TxsdSequencingDirectivesTypeAllSampleDemuxDirective) IsSubmitterDemultiplexed() bool {
	return me.String() == "submitter_demultiplexed"
}

type XsdGoPkgHasElem_SampleDemuxDIRECTIVEallSequencingDirectivesTypeschema_SampleDemuxDirective_TxsdSequencingDirectivesTypeAllSampleDemuxDirective_ struct {
	//	Tells the Archive who will execute the sample demultiplexing operation..
	SampleDemuxDirective TxsdSequencingDirectivesTypeAllSampleDemuxDirective `xml:"SAMPLE_DEMUX_DIRECTIVE"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_SampleDemuxDIRECTIVEallSequencingDirectivesTypeschema_SampleDemuxDirective_TxsdSequencingDirectivesTypeAllSampleDemuxDirective_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_SampleDemuxDIRECTIVEallSequencingDirectivesTypeschema_SampleDemuxDirective_TxsdSequencingDirectivesTypeAllSampleDemuxDirective_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_SampleDemuxDIRECTIVEallSequencingDirectivesTypeschema_SampleDemuxDirective_TxsdSequencingDirectivesTypeAllSampleDemuxDirective_ instance.
func (me *XsdGoPkgHasElem_SampleDemuxDIRECTIVEallSequencingDirectivesTypeschema_SampleDemuxDirective_TxsdSequencingDirectivesTypeAllSampleDemuxDirective_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_SampleDemuxDIRECTIVEallSequencingDirectivesTypeschema_SampleDemuxDirective_TxsdSequencingDirectivesTypeAllSampleDemuxDirective_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TSequencingDirectivesType struct {
	//	Tells the Archive who will execute the sample demultiplexing operation..
	XsdGoPkgHasElem_SampleDemuxDIRECTIVEallSequencingDirectivesTypeschema_SampleDemuxDirective_TxsdSequencingDirectivesTypeAllSampleDemuxDirective_
}

//	If the WalkHandlers.TSequencingDirectivesType function is not nil (ie. was set by outside code), calls it with this TSequencingDirectivesType instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this TSequencingDirectivesType instance.
func (me *TSequencingDirectivesType) Walk() (err error) {
	if fn := WalkHandlers.TSequencingDirectivesType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_SampleDemuxDIRECTIVEallSequencingDirectivesTypeschema_SampleDemuxDirective_TxsdSequencingDirectivesTypeAllSampleDemuxDirective_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_DIRECTIVESsequenceProcessingTypeschema_Directives_TSequencingDirectivesType_ struct {
	//	Processing directives tell the Sequence Read Archive how to treat the input data, if any treatment is
	//	requested.
	Directives *TSequencingDirectivesType `xml:"DIRECTIVES"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_DIRECTIVESsequenceProcessingTypeschema_Directives_TSequencingDirectivesType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_DIRECTIVESsequenceProcessingTypeschema_Directives_TSequencingDirectivesType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_DIRECTIVESsequenceProcessingTypeschema_Directives_TSequencingDirectivesType_ instance.
func (me *XsdGoPkgHasElem_DIRECTIVESsequenceProcessingTypeschema_Directives_TSequencingDirectivesType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_DIRECTIVESsequenceProcessingTypeschema_Directives_TSequencingDirectivesType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Directives.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TProcessingType struct {
	//	Generic processing pipeline specification.
	XsdGoPkgHasElem_PIPELINEsequenceProcessingTypeschema_Pipeline_TPipelineType_

	//	Processing directives tell the Sequence Read Archive how to treat the input data, if any treatment is
	//	requested.
	XsdGoPkgHasElem_DIRECTIVESsequenceProcessingTypeschema_Directives_TSequencingDirectivesType_
}

//	If the WalkHandlers.TProcessingType function is not nil (ie. was set by outside code), calls it with this TProcessingType instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TProcessingType instance.
func (me *TProcessingType) Walk() (err error) {
	if fn := WalkHandlers.TProcessingType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_PIPELINEsequenceProcessingTypeschema_Pipeline_TPipelineType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_DIRECTIVESsequenceProcessingTypeschema_Directives_TSequencingDirectivesType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Value of the attribute.
type XsdGoPkgHasElems_VALUEallAttributeTypeschema_Value_XsdtString_ struct {
	//	Value of the attribute.
	Values []xsdt.String `xml:"VALUE"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_VALUEallAttributeTypeschema_Value_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_VALUEallAttributeTypeschema_Value_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_VALUEallAttributeTypeschema_Value_XsdtString_ instance.
func (me *XsdGoPkgHasElems_VALUEallAttributeTypeschema_Value_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_VALUEallAttributeTypeschema_Value_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_InstrumentMODELsequenceCAPILLARYchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceCapillarySequenceInstrumentModel_ struct {
	InstrumentModels []TxsdPlatformTypeChoiceCapillarySequenceInstrumentModel `xml:"INSTRUMENT_MODEL"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_InstrumentMODELsequenceCAPILLARYchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceCapillarySequenceInstrumentModel_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_InstrumentMODELsequenceCAPILLARYchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceCapillarySequenceInstrumentModel_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_InstrumentMODELsequenceCAPILLARYchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceCapillarySequenceInstrumentModel_ instance.
func (me *XsdGoPkgHasElems_InstrumentMODELsequenceCAPILLARYchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceCapillarySequenceInstrumentModel_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_InstrumentMODELsequenceCAPILLARYchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceCapillarySequenceInstrumentModel_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_ReadSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_ReadSpec_TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpec_ struct {
	ReadSpec *TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpec `xml:"READ_SPEC"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_ReadSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_ReadSpec_TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpec_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ReadSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_ReadSpec_TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpec_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_ReadSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_ReadSpec_TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpec_ instance.
func (me *XsdGoPkgHasElem_ReadSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_ReadSpec_TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpec_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_ReadSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_ReadSpec_TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpec_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.ReadSpec.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Version of the program or process for primary analysis.
type XsdGoPkgHasElems_VERSIONsequencePIPESECTIONsequencePipelineTypeschema_Version_XsdtString_ struct {
	//	Version of the program or process for primary analysis.
	Versions []xsdt.String `xml:"VERSION"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_VERSIONsequencePIPESECTIONsequencePipelineTypeschema_Version_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_VERSIONsequencePIPESECTIONsequencePipelineTypeschema_Version_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_VERSIONsequencePIPESECTIONsequencePipelineTypeschema_Version_XsdtString_ instance.
func (me *XsdGoPkgHasElems_VERSIONsequencePIPESECTIONsequencePipelineTypeschema_Version_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_VERSIONsequencePIPESECTIONsequencePipelineTypeschema_Version_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_ReadCLASSsequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_ReadClass_TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceReadClass_ struct {
	ReadClasses []TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceReadClass `xml:"READ_CLASS"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_ReadCLASSsequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_ReadClass_TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceReadClass_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ReadCLASSsequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_ReadClass_TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceReadClass_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ReadCLASSsequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_ReadClass_TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceReadClass_ instance.
func (me *XsdGoPkgHasElems_ReadCLASSsequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_ReadClass_TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceReadClass_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_ReadCLASSsequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_ReadClass_TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceReadClass_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Oxford Nanopore platform type. nanopore-based electronic single molecule analysis
type XsdGoPkgHasElem_OxfordNANOPOREchoicePlatformTypeschema_OxfordNanopore_TxsdPlatformTypeChoiceOxfordNanopore_ struct {
	//	Oxford Nanopore platform type. nanopore-based electronic single molecule analysis
	OxfordNanopore *TxsdPlatformTypeChoiceOxfordNanopore `xml:"OXFORD_NANOPORE"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_OxfordNANOPOREchoicePlatformTypeschema_OxfordNanopore_TxsdPlatformTypeChoiceOxfordNanopore_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_OxfordNANOPOREchoicePlatformTypeschema_OxfordNanopore_TxsdPlatformTypeChoiceOxfordNanopore_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_OxfordNANOPOREchoicePlatformTypeschema_OxfordNanopore_TxsdPlatformTypeChoiceOxfordNanopore_ instance.
func (me *XsdGoPkgHasElem_OxfordNANOPOREchoicePlatformTypeschema_OxfordNanopore_TxsdPlatformTypeChoiceOxfordNanopore_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_OxfordNANOPOREchoicePlatformTypeschema_OxfordNanopore_TxsdPlatformTypeChoiceOxfordNanopore_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.OxfordNanopore.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Sequencers based on capillary electrophoresis technology manufactured by LifeTech (formerly Applied
//	BioSciences).
type XsdGoPkgHasElems_CAPILLARYchoicePlatformTypeschema_Capillary_TxsdPlatformTypeChoiceCapillary_ struct {
	//	Sequencers based on capillary electrophoresis technology manufactured by LifeTech (formerly Applied
	//	BioSciences).
	Capillaries []*TxsdPlatformTypeChoiceCapillary `xml:"CAPILLARY"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_CAPILLARYchoicePlatformTypeschema_Capillary_TxsdPlatformTypeChoiceCapillary_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_CAPILLARYchoicePlatformTypeschema_Capillary_TxsdPlatformTypeChoiceCapillary_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_CAPILLARYchoicePlatformTypeschema_Capillary_TxsdPlatformTypeChoiceCapillary_ instance.
func (me *XsdGoPkgHasElems_CAPILLARYchoicePlatformTypeschema_Capillary_TxsdPlatformTypeChoiceCapillary_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_CAPILLARYchoicePlatformTypeschema_Capillary_TxsdPlatformTypeChoiceCapillary_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Capillaries {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasCdata struct {
	XsdGoPkgCDATA string `xml:",chardata"`
}

//	If the WalkHandlers.XsdGoPkgHasCdata function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasCdata instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasCdata instance.
func (me *XsdGoPkgHasCdata) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasCdata; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	A secondary or defunct primary key in an INSDC primary data database.
type XsdGoPkgHasElem_SecondaryIDsequenceIdentifierTypeschema_SecondaryId_TNameAndLabelType_ struct {
	//	A secondary or defunct primary key in an INSDC primary data database.
	SecondaryId *TNameAndLabelType `xml:"SECONDARY_ID"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_SecondaryIDsequenceIdentifierTypeschema_SecondaryId_TNameAndLabelType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_SecondaryIDsequenceIdentifierTypeschema_SecondaryId_TNameAndLabelType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_SecondaryIDsequenceIdentifierTypeschema_SecondaryId_TNameAndLabelType_ instance.
func (me *XsdGoPkgHasElem_SecondaryIDsequenceIdentifierTypeschema_SecondaryId_TNameAndLabelType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_SecondaryIDsequenceIdentifierTypeschema_SecondaryId_TNameAndLabelType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.SecondaryId.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Whether the reference alignment includes unaligned reads.
type XsdGoPkgHasElems_AlignmentIncludesUnalignedReadsallAlignmentDirectivesTypeschema_AlignmentIncludesUnalignedReads_XsdtBoolean_ struct {
	//	Whether the reference alignment includes unaligned reads.
	AlignmentIncludesUnalignedReadses []xsdt.Boolean `xml:"alignment_includes_unaligned_reads"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_AlignmentIncludesUnalignedReadsallAlignmentDirectivesTypeschema_AlignmentIncludesUnalignedReads_XsdtBoolean_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_AlignmentIncludesUnalignedReadsallAlignmentDirectivesTypeschema_AlignmentIncludesUnalignedReads_XsdtBoolean_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_AlignmentIncludesUnalignedReadsallAlignmentDirectivesTypeschema_AlignmentIncludesUnalignedReads_XsdtBoolean_ instance.
func (me *XsdGoPkgHasElems_AlignmentIncludesUnalignedReadsallAlignmentDirectivesTypeschema_AlignmentIncludesUnalignedReads_XsdtBoolean_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_AlignmentIncludesUnalignedReadsallAlignmentDirectivesTypeschema_AlignmentIncludesUnalignedReads_XsdtBoolean_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Element's body contains a basecall, attribute provide description of this read meaning as
//	well as matching rules.
type XsdGoPkgHasElem_BASECALLsequenceEXPECTEDBasecallTABLEchoicesequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_Basecall_TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceChoiceExpectedBasecallTableSequenceBasecall_ struct {
	//	Element's body contains a basecall, attribute provide description of this read meaning as
	//	well as matching rules.
	Basecall *TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceChoiceExpectedBasecallTableSequenceBasecall `xml:"BASECALL"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_BASECALLsequenceEXPECTEDBasecallTABLEchoicesequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_Basecall_TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceChoiceExpectedBasecallTableSequenceBasecall_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_BASECALLsequenceEXPECTEDBasecallTABLEchoicesequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_Basecall_TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceChoiceExpectedBasecallTableSequenceBasecall_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_BASECALLsequenceEXPECTEDBasecallTABLEchoicesequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_Basecall_TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceChoiceExpectedBasecallTableSequenceBasecall_ instance.
func (me *XsdGoPkgHasElem_BASECALLsequenceEXPECTEDBasecallTABLEchoicesequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_Basecall_TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceChoiceExpectedBasecallTableSequenceBasecall_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_BASECALLsequenceEXPECTEDBasecallTABLEchoicesequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_Basecall_TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceChoiceExpectedBasecallTableSequenceBasecall_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Basecall.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Short text that can be used to call out submission records in searches or in displays. This element is strictly
//	optional and is useful mainly to submitters who wish to reference their submission, rather than underlying study or experiment.
type XsdGoPkgHasElems_TITLEsequenceSubmissionTypeschema_Title_XsdtString_ struct {
	//	Short text that can be used to call out submission records in searches or in displays. This element is strictly
	//	optional and is useful mainly to submitters who wish to reference their submission, rather than underlying study or experiment.
	Titles []xsdt.String `xml:"TITLE"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_TITLEsequenceSubmissionTypeschema_Title_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_TITLEsequenceSubmissionTypeschema_Title_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_TITLEsequenceSubmissionTypeschema_Title_XsdtString_ instance.
func (me *XsdGoPkgHasElems_TITLEsequenceSubmissionTypeschema_Title_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_TITLEsequenceSubmissionTypeschema_Title_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Accession string meaningful to the NCBI Entrez system.
type XsdGoPkgHasElems_QUERYchoicesequenceENTREZLINKchoiceLinkTypeschema_Query_XsdtString_ struct {
	//	Accession string meaningful to the NCBI Entrez system.
	Queries []xsdt.String `xml:"QUERY"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_QUERYchoicesequenceENTREZLINKchoiceLinkTypeschema_Query_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_QUERYchoicesequenceENTREZLINKchoiceLinkTypeschema_Query_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_QUERYchoicesequenceENTREZLINKchoiceLinkTypeschema_Query_XsdtString_ instance.
func (me *XsdGoPkgHasElems_QUERYchoicesequenceENTREZLINKchoiceLinkTypeschema_Query_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_QUERYchoicesequenceENTREZLINKchoiceLinkTypeschema_Query_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The location of the read start in terms of base count (1 is beginning of spot).
type XsdGoPkgHasElems_BaseCOORDchoicesequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_BaseCoord_XsdtInteger_ struct {
	//	The location of the read start in terms of base count (1 is beginning of spot).
	BaseCoords []*xsdt.Integer `xml:"BASE_COORD"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_BaseCOORDchoicesequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_BaseCoord_XsdtInteger_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_BaseCOORDchoicesequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_BaseCoord_XsdtInteger_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_BaseCOORDchoicesequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_BaseCoord_XsdtInteger_ instance.
func (me *XsdGoPkgHasElems_BaseCOORDchoicesequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_BaseCoord_XsdtInteger_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_BaseCOORDchoicesequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_BaseCoord_XsdtInteger_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Tells the Archive who will execute the sample demultiplexing operation..
type XsdGoPkgHasElems_SampleDemuxDIRECTIVEallSequencingDirectivesTypeschema_SampleDemuxDirective_TxsdSequencingDirectivesTypeAllSampleDemuxDirective_ struct {
	//	Tells the Archive who will execute the sample demultiplexing operation..
	SampleDemuxDirectives []TxsdSequencingDirectivesTypeAllSampleDemuxDirective `xml:"SAMPLE_DEMUX_DIRECTIVE"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_SampleDemuxDIRECTIVEallSequencingDirectivesTypeschema_SampleDemuxDirective_TxsdSequencingDirectivesTypeAllSampleDemuxDirective_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_SampleDemuxDIRECTIVEallSequencingDirectivesTypeschema_SampleDemuxDirective_TxsdSequencingDirectivesTypeAllSampleDemuxDirective_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_SampleDemuxDIRECTIVEallSequencingDirectivesTypeschema_SampleDemuxDirective_TxsdSequencingDirectivesTypeAllSampleDemuxDirective_ instance.
func (me *XsdGoPkgHasElems_SampleDemuxDIRECTIVEallSequencingDirectivesTypeschema_SampleDemuxDirective_TxsdSequencingDirectivesTypeAllSampleDemuxDirective_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_SampleDemuxDIRECTIVEallSequencingDirectivesTypeschema_SampleDemuxDirective_TxsdSequencingDirectivesTypeAllSampleDemuxDirective_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Process the submission but do not archive anything or issue valid accessions for any object.
type XsdGoPkgHasElems_VALIDATEchoiceACTIONsequenceACTIONSsequenceSubmissionTypeschema_Validate_TxsdSubmissionTypeSequenceActionsSequenceActionChoiceValidate_ struct {
	//	Process the submission but do not archive anything or issue valid accessions for any object.
	Validates []*TxsdSubmissionTypeSequenceActionsSequenceActionChoiceValidate `xml:"VALIDATE"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_VALIDATEchoiceACTIONsequenceACTIONSsequenceSubmissionTypeschema_Validate_TxsdSubmissionTypeSequenceActionsSequenceActionChoiceValidate_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_VALIDATEchoiceACTIONsequenceACTIONSsequenceSubmissionTypeschema_Validate_TxsdSubmissionTypeSequenceActionsSequenceActionChoiceValidate_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_VALIDATEchoiceACTIONsequenceACTIONSsequenceSubmissionTypeschema_Validate_TxsdSubmissionTypeSequenceActionsSequenceActionChoiceValidate_ instance.
func (me *XsdGoPkgHasElems_VALIDATEchoiceACTIONsequenceACTIONSsequenceSubmissionTypeschema_Validate_TxsdSubmissionTypeSequenceActionsSequenceActionChoiceValidate_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_VALIDATEchoiceACTIONsequenceACTIONSsequenceSubmissionTypeschema_Validate_TxsdSubmissionTypeSequenceActionsSequenceActionChoiceValidate_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Validates {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	PacificBiosciences platform type for the single molecule real time (SMRT) technology.
type TxsdPlatformTypeChoicePacbioSmrtSequenceInstrumentModel xsdt.String

//	Since TxsdPlatformTypeChoicePacbioSmrtSequenceInstrumentModel is just a simple String type, this merely returns the current string value.
func (me TxsdPlatformTypeChoicePacbioSmrtSequenceInstrumentModel) String() string {
	return xsdt.String(me).String()
}

//	This convenience method just performs a simple type conversion to TxsdPlatformTypeChoicePacbioSmrtSequenceInstrumentModel's alias type xsdt.String.
func (me TxsdPlatformTypeChoicePacbioSmrtSequenceInstrumentModel) ToXsdtString() xsdt.String {
	return xsdt.String(me)
}

//	Returns true if the value of this enumerated TxsdPlatformTypeChoicePacbioSmrtSequenceInstrumentModel is "PacBio RS".
func (me TxsdPlatformTypeChoicePacbioSmrtSequenceInstrumentModel) IsPacBioRs() bool {
	return me.String() == "PacBio RS"
}

//	Returns true if the value of this enumerated TxsdPlatformTypeChoicePacbioSmrtSequenceInstrumentModel is "PacBio RS II".
func (me TxsdPlatformTypeChoicePacbioSmrtSequenceInstrumentModel) IsPacBioRsIi() bool {
	return me.String() == "PacBio RS II"
}

//	Since TxsdPlatformTypeChoicePacbioSmrtSequenceInstrumentModel is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdPlatformTypeChoicePacbioSmrtSequenceInstrumentModel) Set(s string) {
	(*xsdt.String)(me).Set(s)
}

type XsdGoPkgHasElem_InstrumentMODELsequencePACBIOSMRTchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoicePacbioSmrtSequenceInstrumentModel_ struct {
	InstrumentModel TxsdPlatformTypeChoicePacbioSmrtSequenceInstrumentModel `xml:"INSTRUMENT_MODEL"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_InstrumentMODELsequencePACBIOSMRTchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoicePacbioSmrtSequenceInstrumentModel_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_InstrumentMODELsequencePACBIOSMRTchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoicePacbioSmrtSequenceInstrumentModel_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_InstrumentMODELsequencePACBIOSMRTchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoicePacbioSmrtSequenceInstrumentModel_ instance.
func (me *XsdGoPkgHasElem_InstrumentMODELsequencePACBIOSMRTchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoicePacbioSmrtSequenceInstrumentModel_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_InstrumentMODELsequencePACBIOSMRTchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoicePacbioSmrtSequenceInstrumentModel_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdPlatformTypeChoicePacbioSmrt struct {
	XsdGoPkgHasElem_InstrumentMODELsequencePACBIOSMRTchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoicePacbioSmrtSequenceInstrumentModel_
}

//	If the WalkHandlers.TxsdPlatformTypeChoicePacbioSmrt function is not nil (ie. was set by outside code), calls it with this TxsdPlatformTypeChoicePacbioSmrt instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this TxsdPlatformTypeChoicePacbioSmrt instance.
func (me *TxsdPlatformTypeChoicePacbioSmrt) Walk() (err error) {
	if fn := WalkHandlers.TxsdPlatformTypeChoicePacbioSmrt; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_InstrumentMODELsequencePACBIOSMRTchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoicePacbioSmrtSequenceInstrumentModel_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_PacbioSMRTchoicePlatformTypeschema_PacbioSmrt_TxsdPlatformTypeChoicePacbioSmrt_ struct {
	//	PacificBiosciences platform type for the single molecule real time (SMRT) technology.
	PacbioSmrts []*TxsdPlatformTypeChoicePacbioSmrt `xml:"PACBIO_SMRT"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_PacbioSMRTchoicePlatformTypeschema_PacbioSmrt_TxsdPlatformTypeChoicePacbioSmrt_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_PacbioSMRTchoicePlatformTypeschema_PacbioSmrt_TxsdPlatformTypeChoicePacbioSmrt_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_PacbioSMRTchoicePlatformTypeschema_PacbioSmrt_TxsdPlatformTypeChoicePacbioSmrt_ instance.
func (me *XsdGoPkgHasElems_PacbioSMRTchoicePlatformTypeschema_PacbioSmrt_TxsdPlatformTypeChoicePacbioSmrt_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_PacbioSMRTchoicePlatformTypeschema_PacbioSmrt_TxsdPlatformTypeChoicePacbioSmrt_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.PacbioSmrts {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	STEP_INDEX of the previous step in the workflow. Set toNIL if the first pipe section.
type XsdGoPkgHasElem_PrevStepINDEXsequencePIPESECTIONsequencePipelineTypeschema_PrevStepIndex_XsdtString_ struct {
	//	STEP_INDEX of the previous step in the workflow. Set toNIL if the first pipe section.
	PrevStepIndex xsdt.String `xml:"PREV_STEP_INDEX"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_PrevStepINDEXsequencePIPESECTIONsequencePipelineTypeschema_PrevStepIndex_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_PrevStepINDEXsequencePIPESECTIONsequencePipelineTypeschema_PrevStepIndex_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_PrevStepINDEXsequencePIPESECTIONsequencePipelineTypeschema_PrevStepIndex_XsdtString_ instance.
func (me *XsdGoPkgHasElem_PrevStepINDEXsequencePIPESECTIONsequencePipelineTypeschema_PrevStepIndex_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_PrevStepINDEXsequencePIPESECTIONsequencePipelineTypeschema_PrevStepIndex_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_ACTIONSsequenceSubmissionTypeschema_Actions_TxsdSubmissionTypeSequenceActions_ struct {
	Actionses []*TxsdSubmissionTypeSequenceActions `xml:"ACTIONS"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_ACTIONSsequenceSubmissionTypeschema_Actions_TxsdSubmissionTypeSequenceActions_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ACTIONSsequenceSubmissionTypeschema_Actions_TxsdSubmissionTypeSequenceActions_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ACTIONSsequenceSubmissionTypeschema_Actions_TxsdSubmissionTypeSequenceActions_ instance.
func (me *XsdGoPkgHasElems_ACTIONSsequenceSubmissionTypeschema_Actions_TxsdSubmissionTypeSequenceActions_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_ACTIONSsequenceSubmissionTypeschema_Actions_TxsdSubmissionTypeSequenceActions_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Actionses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	A set of choices of expected basecalls for a current read. Read will be zero-length if none is
//	found.
type XsdGoPkgHasElems_ExpectedBasecallTABLEchoicesequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_ExpectedBasecallTable_TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceChoiceExpectedBasecallTable_ struct {
	//	A set of choices of expected basecalls for a current read. Read will be zero-length if none is
	//	found.
	ExpectedBasecallTables []*TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceChoiceExpectedBasecallTable `xml:"EXPECTED_BASECALL_TABLE"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_ExpectedBasecallTABLEchoicesequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_ExpectedBasecallTable_TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceChoiceExpectedBasecallTable_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ExpectedBasecallTABLEchoicesequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_ExpectedBasecallTable_TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceChoiceExpectedBasecallTable_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ExpectedBasecallTABLEchoicesequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_ExpectedBasecallTable_TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceChoiceExpectedBasecallTable_ instance.
func (me *XsdGoPkgHasElems_ExpectedBasecallTABLEchoicesequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_ExpectedBasecallTable_TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceChoiceExpectedBasecallTable_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_ExpectedBasecallTABLEchoicesequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_ExpectedBasecallTable_TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceChoiceExpectedBasecallTable_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.ExpectedBasecallTables {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdPlatformTypeChoiceLs454 struct {
	XsdGoPkgHasElem_InstrumentMODELallLS454ChoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceLs454AllInstrumentModel_
}

//	If the WalkHandlers.TxsdPlatformTypeChoiceLs454 function is not nil (ie. was set by outside code), calls it with this TxsdPlatformTypeChoiceLs454 instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this TxsdPlatformTypeChoiceLs454 instance.
func (me *TxsdPlatformTypeChoiceLs454) Walk() (err error) {
	if fn := WalkHandlers.TxsdPlatformTypeChoiceLs454; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_InstrumentMODELallLS454ChoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceLs454AllInstrumentModel_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Whether the reference alignment includes all reads regardless of whether they fail the instrument vendor's
//	quality check.
type XsdGoPkgHasElem_AlignmentIncludesFailedReadsallAlignmentDirectivesTypeschema_AlignmentIncludesFailedReads_XsdtBoolean_ struct {
	//	Whether the reference alignment includes all reads regardless of whether they fail the instrument vendor's
	//	quality check.
	AlignmentIncludesFailedReads xsdt.Boolean `xml:"alignment_includes_failed_reads"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_AlignmentIncludesFailedReadsallAlignmentDirectivesTypeschema_AlignmentIncludesFailedReads_XsdtBoolean_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_AlignmentIncludesFailedReadsallAlignmentDirectivesTypeschema_AlignmentIncludesFailedReads_XsdtBoolean_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_AlignmentIncludesFailedReadsallAlignmentDirectivesTypeschema_AlignmentIncludesFailedReads_XsdtBoolean_ instance.
func (me *XsdGoPkgHasElem_AlignmentIncludesFailedReadsallAlignmentDirectivesTypeschema_AlignmentIncludesFailedReads_XsdtBoolean_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_AlignmentIncludesFailedReadsallAlignmentDirectivesTypeschema_AlignmentIncludesFailedReads_XsdtBoolean_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	454 technology use 1-color sequential flows
type XsdGoPkgHasElems_Ls454ChoicePlatformTypeschema_Ls454_TxsdPlatformTypeChoiceLs454_ struct {
	//	454 technology use 1-color sequential flows
	Ls454s []*TxsdPlatformTypeChoiceLs454 `xml:"LS454"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Ls454ChoicePlatformTypeschema_Ls454_TxsdPlatformTypeChoiceLs454_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Ls454ChoicePlatformTypeschema_Ls454_TxsdPlatformTypeChoiceLs454_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Ls454ChoicePlatformTypeschema_Ls454_TxsdPlatformTypeChoiceLs454_ instance.
func (me *XsdGoPkgHasElems_Ls454ChoicePlatformTypeschema_Ls454_TxsdPlatformTypeChoiceLs454_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Ls454ChoicePlatformTypeschema_Ls454_TxsdPlatformTypeChoiceLs454_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Ls454s {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	CompleteGenomics platform type. At present there is no instrument model.
type TxsdPlatformTypeChoiceCompleteGenomics struct {
	XsdGoPkgHasElem_InstrumentMODELsequenceCOMPLETEGENOMICSchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceCompleteGenomicsSequenceInstrumentModel_
}

//	If the WalkHandlers.TxsdPlatformTypeChoiceCompleteGenomics function is not nil (ie. was set by outside code), calls it with this TxsdPlatformTypeChoiceCompleteGenomics instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this TxsdPlatformTypeChoiceCompleteGenomics instance.
func (me *TxsdPlatformTypeChoiceCompleteGenomics) Walk() (err error) {
	if fn := WalkHandlers.TxsdPlatformTypeChoiceCompleteGenomics; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_InstrumentMODELsequenceCOMPLETEGENOMICSchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceCompleteGenomicsSequenceInstrumentModel_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_CompleteGENOMICSchoicePlatformTypeschema_CompleteGenomics_TxsdPlatformTypeChoiceCompleteGenomics_ struct {
	//	CompleteGenomics platform type. At present there is no instrument model.
	CompleteGenomics *TxsdPlatformTypeChoiceCompleteGenomics `xml:"COMPLETE_GENOMICS"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_CompleteGENOMICSchoicePlatformTypeschema_CompleteGenomics_TxsdPlatformTypeChoiceCompleteGenomics_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_CompleteGENOMICSchoicePlatformTypeschema_CompleteGenomics_TxsdPlatformTypeChoiceCompleteGenomics_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_CompleteGENOMICSchoicePlatformTypeschema_CompleteGenomics_TxsdPlatformTypeChoiceCompleteGenomics_ instance.
func (me *XsdGoPkgHasElem_CompleteGENOMICSchoicePlatformTypeschema_CompleteGenomics_TxsdPlatformTypeChoiceCompleteGenomics_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_CompleteGENOMICSchoicePlatformTypeschema_CompleteGenomics_TxsdPlatformTypeChoiceCompleteGenomics_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.CompleteGenomics.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Whether the reference alignment identifies reads that appear to be duplicates.
type XsdGoPkgHasElems_AlignmentMarksDuplicateReadsallAlignmentDirectivesTypeschema_AlignmentMarksDuplicateReads_XsdtBoolean_ struct {
	//	Whether the reference alignment identifies reads that appear to be duplicates.
	AlignmentMarksDuplicateReadses []xsdt.Boolean `xml:"alignment_marks_duplicate_reads"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_AlignmentMarksDuplicateReadsallAlignmentDirectivesTypeschema_AlignmentMarksDuplicateReads_XsdtBoolean_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_AlignmentMarksDuplicateReadsallAlignmentDirectivesTypeschema_AlignmentMarksDuplicateReads_XsdtBoolean_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_AlignmentMarksDuplicateReadsallAlignmentDirectivesTypeschema_AlignmentMarksDuplicateReads_XsdtBoolean_ instance.
func (me *XsdGoPkgHasElems_AlignmentMarksDuplicateReadsallAlignmentDirectivesTypeschema_AlignmentMarksDuplicateReads_XsdtBoolean_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_AlignmentMarksDuplicateReadsallAlignmentDirectivesTypeschema_AlignmentMarksDuplicateReads_XsdtBoolean_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	List of primary and alternate identifiers including those records replacing or replaced by this record.
type XsdGoPkgHasElems_IDENTIFIERSsequenceSubmissionTypeschema_Identifiers_TIdentifierType_ struct {
	//	List of primary and alternate identifiers including those records replacing or replaced by this record.
	Identifierses []*TIdentifierType `xml:"IDENTIFIERS"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_IDENTIFIERSsequenceSubmissionTypeschema_Identifiers_TIdentifierType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_IDENTIFIERSsequenceSubmissionTypeschema_Identifiers_TIdentifierType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_IDENTIFIERSsequenceSubmissionTypeschema_Identifiers_TIdentifierType_ instance.
func (me *XsdGoPkgHasElems_IDENTIFIERSsequenceSubmissionTypeschema_Identifiers_TIdentifierType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_IDENTIFIERSsequenceSubmissionTypeschema_Identifiers_TIdentifierType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Identifierses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	How to label the link.
type XsdGoPkgHasElems_LABELsequenceENTREZLINKchoiceLinkTypeschema_Label_XsdtString_ struct {
	//	How to label the link.
	Labels []xsdt.String `xml:"LABEL"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_LABELsequenceENTREZLINKchoiceLinkTypeschema_Label_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_LABELsequenceENTREZLINKchoiceLinkTypeschema_Label_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_LABELsequenceENTREZLINKchoiceLinkTypeschema_Label_XsdtString_ instance.
func (me *XsdGoPkgHasElems_LABELsequenceENTREZLINKchoiceLinkTypeschema_Label_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_LABELsequenceENTREZLINKchoiceLinkTypeschema_Label_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Number of base/color calls, cycles, or flows per spot (raw sequence length or flow length including all
//	application and technical tags and mate pairs, but not including gap lengths). This value will be platform dependent,
//	library dependent, and possibly run dependent. Variable length platforms will still have a constant flow/cycle length.
type XsdGoPkgHasElems_SpotLENGTHsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_SpotLength_XsdtNonNegativeInteger_ struct {
	//	Number of base/color calls, cycles, or flows per spot (raw sequence length or flow length including all
	//	application and technical tags and mate pairs, but not including gap lengths). This value will be platform dependent,
	//	library dependent, and possibly run dependent. Variable length platforms will still have a constant flow/cycle length.
	SpotLengths []xsdt.NonNegativeInteger `xml:"SPOT_LENGTH"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_SpotLENGTHsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_SpotLength_XsdtNonNegativeInteger_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_SpotLENGTHsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_SpotLength_XsdtNonNegativeInteger_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_SpotLENGTHsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_SpotLength_XsdtNonNegativeInteger_ instance.
func (me *XsdGoPkgHasElems_SpotLENGTHsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_SpotLength_XsdtNonNegativeInteger_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_SpotLENGTHsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_SpotLength_XsdtNonNegativeInteger_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_InstrumentMODELsequenceABISOLIDchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceAbiSolidSequenceInstrumentModel_ struct {
	InstrumentModel TxsdPlatformTypeChoiceAbiSolidSequenceInstrumentModel `xml:"INSTRUMENT_MODEL"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_InstrumentMODELsequenceABISOLIDchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceAbiSolidSequenceInstrumentModel_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_InstrumentMODELsequenceABISOLIDchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceAbiSolidSequenceInstrumentModel_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_InstrumentMODELsequenceABISOLIDchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceAbiSolidSequenceInstrumentModel_ instance.
func (me *XsdGoPkgHasElem_InstrumentMODELsequenceABISOLIDchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceAbiSolidSequenceInstrumentModel_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_InstrumentMODELsequenceABISOLIDchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceAbiSolidSequenceInstrumentModel_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdPlatformTypeChoiceAbiSolid struct {
	XsdGoPkgHasElem_InstrumentMODELsequenceABISOLIDchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceAbiSolidSequenceInstrumentModel_
}

//	If the WalkHandlers.TxsdPlatformTypeChoiceAbiSolid function is not nil (ie. was set by outside code), calls it with this TxsdPlatformTypeChoiceAbiSolid instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this TxsdPlatformTypeChoiceAbiSolid instance.
func (me *TxsdPlatformTypeChoiceAbiSolid) Walk() (err error) {
	if fn := WalkHandlers.TxsdPlatformTypeChoiceAbiSolid; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_InstrumentMODELsequenceABISOLIDchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceAbiSolidSequenceInstrumentModel_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Accession in the referenced database. For example, FBtr0080008 (in FLYBASE).
type XsdGoPkgHasElems_IDallXRefTypeschema_Id_XsdtString_ struct {
	//	Accession in the referenced database. For example, FBtr0080008 (in FLYBASE).
	Ids []xsdt.String `xml:"ID"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_IDallXRefTypeschema_Id_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_IDallXRefTypeschema_Id_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_IDallXRefTypeschema_Id_XsdtString_ instance.
func (me *XsdGoPkgHasElems_IDallXRefTypeschema_Id_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_IDallXRefTypeschema_Id_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Whether the reference alignment includes unaligned reads.
type XsdGoPkgHasElem_AlignmentIncludesUnalignedReadsallAlignmentDirectivesTypeschema_AlignmentIncludesUnalignedReads_XsdtBoolean_ struct {
	//	Whether the reference alignment includes unaligned reads.
	AlignmentIncludesUnalignedReads xsdt.Boolean `xml:"alignment_includes_unaligned_reads"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_AlignmentIncludesUnalignedReadsallAlignmentDirectivesTypeschema_AlignmentIncludesUnalignedReads_XsdtBoolean_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_AlignmentIncludesUnalignedReadsallAlignmentDirectivesTypeschema_AlignmentIncludesUnalignedReads_XsdtBoolean_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_AlignmentIncludesUnalignedReadsallAlignmentDirectivesTypeschema_AlignmentIncludesUnalignedReads_XsdtBoolean_ instance.
func (me *XsdGoPkgHasElem_AlignmentIncludesUnalignedReadsallAlignmentDirectivesTypeschema_AlignmentIncludesUnalignedReads_XsdtBoolean_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_AlignmentIncludesUnalignedReadsallAlignmentDirectivesTypeschema_AlignmentIncludesUnalignedReads_XsdtBoolean_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Whether the reference alignment identifies reads that appear to be duplicates.
type XsdGoPkgHasElem_AlignmentMarksDuplicateReadsallAlignmentDirectivesTypeschema_AlignmentMarksDuplicateReads_XsdtBoolean_ struct {
	//	Whether the reference alignment identifies reads that appear to be duplicates.
	AlignmentMarksDuplicateReads xsdt.Boolean `xml:"alignment_marks_duplicate_reads"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_AlignmentMarksDuplicateReadsallAlignmentDirectivesTypeschema_AlignmentMarksDuplicateReads_XsdtBoolean_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_AlignmentMarksDuplicateReadsallAlignmentDirectivesTypeschema_AlignmentMarksDuplicateReads_XsdtBoolean_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_AlignmentMarksDuplicateReadsallAlignmentDirectivesTypeschema_AlignmentMarksDuplicateReads_XsdtBoolean_ instance.
func (me *XsdGoPkgHasElem_AlignmentMarksDuplicateReadsallAlignmentDirectivesTypeschema_AlignmentMarksDuplicateReads_XsdtBoolean_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_AlignmentMarksDuplicateReadsallAlignmentDirectivesTypeschema_AlignmentMarksDuplicateReads_XsdtBoolean_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TAlignmentDirectivesType struct {
	//	Whether the reference alignment includes all reads regardless of whether they fail the instrument vendor's
	//	quality check.
	XsdGoPkgHasElem_AlignmentIncludesFailedReadsallAlignmentDirectivesTypeschema_AlignmentIncludesFailedReads_XsdtBoolean_

	//	Whether the reference alignment includes unaligned reads.
	XsdGoPkgHasElem_AlignmentIncludesUnalignedReadsallAlignmentDirectivesTypeschema_AlignmentIncludesUnalignedReads_XsdtBoolean_

	//	Whether the reference alignment identifies reads that appear to be duplicates.
	XsdGoPkgHasElem_AlignmentMarksDuplicateReadsallAlignmentDirectivesTypeschema_AlignmentMarksDuplicateReads_XsdtBoolean_
}

//	If the WalkHandlers.TAlignmentDirectivesType function is not nil (ie. was set by outside code), calls it with this TAlignmentDirectivesType instance as the single argument. Then calls the Walk() method on 3/3 embed(s) and 0/0 field(s) belonging to this TAlignmentDirectivesType instance.
func (me *TAlignmentDirectivesType) Walk() (err error) {
	if fn := WalkHandlers.TAlignmentDirectivesType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_AlignmentIncludesUnalignedReadsallAlignmentDirectivesTypeschema_AlignmentIncludesUnalignedReads_XsdtBoolean_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_AlignmentMarksDuplicateReadsallAlignmentDirectivesTypeschema_AlignmentMarksDuplicateReads_XsdtBoolean_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_AlignmentIncludesFailedReadsallAlignmentDirectivesTypeschema_AlignmentIncludesFailedReads_XsdtBoolean_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Archive assigned properties and attributes of a SUBMISSION.
type XsdGoPkgHasElems_SubmissionATTRIBUTESsequenceSubmissionTypeschema_SubmissionAttributes_TxsdSubmissionTypeSequenceSubmissionAttributes_ struct {
	//	Archive assigned properties and attributes of a SUBMISSION.
	SubmissionAttributeses []*TxsdSubmissionTypeSequenceSubmissionAttributes `xml:"SUBMISSION_ATTRIBUTES"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_SubmissionATTRIBUTESsequenceSubmissionTypeschema_SubmissionAttributes_TxsdSubmissionTypeSequenceSubmissionAttributes_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_SubmissionATTRIBUTESsequenceSubmissionTypeschema_SubmissionAttributes_TxsdSubmissionTypeSequenceSubmissionAttributes_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_SubmissionATTRIBUTESsequenceSubmissionTypeschema_SubmissionAttributes_TxsdSubmissionTypeSequenceSubmissionAttributes_ instance.
func (me *XsdGoPkgHasElems_SubmissionATTRIBUTESsequenceSubmissionTypeschema_SubmissionAttributes_TxsdSubmissionTypeSequenceSubmissionAttributes_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_SubmissionATTRIBUTESsequenceSubmissionTypeschema_SubmissionAttributes_TxsdSubmissionTypeSequenceSubmissionAttributes_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.SubmissionAttributeses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Helicos is similar to 454 technology - uses 1-color sequential flows
type XsdGoPkgHasElem_InstrumentMODELallHELICOSchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceHelicosAllInstrumentModel_ struct {
	InstrumentModel TxsdPlatformTypeChoiceHelicosAllInstrumentModel `xml:"INSTRUMENT_MODEL"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_InstrumentMODELallHELICOSchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceHelicosAllInstrumentModel_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_InstrumentMODELallHELICOSchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceHelicosAllInstrumentModel_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_InstrumentMODELallHELICOSchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceHelicosAllInstrumentModel_ instance.
func (me *XsdGoPkgHasElem_InstrumentMODELallHELICOSchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceHelicosAllInstrumentModel_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_InstrumentMODELallHELICOSchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceHelicosAllInstrumentModel_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdPlatformTypeChoiceHelicos struct {
	XsdGoPkgHasElem_InstrumentMODELallHELICOSchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceHelicosAllInstrumentModel_
}

//	If the WalkHandlers.TxsdPlatformTypeChoiceHelicos function is not nil (ie. was set by outside code), calls it with this TxsdPlatformTypeChoiceHelicos instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this TxsdPlatformTypeChoiceHelicos instance.
func (me *TxsdPlatformTypeChoiceHelicos) Walk() (err error) {
	if fn := WalkHandlers.TxsdPlatformTypeChoiceHelicos; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_InstrumentMODELallHELICOSchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceHelicosAllInstrumentModel_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_HELICOSchoicePlatformTypeschema_Helicos_TxsdPlatformTypeChoiceHelicos_ struct {
	//	Helicos is similar to 454 technology - uses 1-color sequential flows
	Helicoses []*TxsdPlatformTypeChoiceHelicos `xml:"HELICOS"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_HELICOSchoicePlatformTypeschema_Helicos_TxsdPlatformTypeChoiceHelicos_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_HELICOSchoicePlatformTypeschema_Helicos_TxsdPlatformTypeChoiceHelicos_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_HELICOSchoicePlatformTypeschema_Helicos_TxsdPlatformTypeChoiceHelicos_ instance.
func (me *XsdGoPkgHasElems_HELICOSchoicePlatformTypeschema_Helicos_TxsdPlatformTypeChoiceHelicos_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_HELICOSchoicePlatformTypeschema_Helicos_TxsdPlatformTypeChoiceHelicos_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Helicoses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_InstrumentMODELsequenceCOMPLETEGENOMICSchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceCompleteGenomicsSequenceInstrumentModel_ struct {
	InstrumentModels []TxsdPlatformTypeChoiceCompleteGenomicsSequenceInstrumentModel `xml:"INSTRUMENT_MODEL"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_InstrumentMODELsequenceCOMPLETEGENOMICSchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceCompleteGenomicsSequenceInstrumentModel_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_InstrumentMODELsequenceCOMPLETEGENOMICSchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceCompleteGenomicsSequenceInstrumentModel_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_InstrumentMODELsequenceCOMPLETEGENOMICSchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceCompleteGenomicsSequenceInstrumentModel_ instance.
func (me *XsdGoPkgHasElems_InstrumentMODELsequenceCOMPLETEGENOMICSchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceCompleteGenomicsSequenceInstrumentModel_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_InstrumentMODELsequenceCOMPLETEGENOMICSchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceCompleteGenomicsSequenceInstrumentModel_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	ABI is 4-channel flowgram with 1-to-1 mapping between basecalls and flows
type XsdGoPkgHasElems_AbiSOLIDchoicePlatformTypeschema_AbiSolid_TxsdPlatformTypeChoiceAbiSolid_ struct {
	//	ABI is 4-channel flowgram with 1-to-1 mapping between basecalls and flows
	AbiSolids []*TxsdPlatformTypeChoiceAbiSolid `xml:"ABI_SOLID"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_AbiSOLIDchoicePlatformTypeschema_AbiSolid_TxsdPlatformTypeChoiceAbiSolid_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_AbiSOLIDchoicePlatformTypeschema_AbiSolid_TxsdPlatformTypeChoiceAbiSolid_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_AbiSOLIDchoicePlatformTypeschema_AbiSolid_TxsdPlatformTypeChoiceAbiSolid_ instance.
func (me *XsdGoPkgHasElems_AbiSOLIDchoicePlatformTypeschema_AbiSolid_TxsdPlatformTypeChoiceAbiSolid_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_AbiSOLIDchoicePlatformTypeschema_AbiSolid_TxsdPlatformTypeChoiceAbiSolid_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.AbiSolids {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Modify a study, experiment, sample, or analysis object that was submitted under this submission
//	session.
type XsdGoPkgHasElems_MODIFYchoiceTxsdSubmissionTypeSequenceActionsSequenceActionACTIONsequenceTxsdSubmissionTypeSequenceActionsACTIONSsequenceSubmissionTypeschema_Modify_TxsdSubmissionTypeSequenceActionsSequenceActionChoiceModify_ struct {
	//	Modify a study, experiment, sample, or analysis object that was submitted under this submission
	//	session.
	Modifies []*TxsdSubmissionTypeSequenceActionsSequenceActionChoiceModify `xml:"MODIFY"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_MODIFYchoiceTxsdSubmissionTypeSequenceActionsSequenceActionACTIONsequenceTxsdSubmissionTypeSequenceActionsACTIONSsequenceSubmissionTypeschema_Modify_TxsdSubmissionTypeSequenceActionsSequenceActionChoiceModify_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_MODIFYchoiceTxsdSubmissionTypeSequenceActionsSequenceActionACTIONsequenceTxsdSubmissionTypeSequenceActionsACTIONSsequenceSubmissionTypeschema_Modify_TxsdSubmissionTypeSequenceActionsSequenceActionChoiceModify_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_MODIFYchoiceTxsdSubmissionTypeSequenceActionsSequenceActionACTIONsequenceTxsdSubmissionTypeSequenceActionsACTIONSsequenceSubmissionTypeschema_Modify_TxsdSubmissionTypeSequenceActionsSequenceActionChoiceModify_ instance.
func (me *XsdGoPkgHasElems_MODIFYchoiceTxsdSubmissionTypeSequenceActionsSequenceActionACTIONsequenceTxsdSubmissionTypeSequenceActionsACTIONSsequenceSubmissionTypeschema_Modify_TxsdSubmissionTypeSequenceActionsSequenceActionChoiceModify_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_MODIFYchoiceTxsdSubmissionTypeSequenceActionsSequenceActionACTIONsequenceTxsdSubmissionTypeSequenceActionsACTIONSsequenceSubmissionTypeschema_Modify_TxsdSubmissionTypeSequenceActionsSequenceActionChoiceModify_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Modifies {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_SubmissionATTRIBUTEsequenceTxsdSubmissionTypeSequenceSubmissionAttributesSUBMISSIONATTRIBUTESsequenceSubmissionTypeschema_SubmissionAttribute_TAttributeType_ struct {
	SubmissionAttribute *TAttributeType `xml:"SUBMISSION_ATTRIBUTE"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_SubmissionATTRIBUTEsequenceTxsdSubmissionTypeSequenceSubmissionAttributesSUBMISSIONATTRIBUTESsequenceSubmissionTypeschema_SubmissionAttribute_TAttributeType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_SubmissionATTRIBUTEsequenceTxsdSubmissionTypeSequenceSubmissionAttributesSUBMISSIONATTRIBUTESsequenceSubmissionTypeschema_SubmissionAttribute_TAttributeType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_SubmissionATTRIBUTEsequenceTxsdSubmissionTypeSequenceSubmissionAttributesSUBMISSIONATTRIBUTESsequenceSubmissionTypeschema_SubmissionAttribute_TAttributeType_ instance.
func (me *XsdGoPkgHasElem_SubmissionATTRIBUTEsequenceTxsdSubmissionTypeSequenceSubmissionAttributesSUBMISSIONATTRIBUTESsequenceSubmissionTypeschema_SubmissionAttribute_TAttributeType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_SubmissionATTRIBUTEsequenceTxsdSubmissionTypeSequenceSubmissionAttributesSUBMISSIONATTRIBUTESsequenceSubmissionTypeschema_SubmissionAttribute_TAttributeType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.SubmissionAttribute.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Select an action to execute with respect to this submission session.
type XsdGoPkgHasElem_ACTIONsequenceACTIONSsequenceSubmissionTypeschema_Action_TxsdSubmissionTypeSequenceActionsSequenceAction_ struct {
	//	Select an action to execute with respect to this submission session.
	Action *TxsdSubmissionTypeSequenceActionsSequenceAction `xml:"ACTION"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_ACTIONsequenceACTIONSsequenceSubmissionTypeschema_Action_TxsdSubmissionTypeSequenceActionsSequenceAction_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ACTIONsequenceACTIONSsequenceSubmissionTypeschema_Action_TxsdSubmissionTypeSequenceActionsSequenceAction_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_ACTIONsequenceACTIONSsequenceSubmissionTypeschema_Action_TxsdSubmissionTypeSequenceActionsSequenceAction_ instance.
func (me *XsdGoPkgHasElem_ACTIONsequenceACTIONSsequenceSubmissionTypeschema_Action_TxsdSubmissionTypeSequenceActionsSequenceAction_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_ACTIONsequenceACTIONSsequenceSubmissionTypeschema_Action_TxsdSubmissionTypeSequenceActionsSequenceAction_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Action.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_ReadTYPEsequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_ReadType_TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceReadType_Forward struct {
	ReadTypes []TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceReadType `xml:"READ_TYPE"`
}

//	Returns the default value for ReadType -- "Forward"
func (me XsdGoPkgHasElems_ReadTYPEsequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_ReadType_TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceReadType_Forward) ReadTypeDefault() TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceReadType {
	return TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceReadType("Forward")
}

//	If the WalkHandlers.XsdGoPkgHasElems_ReadTYPEsequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_ReadType_TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceReadType_Forward function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ReadTYPEsequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_ReadType_TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceReadType_Forward instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ReadTYPEsequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_ReadType_TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceReadType_Forward instance.
func (me *XsdGoPkgHasElems_ReadTYPEsequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_ReadType_TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceReadType_Forward) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_ReadTYPEsequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_ReadType_TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceReadType_Forward; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	ABI is 4-channel flowgram with 1-to-1 mapping between basecalls and flows
type XsdGoPkgHasElem_AbiSOLIDchoicePlatformTypeschema_AbiSolid_TxsdPlatformTypeChoiceAbiSolid_ struct {
	//	ABI is 4-channel flowgram with 1-to-1 mapping between basecalls and flows
	AbiSolid *TxsdPlatformTypeChoiceAbiSolid `xml:"ABI_SOLID"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_AbiSOLIDchoicePlatformTypeschema_AbiSolid_TxsdPlatformTypeChoiceAbiSolid_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_AbiSOLIDchoicePlatformTypeschema_AbiSolid_TxsdPlatformTypeChoiceAbiSolid_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_AbiSOLIDchoicePlatformTypeschema_AbiSolid_TxsdPlatformTypeChoiceAbiSolid_ instance.
func (me *XsdGoPkgHasElem_AbiSOLIDchoicePlatformTypeschema_AbiSolid_TxsdPlatformTypeChoiceAbiSolid_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_AbiSOLIDchoicePlatformTypeschema_AbiSolid_TxsdPlatformTypeChoiceAbiSolid_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.AbiSolid.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The read is located beginning at the offset or cycle relative to another read. This choice is
//	appropriate for example when specifying a read that follows a variable length expected sequence(s).
type XsdGoPkgHasElems_RelativeORDERchoicesequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_RelativeOrder_TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceChoiceRelativeOrder_ struct {
	//	The read is located beginning at the offset or cycle relative to another read. This choice is
	//	appropriate for example when specifying a read that follows a variable length expected sequence(s).
	RelativeOrders []*TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceChoiceRelativeOrder `xml:"RELATIVE_ORDER"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_RelativeORDERchoicesequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_RelativeOrder_TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceChoiceRelativeOrder_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_RelativeORDERchoicesequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_RelativeOrder_TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceChoiceRelativeOrder_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_RelativeORDERchoicesequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_RelativeOrder_TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceChoiceRelativeOrder_ instance.
func (me *XsdGoPkgHasElems_RelativeORDERchoicesequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_RelativeOrder_TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceChoiceRelativeOrder_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_RelativeORDERchoicesequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_RelativeOrder_TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceChoiceRelativeOrder_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.RelativeOrders {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_SubmissionLINKsequenceSUBMISSIONLINKSsequenceSubmissionTypeschema_SubmissionLink_TLinkType_ struct {
	SubmissionLink *TLinkType `xml:"SUBMISSION_LINK"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_SubmissionLINKsequenceSUBMISSIONLINKSsequenceSubmissionTypeschema_SubmissionLink_TLinkType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_SubmissionLINKsequenceSUBMISSIONLINKSsequenceSubmissionTypeschema_SubmissionLink_TLinkType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_SubmissionLINKsequenceSUBMISSIONLINKSsequenceSubmissionTypeschema_SubmissionLink_TLinkType_ instance.
func (me *XsdGoPkgHasElem_SubmissionLINKsequenceSUBMISSIONLINKSsequenceSubmissionTypeschema_SubmissionLink_TLinkType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_SubmissionLINKsequenceSUBMISSIONLINKSsequenceSubmissionTypeschema_SubmissionLink_TLinkType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.SubmissionLink.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Processing directives tell the Sequence Read Archive how to treat the input data, if any treatment is
//	requested.
type XsdGoPkgHasElems_DIRECTIVESsequenceProcessingTypeschema_Directives_TSequencingDirectivesType_ struct {
	//	Processing directives tell the Sequence Read Archive how to treat the input data, if any treatment is
	//	requested.
	Directiveses []*TSequencingDirectivesType `xml:"DIRECTIVES"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_DIRECTIVESsequenceProcessingTypeschema_Directives_TSequencingDirectivesType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_DIRECTIVESsequenceProcessingTypeschema_Directives_TSequencingDirectivesType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_DIRECTIVESsequenceProcessingTypeschema_Directives_TSequencingDirectivesType_ instance.
func (me *XsdGoPkgHasElems_DIRECTIVESsequenceProcessingTypeschema_Directives_TSequencingDirectivesType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_DIRECTIVESsequenceProcessingTypeschema_Directives_TSequencingDirectivesType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Directiveses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Release content to public view and indexing for any study, experiment, sample, run, or analysis
//	object that was submitted under this submission session.
type XsdGoPkgHasElems_RELEASEchoiceACTIONsequenceACTIONSsequenceSubmissionTypeschema_Release_TxsdSubmissionTypeSequenceActionsSequenceActionChoiceRelease_ struct {
	//	Release content to public view and indexing for any study, experiment, sample, run, or analysis
	//	object that was submitted under this submission session.
	Releases []*TxsdSubmissionTypeSequenceActionsSequenceActionChoiceSuppress `xml:"RELEASE"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_RELEASEchoiceACTIONsequenceACTIONSsequenceSubmissionTypeschema_Release_TxsdSubmissionTypeSequenceActionsSequenceActionChoiceRelease_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_RELEASEchoiceACTIONsequenceACTIONSsequenceSubmissionTypeschema_Release_TxsdSubmissionTypeSequenceActionsSequenceActionChoiceRelease_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_RELEASEchoiceACTIONsequenceACTIONSsequenceSubmissionTypeschema_Release_TxsdSubmissionTypeSequenceActionsSequenceActionChoiceRelease_ instance.
func (me *XsdGoPkgHasElems_RELEASEchoiceACTIONsequenceACTIONSsequenceSubmissionTypeschema_Release_TxsdSubmissionTypeSequenceActionsSequenceActionChoiceRelease_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_RELEASEchoiceACTIONsequenceACTIONSsequenceSubmissionTypeschema_Release_TxsdSubmissionTypeSequenceActionsSequenceActionChoiceRelease_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Releases {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	A universally unique identifier that requires no namespace.
type XsdGoPkgHasElem_UUIDsequenceIdentifierTypeschema_Uuid_TNameAndLabelType_ struct {
	//	A universally unique identifier that requires no namespace.
	Uuid *TNameAndLabelType `xml:"UUID"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_UUIDsequenceIdentifierTypeschema_Uuid_TNameAndLabelType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_UUIDsequenceIdentifierTypeschema_Uuid_TNameAndLabelType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_UUIDsequenceIdentifierTypeschema_Uuid_TNameAndLabelType_ instance.
func (me *XsdGoPkgHasElem_UUIDsequenceIdentifierTypeschema_Uuid_TNameAndLabelType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_UUIDsequenceIdentifierTypeschema_Uuid_TNameAndLabelType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Uuid.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	PacificBiosciences platform type for the single molecule real time (SMRT) technology.
type XsdGoPkgHasElem_PacbioSMRTchoicePlatformTypeschema_PacbioSmrt_TxsdPlatformTypeChoicePacbioSmrt_ struct {
	//	PacificBiosciences platform type for the single molecule real time (SMRT) technology.
	PacbioSmrt *TxsdPlatformTypeChoicePacbioSmrt `xml:"PACBIO_SMRT"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_PacbioSMRTchoicePlatformTypeschema_PacbioSmrt_TxsdPlatformTypeChoicePacbioSmrt_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_PacbioSMRTchoicePlatformTypeschema_PacbioSmrt_TxsdPlatformTypeChoicePacbioSmrt_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_PacbioSMRTchoicePlatformTypeschema_PacbioSmrt_TxsdPlatformTypeChoicePacbioSmrt_ instance.
func (me *XsdGoPkgHasElem_PacbioSMRTchoicePlatformTypeschema_PacbioSmrt_TxsdPlatformTypeChoicePacbioSmrt_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_PacbioSMRTchoicePlatformTypeschema_PacbioSmrt_TxsdPlatformTypeChoicePacbioSmrt_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.PacbioSmrt.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_InstrumentMODELsequenceILLUMINAchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceIlluminaSequenceInstrumentModel_ struct {
	InstrumentModel TxsdPlatformTypeChoiceIlluminaSequenceInstrumentModel `xml:"INSTRUMENT_MODEL"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_InstrumentMODELsequenceILLUMINAchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceIlluminaSequenceInstrumentModel_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_InstrumentMODELsequenceILLUMINAchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceIlluminaSequenceInstrumentModel_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_InstrumentMODELsequenceILLUMINAchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceIlluminaSequenceInstrumentModel_ instance.
func (me *XsdGoPkgHasElem_InstrumentMODELsequenceILLUMINAchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceIlluminaSequenceInstrumentModel_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_InstrumentMODELsequenceILLUMINAchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceIlluminaSequenceInstrumentModel_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Helicos is similar to 454 technology - uses 1-color sequential flows
type XsdGoPkgHasElem_HELICOSchoicePlatformTypeschema_Helicos_TxsdPlatformTypeChoiceHelicos_ struct {
	//	Helicos is similar to 454 technology - uses 1-color sequential flows
	Helicos *TxsdPlatformTypeChoiceHelicos `xml:"HELICOS"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_HELICOSchoicePlatformTypeschema_Helicos_TxsdPlatformTypeChoiceHelicos_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_HELICOSchoicePlatformTypeschema_Helicos_TxsdPlatformTypeChoiceHelicos_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_HELICOSchoicePlatformTypeschema_Helicos_TxsdPlatformTypeChoiceHelicos_ instance.
func (me *XsdGoPkgHasElem_HELICOSchoicePlatformTypeschema_Helicos_TxsdPlatformTypeChoiceHelicos_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_HELICOSchoicePlatformTypeschema_Helicos_TxsdPlatformTypeChoiceHelicos_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Helicos.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Archive created links to associated submissions.
type XsdGoPkgHasElems_SubmissionLINKSsequenceSubmissionTypeschema_SubmissionLinks_TxsdSubmissionTypeSequenceSubmissionLinks_ struct {
	//	Archive created links to associated submissions.
	SubmissionLinkses []*TxsdSubmissionTypeSequenceSubmissionLinks `xml:"SUBMISSION_LINKS"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_SubmissionLINKSsequenceSubmissionTypeschema_SubmissionLinks_TxsdSubmissionTypeSequenceSubmissionLinks_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_SubmissionLINKSsequenceSubmissionTypeschema_SubmissionLinks_TxsdSubmissionTypeSequenceSubmissionLinks_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_SubmissionLINKSsequenceSubmissionTypeschema_SubmissionLinks_TxsdSubmissionTypeSequenceSubmissionLinks_ instance.
func (me *XsdGoPkgHasElems_SubmissionLINKSsequenceSubmissionTypeschema_SubmissionLinks_TxsdSubmissionTypeSequenceSubmissionLinks_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_SubmissionLINKSsequenceSubmissionTypeschema_SubmissionLinks_TxsdSubmissionTypeSequenceSubmissionLinks_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.SubmissionLinkses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	NCBI controlled vocabulary of permitted cross references. Please see
//	http://www.ncbi.nlm.nih.gov/entrez/eutils/einfo.fcgi? .
type XsdGoPkgHasElems_DBsequenceENTREZLINKchoiceLinkTypeschema_Db_XsdtString_ struct {
	//	NCBI controlled vocabulary of permitted cross references. Please see
	//	http://www.ncbi.nlm.nih.gov/entrez/eutils/einfo.fcgi? .
	Dbs []xsdt.String `xml:"DB"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_DBsequenceENTREZLINKchoiceLinkTypeschema_Db_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_DBsequenceENTREZLINKchoiceLinkTypeschema_Db_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_DBsequenceENTREZLINKchoiceLinkTypeschema_Db_XsdtString_ instance.
func (me *XsdGoPkgHasElems_DBsequenceENTREZLINKchoiceLinkTypeschema_Db_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_DBsequenceENTREZLINKchoiceLinkTypeschema_Db_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	An identifier from a public non-SRA resource. @namespace would be an official short name of that
//	resource.
type XsdGoPkgHasElem_ExternalIDsequenceIdentifierTypeschema_ExternalId_TQualifiedNameType_ struct {
	//	An identifier from a public non-SRA resource. @namespace would be an official short name of that
	//	resource.
	ExternalId *TQualifiedNameType `xml:"EXTERNAL_ID"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_ExternalIDsequenceIdentifierTypeschema_ExternalId_TQualifiedNameType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ExternalIDsequenceIdentifierTypeschema_ExternalId_TQualifiedNameType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_ExternalIDsequenceIdentifierTypeschema_ExternalId_TQualifiedNameType_ instance.
func (me *XsdGoPkgHasElem_ExternalIDsequenceIdentifierTypeschema_ExternalId_TQualifiedNameType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_ExternalIDsequenceIdentifierTypeschema_ExternalId_TQualifiedNameType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.ExternalId.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Illumina is 4-channel flowgram with 1-to-1 mapping between basecalls and flows
type TxsdPlatformTypeChoiceIllumina struct {
	XsdGoPkgHasElem_InstrumentMODELsequenceILLUMINAchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceIlluminaSequenceInstrumentModel_
}

//	If the WalkHandlers.TxsdPlatformTypeChoiceIllumina function is not nil (ie. was set by outside code), calls it with this TxsdPlatformTypeChoiceIllumina instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this TxsdPlatformTypeChoiceIllumina instance.
func (me *TxsdPlatformTypeChoiceIllumina) Walk() (err error) {
	if fn := WalkHandlers.TxsdPlatformTypeChoiceIllumina; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_InstrumentMODELsequenceILLUMINAchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceIlluminaSequenceInstrumentModel_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_ILLUMINAchoicePlatformTypeschema_Illumina_TxsdPlatformTypeChoiceIllumina_ struct {
	//	Illumina is 4-channel flowgram with 1-to-1 mapping between basecalls and flows
	Illuminas []*TxsdPlatformTypeChoiceIllumina `xml:"ILLUMINA"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_ILLUMINAchoicePlatformTypeschema_Illumina_TxsdPlatformTypeChoiceIllumina_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ILLUMINAchoicePlatformTypeschema_Illumina_TxsdPlatformTypeChoiceIllumina_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ILLUMINAchoicePlatformTypeschema_Illumina_TxsdPlatformTypeChoiceIllumina_ instance.
func (me *XsdGoPkgHasElems_ILLUMINAchoicePlatformTypeschema_Illumina_TxsdPlatformTypeChoiceIllumina_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_ILLUMINAchoicePlatformTypeschema_Illumina_TxsdPlatformTypeChoiceIllumina_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Illuminas {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_PipeSECTIONsequencePipelineTypeschema_PipeSection_TxsdPipelineTypeSequencePipeSection_ struct {
	PipeSection *TxsdPipelineTypeSequencePipeSection `xml:"PIPE_SECTION"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_PipeSECTIONsequencePipelineTypeschema_PipeSection_TxsdPipelineTypeSequencePipeSection_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_PipeSECTIONsequencePipelineTypeschema_PipeSection_TxsdPipelineTypeSequencePipeSection_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_PipeSECTIONsequencePipelineTypeschema_PipeSection_TxsdPipelineTypeSequencePipeSection_ instance.
func (me *XsdGoPkgHasElem_PipeSECTIONsequencePipelineTypeschema_PipeSection_TxsdPipelineTypeSequencePipeSection_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_PipeSECTIONsequencePipelineTypeschema_PipeSection_TxsdPipelineTypeSequencePipeSection_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.PipeSection.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_InstrumentMODELallHELICOSchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceHelicosAllInstrumentModel_ struct {
	InstrumentModels []TxsdPlatformTypeChoiceHelicosAllInstrumentModel `xml:"INSTRUMENT_MODEL"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_InstrumentMODELallHELICOSchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceHelicosAllInstrumentModel_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_InstrumentMODELallHELICOSchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceHelicosAllInstrumentModel_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_InstrumentMODELallHELICOSchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceHelicosAllInstrumentModel_ instance.
func (me *XsdGoPkgHasElems_InstrumentMODELallHELICOSchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceHelicosAllInstrumentModel_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_InstrumentMODELallHELICOSchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceHelicosAllInstrumentModel_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_SpotDecodeSPECchoiceSpotDescriptorTypeschema_SpotDecodeSpec_TxsdSpotDescriptorTypeChoiceSpotDecodeSpec_ struct {
	SpotDecodeSpec *TxsdSpotDescriptorTypeChoiceSpotDecodeSpec `xml:"SPOT_DECODE_SPEC"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_SpotDecodeSPECchoiceSpotDescriptorTypeschema_SpotDecodeSpec_TxsdSpotDescriptorTypeChoiceSpotDecodeSpec_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_SpotDecodeSPECchoiceSpotDescriptorTypeschema_SpotDecodeSpec_TxsdSpotDescriptorTypeChoiceSpotDecodeSpec_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_SpotDecodeSPECchoiceSpotDescriptorTypeschema_SpotDecodeSpec_TxsdSpotDescriptorTypeChoiceSpotDecodeSpec_ instance.
func (me *XsdGoPkgHasElem_SpotDecodeSPECchoiceSpotDescriptorTypeschema_SpotDecodeSpec_TxsdSpotDescriptorTypeChoiceSpotDecodeSpec_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_SpotDecodeSPECchoiceSpotDescriptorTypeschema_SpotDecodeSpec_TxsdSpotDescriptorTypeChoiceSpotDecodeSpec_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.SpotDecodeSpec.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_UrlLINKchoiceLinkTypeschema_UrlLink_TxsdLinkTypeChoiceUrlLink_ struct {
	UrlLinks []*TxsdLinkTypeChoiceUrlLink `xml:"URL_LINK"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_UrlLINKchoiceLinkTypeschema_UrlLink_TxsdLinkTypeChoiceUrlLink_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_UrlLINKchoiceLinkTypeschema_UrlLink_TxsdLinkTypeChoiceUrlLink_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_UrlLINKchoiceLinkTypeschema_UrlLink_TxsdLinkTypeChoiceUrlLink_ instance.
func (me *XsdGoPkgHasElems_UrlLINKchoiceLinkTypeschema_UrlLink_TxsdLinkTypeChoiceUrlLink_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_UrlLINKchoiceLinkTypeschema_UrlLink_TxsdLinkTypeChoiceUrlLink_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.UrlLinks {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Illumina is 4-channel flowgram with 1-to-1 mapping between basecalls and flows
type XsdGoPkgHasElem_ILLUMINAchoicePlatformTypeschema_Illumina_TxsdPlatformTypeChoiceIllumina_ struct {
	//	Illumina is 4-channel flowgram with 1-to-1 mapping between basecalls and flows
	Illumina *TxsdPlatformTypeChoiceIllumina `xml:"ILLUMINA"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_ILLUMINAchoicePlatformTypeschema_Illumina_TxsdPlatformTypeChoiceIllumina_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ILLUMINAchoicePlatformTypeschema_Illumina_TxsdPlatformTypeChoiceIllumina_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_ILLUMINAchoicePlatformTypeschema_Illumina_TxsdPlatformTypeChoiceIllumina_ instance.
func (me *XsdGoPkgHasElem_ILLUMINAchoicePlatformTypeschema_Illumina_TxsdPlatformTypeChoiceIllumina_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_ILLUMINAchoicePlatformTypeschema_Illumina_TxsdPlatformTypeChoiceIllumina_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Illumina.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_InstrumentMODELsequencePACBIOSMRTchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoicePacbioSmrtSequenceInstrumentModel_ struct {
	InstrumentModels []TxsdPlatformTypeChoicePacbioSmrtSequenceInstrumentModel `xml:"INSTRUMENT_MODEL"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_InstrumentMODELsequencePACBIOSMRTchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoicePacbioSmrtSequenceInstrumentModel_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_InstrumentMODELsequencePACBIOSMRTchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoicePacbioSmrtSequenceInstrumentModel_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_InstrumentMODELsequencePACBIOSMRTchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoicePacbioSmrtSequenceInstrumentModel_ instance.
func (me *XsdGoPkgHasElems_InstrumentMODELsequencePACBIOSMRTchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoicePacbioSmrtSequenceInstrumentModel_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_InstrumentMODELsequencePACBIOSMRTchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoicePacbioSmrtSequenceInstrumentModel_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Ion Torrent Personal Genome Machine (PGM) from Life Technologies.
type XsdGoPkgHasElems_IonTORRENTchoicePlatformTypeschema_IonTorrent_TxsdPlatformTypeChoiceIonTorrent_ struct {
	//	Ion Torrent Personal Genome Machine (PGM) from Life Technologies.
	IonTorrents []*TxsdPlatformTypeChoiceIonTorrent `xml:"ION_TORRENT"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_IonTORRENTchoicePlatformTypeschema_IonTorrent_TxsdPlatformTypeChoiceIonTorrent_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_IonTORRENTchoicePlatformTypeschema_IonTorrent_TxsdPlatformTypeChoiceIonTorrent_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_IonTORRENTchoicePlatformTypeschema_IonTorrent_TxsdPlatformTypeChoiceIonTorrent_ instance.
func (me *XsdGoPkgHasElems_IonTORRENTchoicePlatformTypeschema_IonTorrent_TxsdPlatformTypeChoiceIonTorrent_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_IonTORRENTchoicePlatformTypeschema_IonTorrent_TxsdPlatformTypeChoiceIonTorrent_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.IonTorrents {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_CONTACTsequenceCONTACTSsequenceSubmissionTypeschema_Contact_TxsdSubmissionTypeSequenceContactsSequenceContact_ struct {
	Contact *TxsdSubmissionTypeSequenceContactsSequenceContact `xml:"CONTACT"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_CONTACTsequenceCONTACTSsequenceSubmissionTypeschema_Contact_TxsdSubmissionTypeSequenceContactsSequenceContact_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_CONTACTsequenceCONTACTSsequenceSubmissionTypeschema_Contact_TxsdSubmissionTypeSequenceContactsSequenceContact_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_CONTACTsequenceCONTACTSsequenceSubmissionTypeschema_Contact_TxsdSubmissionTypeSequenceContactsSequenceContact_ instance.
func (me *XsdGoPkgHasElem_CONTACTsequenceCONTACTSsequenceSubmissionTypeschema_Contact_TxsdSubmissionTypeSequenceContactsSequenceContact_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_CONTACTsequenceCONTACTSsequenceSubmissionTypeschema_Contact_TxsdSubmissionTypeSequenceContactsSequenceContact_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Contact.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	454 technology use 1-color sequential flows
type XsdGoPkgHasElem_Ls454ChoicePlatformTypeschema_Ls454_TxsdPlatformTypeChoiceLs454_ struct {
	//	454 technology use 1-color sequential flows
	Ls454 *TxsdPlatformTypeChoiceLs454 `xml:"LS454"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Ls454ChoicePlatformTypeschema_Ls454_TxsdPlatformTypeChoiceLs454_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Ls454ChoicePlatformTypeschema_Ls454_TxsdPlatformTypeChoiceLs454_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Ls454ChoicePlatformTypeschema_Ls454_TxsdPlatformTypeChoiceLs454_ instance.
func (me *XsdGoPkgHasElem_Ls454ChoicePlatformTypeschema_Ls454_TxsdPlatformTypeChoiceLs454_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Ls454ChoicePlatformTypeschema_Ls454_TxsdPlatformTypeChoiceLs454_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Ls454.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The SPOT_DESCRIPTOR specifies how to decode the individual reads of interest from the monolithic spot sequence. The
//	spot descriptor contains aspects of the experimental design, platform, and processing information. There will be two methods of
//	specification: one will be an index into a table of typical decodings, the other being an exact specification.
type TSpotDescriptorType struct {
	XsdGoPkgHasElem_SpotDecodeSPECchoiceSpotDescriptorTypeschema_SpotDecodeSpec_TxsdSpotDescriptorTypeChoiceSpotDecodeSpec_
}

//	If the WalkHandlers.TSpotDescriptorType function is not nil (ie. was set by outside code), calls it with this TSpotDescriptorType instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this TSpotDescriptorType instance.
func (me *TSpotDescriptorType) Walk() (err error) {
	if fn := WalkHandlers.TSpotDescriptorType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_SpotDecodeSPECchoiceSpotDescriptorTypeschema_SpotDecodeSpec_TxsdSpotDescriptorTypeChoiceSpotDecodeSpec_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_InstrumentMODELsequenceOXFORDNANOPOREchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceOxfordNanoporeSequenceInstrumentModel_ struct {
	InstrumentModels []TxsdPlatformTypeChoiceOxfordNanoporeSequenceInstrumentModel `xml:"INSTRUMENT_MODEL"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_InstrumentMODELsequenceOXFORDNANOPOREchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceOxfordNanoporeSequenceInstrumentModel_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_InstrumentMODELsequenceOXFORDNANOPOREchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceOxfordNanoporeSequenceInstrumentModel_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_InstrumentMODELsequenceOXFORDNANOPOREchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceOxfordNanoporeSequenceInstrumentModel_ instance.
func (me *XsdGoPkgHasElems_InstrumentMODELsequenceOXFORDNANOPOREchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceOxfordNanoporeSequenceInstrumentModel_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_InstrumentMODELsequenceOXFORDNANOPOREchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceOxfordNanoporeSequenceInstrumentModel_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_XrefLINKchoiceLinkTypeschema_XrefLink_TXRefType_ struct {
	XrefLinks []*TXRefType `xml:"XREF_LINK"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_XrefLINKchoiceLinkTypeschema_XrefLink_TXRefType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_XrefLINKchoiceLinkTypeschema_XrefLink_TXRefType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_XrefLINKchoiceLinkTypeschema_XrefLink_TXRefType_ instance.
func (me *XsdGoPkgHasElems_XrefLINKchoiceLinkTypeschema_XrefLink_TXRefType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_XrefLINKchoiceLinkTypeschema_XrefLink_TXRefType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.XrefLinks {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	CompleteGenomics platform type. At present there is no instrument model.
type XsdGoPkgHasElems_CompleteGENOMICSchoicePlatformTypeschema_CompleteGenomics_TxsdPlatformTypeChoiceCompleteGenomics_ struct {
	//	CompleteGenomics platform type. At present there is no instrument model.
	CompleteGenomicses []*TxsdPlatformTypeChoiceCompleteGenomics `xml:"COMPLETE_GENOMICS"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_CompleteGENOMICSchoicePlatformTypeschema_CompleteGenomics_TxsdPlatformTypeChoiceCompleteGenomics_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_CompleteGENOMICSchoicePlatformTypeschema_CompleteGenomics_TxsdPlatformTypeChoiceCompleteGenomics_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_CompleteGENOMICSchoicePlatformTypeschema_CompleteGenomics_TxsdPlatformTypeChoiceCompleteGenomics_ instance.
func (me *XsdGoPkgHasElems_CompleteGENOMICSchoicePlatformTypeschema_CompleteGenomics_TxsdPlatformTypeChoiceCompleteGenomics_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_CompleteGENOMICSchoicePlatformTypeschema_CompleteGenomics_TxsdPlatformTypeChoiceCompleteGenomics_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.CompleteGenomicses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Oxford Nanopore platform type. nanopore-based electronic single molecule analysis
type XsdGoPkgHasElems_OxfordNANOPOREchoicePlatformTypeschema_OxfordNanopore_TxsdPlatformTypeChoiceOxfordNanopore_ struct {
	//	Oxford Nanopore platform type. nanopore-based electronic single molecule analysis
	OxfordNanopores []*TxsdPlatformTypeChoiceOxfordNanopore `xml:"OXFORD_NANOPORE"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_OxfordNANOPOREchoicePlatformTypeschema_OxfordNanopore_TxsdPlatformTypeChoiceOxfordNanopore_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_OxfordNANOPOREchoicePlatformTypeschema_OxfordNanopore_TxsdPlatformTypeChoiceOxfordNanopore_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_OxfordNANOPOREchoicePlatformTypeschema_OxfordNanopore_TxsdPlatformTypeChoiceOxfordNanopore_ instance.
func (me *XsdGoPkgHasElems_OxfordNANOPOREchoicePlatformTypeschema_OxfordNanopore_TxsdPlatformTypeChoiceOxfordNanopore_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_OxfordNANOPOREchoicePlatformTypeschema_OxfordNanopore_TxsdPlatformTypeChoiceOxfordNanopore_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.OxfordNanopores {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Generic processing pipeline specification.
type XsdGoPkgHasElems_PIPELINEsequenceProcessingTypeschema_Pipeline_TPipelineType_ struct {
	//	Generic processing pipeline specification.
	Pipelines []*TPipelineType `xml:"PIPELINE"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_PIPELINEsequenceProcessingTypeschema_Pipeline_TPipelineType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_PIPELINEsequenceProcessingTypeschema_Pipeline_TPipelineType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_PIPELINEsequenceProcessingTypeschema_Pipeline_TPipelineType_ instance.
func (me *XsdGoPkgHasElems_PIPELINEsequenceProcessingTypeschema_Pipeline_TPipelineType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_PIPELINEsequenceProcessingTypeschema_Pipeline_TPipelineType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Pipelines {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Numeric record id meaningful to the NCBI Entrez system.
type XsdGoPkgHasElems_IDchoicesequenceENTREZLINKchoiceLinkTypeschema_Id_XsdtNonNegativeInteger_ struct {
	//	Numeric record id meaningful to the NCBI Entrez system.
	Ids []*xsdt.NonNegativeInteger `xml:"ID"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_IDchoicesequenceENTREZLINKchoiceLinkTypeschema_Id_XsdtNonNegativeInteger_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_IDchoicesequenceENTREZLINKchoiceLinkTypeschema_Id_XsdtNonNegativeInteger_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_IDchoicesequenceENTREZLINKchoiceLinkTypeschema_Id_XsdtNonNegativeInteger_ instance.
func (me *XsdGoPkgHasElems_IDchoicesequenceENTREZLINKchoiceLinkTypeschema_Id_XsdtNonNegativeInteger_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_IDchoicesequenceENTREZLINKchoiceLinkTypeschema_Id_XsdtNonNegativeInteger_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_InstrumentMODELsequenceIONTORRENTchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceIonTorrentSequenceInstrumentModel_ struct {
	InstrumentModels []TxsdPlatformTypeChoiceIonTorrentSequenceInstrumentModel `xml:"INSTRUMENT_MODEL"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_InstrumentMODELsequenceIONTORRENTchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceIonTorrentSequenceInstrumentModel_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_InstrumentMODELsequenceIONTORRENTchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceIonTorrentSequenceInstrumentModel_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_InstrumentMODELsequenceIONTORRENTchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceIonTorrentSequenceInstrumentModel_ instance.
func (me *XsdGoPkgHasElems_InstrumentMODELsequenceIONTORRENTchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceIonTorrentSequenceInstrumentModel_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_InstrumentMODELsequenceIONTORRENTchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceIonTorrentSequenceInstrumentModel_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The PLATFORM record selects which sequencing platform and platform-specific runtime parameters. This will be
//	determined by the Center.
//	Ion Torrent Personal Genome Machine (PGM) from Life Technologies.
type XsdGoPkgHasElem_IonTORRENTchoicePlatformTypeschema_IonTorrent_TxsdPlatformTypeChoiceIonTorrent_ struct {
	//	Ion Torrent Personal Genome Machine (PGM) from Life Technologies.
	IonTorrent *TxsdPlatformTypeChoiceIonTorrent `xml:"ION_TORRENT"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_IonTORRENTchoicePlatformTypeschema_IonTorrent_TxsdPlatformTypeChoiceIonTorrent_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_IonTORRENTchoicePlatformTypeschema_IonTorrent_TxsdPlatformTypeChoiceIonTorrent_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_IonTORRENTchoicePlatformTypeschema_IonTorrent_TxsdPlatformTypeChoiceIonTorrent_ instance.
func (me *XsdGoPkgHasElem_IonTORRENTchoicePlatformTypeschema_IonTorrent_TxsdPlatformTypeChoiceIonTorrent_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_IonTORRENTchoicePlatformTypeschema_IonTorrent_TxsdPlatformTypeChoiceIonTorrent_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.IonTorrent.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TPlatformType struct {
	//	PacificBiosciences platform type for the single molecule real time (SMRT) technology.
	XsdGoPkgHasElem_PacbioSMRTchoicePlatformTypeschema_PacbioSmrt_TxsdPlatformTypeChoicePacbioSmrt_

	//	Sequencers based on capillary electrophoresis technology manufactured by LifeTech (formerly Applied
	//	BioSciences).
	XsdGoPkgHasElem_CAPILLARYchoicePlatformTypeschema_Capillary_TxsdPlatformTypeChoiceCapillary_

	//	454 technology use 1-color sequential flows
	XsdGoPkgHasElem_Ls454ChoicePlatformTypeschema_Ls454_TxsdPlatformTypeChoiceLs454_

	//	Illumina is 4-channel flowgram with 1-to-1 mapping between basecalls and flows
	XsdGoPkgHasElem_ILLUMINAchoicePlatformTypeschema_Illumina_TxsdPlatformTypeChoiceIllumina_

	//	Helicos is similar to 454 technology - uses 1-color sequential flows
	XsdGoPkgHasElem_HELICOSchoicePlatformTypeschema_Helicos_TxsdPlatformTypeChoiceHelicos_

	//	ABI is 4-channel flowgram with 1-to-1 mapping between basecalls and flows
	XsdGoPkgHasElem_AbiSOLIDchoicePlatformTypeschema_AbiSolid_TxsdPlatformTypeChoiceAbiSolid_

	//	CompleteGenomics platform type. At present there is no instrument model.
	XsdGoPkgHasElem_CompleteGENOMICSchoicePlatformTypeschema_CompleteGenomics_TxsdPlatformTypeChoiceCompleteGenomics_

	//	Oxford Nanopore platform type. nanopore-based electronic single molecule analysis
	XsdGoPkgHasElem_OxfordNANOPOREchoicePlatformTypeschema_OxfordNanopore_TxsdPlatformTypeChoiceOxfordNanopore_

	//	Ion Torrent Personal Genome Machine (PGM) from Life Technologies.
	XsdGoPkgHasElem_IonTORRENTchoicePlatformTypeschema_IonTorrent_TxsdPlatformTypeChoiceIonTorrent_
}

//	If the WalkHandlers.TPlatformType function is not nil (ie. was set by outside code), calls it with this TPlatformType instance as the single argument. Then calls the Walk() method on 9/9 embed(s) and 0/0 field(s) belonging to this TPlatformType instance.
func (me *TPlatformType) Walk() (err error) {
	if fn := WalkHandlers.TPlatformType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_PacbioSMRTchoicePlatformTypeschema_PacbioSmrt_TxsdPlatformTypeChoicePacbioSmrt_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_HELICOSchoicePlatformTypeschema_Helicos_TxsdPlatformTypeChoiceHelicos_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_AbiSOLIDchoicePlatformTypeschema_AbiSolid_TxsdPlatformTypeChoiceAbiSolid_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_CompleteGENOMICSchoicePlatformTypeschema_CompleteGenomics_TxsdPlatformTypeChoiceCompleteGenomics_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_OxfordNANOPOREchoicePlatformTypeschema_OxfordNanopore_TxsdPlatformTypeChoiceOxfordNanopore_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_IonTORRENTchoicePlatformTypeschema_IonTorrent_TxsdPlatformTypeChoiceIonTorrent_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_CAPILLARYchoicePlatformTypeschema_Capillary_TxsdPlatformTypeChoiceCapillary_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Ls454ChoicePlatformTypeschema_Ls454_TxsdPlatformTypeChoiceLs454_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_ILLUMINAchoicePlatformTypeschema_Illumina_TxsdPlatformTypeChoiceIllumina_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Communicate the intention that the data are to be deposited in a protected database and not made
//	public under any circumstances. This is separate from hold/release directives, which indicate the public visibility
//	of the records.
type XsdGoPkgHasElems_PROTECTchoiceACTIONsequenceACTIONSsequenceSubmissionTypeschema_Protect_TxsdSubmissionTypeSequenceActionsSequenceActionChoiceProtect_ struct {
	//	Communicate the intention that the data are to be deposited in a protected database and not made
	//	public under any circumstances. This is separate from hold/release directives, which indicate the public visibility
	//	of the records.
	Protects []*TxsdSubmissionTypeSequenceActionsSequenceActionChoiceProtect `xml:"PROTECT"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_PROTECTchoiceACTIONsequenceACTIONSsequenceSubmissionTypeschema_Protect_TxsdSubmissionTypeSequenceActionsSequenceActionChoiceProtect_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_PROTECTchoiceACTIONsequenceACTIONSsequenceSubmissionTypeschema_Protect_TxsdSubmissionTypeSequenceActionsSequenceActionChoiceProtect_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_PROTECTchoiceACTIONsequenceACTIONSsequenceSubmissionTypeschema_Protect_TxsdSubmissionTypeSequenceActionsSequenceActionChoiceProtect_ instance.
func (me *XsdGoPkgHasElems_PROTECTchoiceACTIONsequenceACTIONSsequenceSubmissionTypeschema_Protect_TxsdSubmissionTypeSequenceActionsSequenceActionChoiceProtect_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_PROTECTchoiceACTIONsequenceACTIONSsequenceSubmissionTypeschema_Protect_TxsdSubmissionTypeSequenceActionsSequenceActionChoiceProtect_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Protects {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	primary accession of the record in one of INSDC SRA archives.
type XsdGoPkgHasElems_PrimaryIDsequenceIdentifierTypeschema_PrimaryId_TNameAndLabelType_ struct {
	//	primary accession of the record in one of INSDC SRA archives.
	PrimaryIds []*TNameAndLabelType `xml:"PRIMARY_ID"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_PrimaryIDsequenceIdentifierTypeschema_PrimaryId_TNameAndLabelType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_PrimaryIDsequenceIdentifierTypeschema_PrimaryId_TNameAndLabelType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_PrimaryIDsequenceIdentifierTypeschema_PrimaryId_TNameAndLabelType_ instance.
func (me *XsdGoPkgHasElems_PrimaryIDsequenceIdentifierTypeschema_PrimaryId_TNameAndLabelType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_PrimaryIDsequenceIdentifierTypeschema_PrimaryId_TNameAndLabelType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.PrimaryIds {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The internet service link (file:, http:, ftp:, etc).
type XsdGoPkgHasElems_URLallURLLINKchoiceLinkTypeschema_Url_XsdtAnyURI_ struct {
	//	The internet service link (file:, http:, ftp:, etc).
	Urls []xsdt.AnyURI `xml:"URL"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_URLallURLLINKchoiceLinkTypeschema_Url_XsdtAnyURI_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_URLallURLLINKchoiceLinkTypeschema_Url_XsdtAnyURI_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_URLallURLLINKchoiceLinkTypeschema_Url_XsdtAnyURI_ instance.
func (me *XsdGoPkgHasElems_URLallURLLINKchoiceLinkTypeschema_Url_XsdtAnyURI_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_URLallURLLINKchoiceLinkTypeschema_Url_XsdtAnyURI_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	READ_INDEX starts at 0 and is incrementally increased for each sequential READ_SPEC within a
//	SPOT_DECODE_SPEC
type XsdGoPkgHasElems_ReadINDEXsequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_ReadIndex_XsdtNonNegativeInteger_ struct {
	//	READ_INDEX starts at 0 and is incrementally increased for each sequential READ_SPEC within a
	//	SPOT_DECODE_SPEC
	ReadIndexs []xsdt.NonNegativeInteger `xml:"READ_INDEX"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_ReadINDEXsequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_ReadIndex_XsdtNonNegativeInteger_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ReadINDEXsequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_ReadIndex_XsdtNonNegativeInteger_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ReadINDEXsequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_ReadIndex_XsdtNonNegativeInteger_ instance.
func (me *XsdGoPkgHasElems_ReadINDEXsequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_ReadIndex_XsdtNonNegativeInteger_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_ReadINDEXsequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_ReadIndex_XsdtNonNegativeInteger_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	READ_LABEL is a name for this tag, and can be used to on output to determine read name, for example
//	F or R.
type XsdGoPkgHasElems_ReadLABELsequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_ReadLabel_XsdtString_ struct {
	//	READ_LABEL is a name for this tag, and can be used to on output to determine read name, for example
	//	F or R.
	ReadLabels []xsdt.String `xml:"READ_LABEL"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_ReadLABELsequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_ReadLabel_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ReadLABELsequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_ReadLabel_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ReadLABELsequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_ReadLabel_XsdtString_ instance.
func (me *XsdGoPkgHasElems_ReadLABELsequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_ReadLabel_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_ReadLABELsequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_ReadLabel_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	A submitter provided identifier of the (new) record. used in submisison process and replaced by primary archive
//	id on successfull load. @namespace is optional and may refer to submitter private database or LIMS
//	identifier.
type XsdGoPkgHasElem_SubmitterIDsequenceIdentifierTypeschema_SubmitterId_TQualifiedNameType_ struct {
	//	A submitter provided identifier of the (new) record. used in submisison process and replaced by primary archive
	//	id on successfull load. @namespace is optional and may refer to submitter private database or LIMS
	//	identifier.
	SubmitterId *TQualifiedNameType `xml:"SUBMITTER_ID"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_SubmitterIDsequenceIdentifierTypeschema_SubmitterId_TQualifiedNameType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_SubmitterIDsequenceIdentifierTypeschema_SubmitterId_TQualifiedNameType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_SubmitterIDsequenceIdentifierTypeschema_SubmitterId_TQualifiedNameType_ instance.
func (me *XsdGoPkgHasElem_SubmitterIDsequenceIdentifierTypeschema_SubmitterId_TQualifiedNameType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_SubmitterIDsequenceIdentifierTypeschema_SubmitterId_TQualifiedNameType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.SubmitterId.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Optional scientific units.
type XsdGoPkgHasElems_UNITSallAttributeTypeschema_Units_XsdtString_ struct {
	//	Optional scientific units.
	Unitses []xsdt.String `xml:"UNITS"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_UNITSallAttributeTypeschema_Units_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_UNITSallAttributeTypeschema_Units_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_UNITSallAttributeTypeschema_Units_XsdtString_ instance.
func (me *XsdGoPkgHasElems_UNITSallAttributeTypeschema_Units_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_UNITSallAttributeTypeschema_Units_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Lexically ordered value that allows for the pipe section to be hierarchically ordered. The float
//	primitive data type is used to allow for pipe sections to be inserted later on.
type XsdGoPkgHasElems_StepINDEXsequencePIPESECTIONsequencePipelineTypeschema_StepIndex_XsdtString_ struct {
	//	Lexically ordered value that allows for the pipe section to be hierarchically ordered. The float
	//	primitive data type is used to allow for pipe sections to be inserted later on.
	StepIndexs []xsdt.String `xml:"STEP_INDEX"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_StepINDEXsequencePIPESECTIONsequencePipelineTypeschema_StepIndex_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_StepINDEXsequencePIPESECTIONsequencePipelineTypeschema_StepIndex_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_StepINDEXsequencePIPESECTIONsequencePipelineTypeschema_StepIndex_XsdtString_ instance.
func (me *XsdGoPkgHasElems_StepINDEXsequencePIPESECTIONsequencePipelineTypeschema_StepIndex_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_StepINDEXsequencePIPESECTIONsequencePipelineTypeschema_StepIndex_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Name of the attribute.
type XsdGoPkgHasElems_TAGallAttributeTypeschema_Tag_XsdtString_ struct {
	//	Name of the attribute.
	Tags []xsdt.String `xml:"TAG"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_TAGallAttributeTypeschema_Tag_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_TAGallAttributeTypeschema_Tag_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_TAGallAttributeTypeschema_Tag_XsdtString_ instance.
func (me *XsdGoPkgHasElems_TAGallAttributeTypeschema_Tag_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_TAGallAttributeTypeschema_Tag_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_EntrezLINKchoiceLinkTypeschema_EntrezLink_TxsdLinkTypeChoiceEntrezLink_ struct {
	EntrezLinks []*TxsdLinkTypeChoiceEntrezLink `xml:"ENTREZ_LINK"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_EntrezLINKchoiceLinkTypeschema_EntrezLink_TxsdLinkTypeChoiceEntrezLink_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_EntrezLINKchoiceLinkTypeschema_EntrezLink_TxsdLinkTypeChoiceEntrezLink_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_EntrezLINKchoiceLinkTypeschema_EntrezLink_TxsdLinkTypeChoiceEntrezLink_ instance.
func (me *XsdGoPkgHasElems_EntrezLINKchoiceLinkTypeschema_EntrezLink_TxsdLinkTypeChoiceEntrezLink_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_EntrezLINKchoiceLinkTypeschema_EntrezLink_TxsdLinkTypeChoiceEntrezLink_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.EntrezLinks {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Name of the program or process for primary analysis. This may include a test or condition that leads to
//	branching in the workflow.
type XsdGoPkgHasElems_PROGRAMsequencePIPESECTIONsequencePipelineTypeschema_Program_XsdtString_ struct {
	//	Name of the program or process for primary analysis. This may include a test or condition that leads to
	//	branching in the workflow.
	Programs []xsdt.String `xml:"PROGRAM"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_PROGRAMsequencePIPESECTIONsequencePipelineTypeschema_Program_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_PROGRAMsequencePIPESECTIONsequencePipelineTypeschema_Program_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_PROGRAMsequencePIPESECTIONsequencePipelineTypeschema_Program_XsdtString_ instance.
func (me *XsdGoPkgHasElems_PROGRAMsequencePIPESECTIONsequencePipelineTypeschema_Program_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_PROGRAMsequencePIPESECTIONsequencePipelineTypeschema_Program_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Notes about the program or process for primary analysis.
type XsdGoPkgHasElems_NOTESsequencePIPESECTIONsequencePipelineTypeschema_Notes_XsdtString_ struct {
	//	Notes about the program or process for primary analysis.
	Noteses []xsdt.String `xml:"NOTES"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_NOTESsequencePIPESECTIONsequencePipelineTypeschema_Notes_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_NOTESsequencePIPESECTIONsequencePipelineTypeschema_Notes_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_NOTESsequencePIPESECTIONsequencePipelineTypeschema_Notes_XsdtString_ instance.
func (me *XsdGoPkgHasElems_NOTESsequencePIPESECTIONsequencePipelineTypeschema_Notes_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_NOTESsequencePIPESECTIONsequencePipelineTypeschema_Notes_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

var (
	//	Set this to false to break a Walk() immediately as soon as the first error is returned by a custom handler function.
	//	If true, Walk() proceeds and accumulates all errors in the WalkErrors slice.
	WalkContinueOnError = true
	//	Contains all errors accumulated during Walk()s. If you're using this, you need to reset this yourself as needed prior to a fresh Walk().
	WalkErrors []error
	//	Your custom error-handling function, if required.
	WalkOnError func(error)
	//	Provides 198 strong-typed hooks for your own custom handler functions to be invoked when the Walk() method is called on any instance of any (non-attribute-related) struct type defined in this package.
	//	If your custom handler does get called at all for a given struct instance, then it always gets called twice, first with the 'enter' bool argument set to true, then (after having Walk()ed all subordinate struct instances, if any) once again with it set to false.
	WalkHandlers = &XsdGoPkgWalkHandlers{}
)

//	Provides 198 strong-typed hooks for your own custom handler functions to be invoked when the Walk() method is called on any instance of any (non-attribute-related) struct type defined in this package.
//	If your custom handler does get called at all for a given struct instance, then it always gets called twice, first with the 'enter' bool argument set to true, then (after having Walk()ed all subordinate struct instances, if any) once again with it set to false.
type XsdGoPkgWalkHandlers struct {
	XsdGoPkgHasElems_InstrumentMODELsequenceIONTORRENTchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceIonTorrentSequenceInstrumentModel_                                                                                                      func(*XsdGoPkgHasElems_InstrumentMODELsequenceIONTORRENTchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceIonTorrentSequenceInstrumentModel_, bool) error
	XsdGoPkgHasElems_ACTIONsequenceTxsdSubmissionTypeSequenceActionsACTIONSsequenceSubmissionTypeschema_Action_TxsdSubmissionTypeSequenceActionsSequenceAction_                                                                                              func(*XsdGoPkgHasElems_ACTIONsequenceTxsdSubmissionTypeSequenceActionsACTIONSsequenceSubmissionTypeschema_Action_TxsdSubmissionTypeSequenceActionsSequenceAction_, bool) error
	TxsdLinkTypeChoiceUrlLink                                                                                                                                                                                                                                func(*TxsdLinkTypeChoiceUrlLink, bool) error
	TxsdSubmissionTypeSequenceSubmissionAttributes                                                                                                                                                                                                           func(*TxsdSubmissionTypeSequenceSubmissionAttributes, bool) error
	XsdGoPkgHasElems_SubmissionATTRIBUTESsequenceSubmissionTypeschema_SubmissionAttributes_TxsdSubmissionTypeSequenceSubmissionAttributes_                                                                                                                   func(*XsdGoPkgHasElems_SubmissionATTRIBUTESsequenceSubmissionTypeschema_SubmissionAttributes_TxsdSubmissionTypeSequenceSubmissionAttributes_, bool) error
	XsdGoPkgHasElem_SecondaryIDsequenceIdentifierTypeschema_SecondaryId_TNameAndLabelType_                                                                                                                                                                   func(*XsdGoPkgHasElem_SecondaryIDsequenceIdentifierTypeschema_SecondaryId_TNameAndLabelType_, bool) error
	XsdGoPkgHasElems_QUERYchoicesequenceENTREZLINKchoiceLinkTypeschema_Query_XsdtString_                                                                                                                                                                     func(*XsdGoPkgHasElems_QUERYchoicesequenceENTREZLINKchoiceLinkTypeschema_Query_XsdtString_, bool) error
	XsdGoPkgHasElems_IDchoicesequenceENTREZLINKchoiceLinkTypeschema_Id_XsdtNonNegativeInteger_                                                                                                                                                               func(*XsdGoPkgHasElems_IDchoicesequenceENTREZLINKchoiceLinkTypeschema_Id_XsdtNonNegativeInteger_, bool) error
	TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceChoiceRelativeOrder                                                                                                                                                                    func(*TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceChoiceRelativeOrder, bool) error
	XsdGoPkgHasElem_CAPILLARYchoicePlatformTypeschema_Capillary_TxsdPlatformTypeChoiceCapillary_                                                                                                                                                             func(*XsdGoPkgHasElem_CAPILLARYchoicePlatformTypeschema_Capillary_TxsdPlatformTypeChoiceCapillary_, bool) error
	TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceChoiceExpectedBasecallTable                                                                                                                                                            func(*TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceChoiceExpectedBasecallTable, bool) error
	XsdGoPkgHasElem_ReadINDEXsequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_ReadIndex_XsdtNonNegativeInteger_                                                                                                                          func(*XsdGoPkgHasElem_ReadINDEXsequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_ReadIndex_XsdtNonNegativeInteger_, bool) error
	XsdGoPkgHasElems_DIRECTIVESsequenceProcessingTypeschema_Directives_TSequencingDirectivesType_                                                                                                                                                            func(*XsdGoPkgHasElems_DIRECTIVESsequenceProcessingTypeschema_Directives_TSequencingDirectivesType_, bool) error
	TNameAndLabelType                                                                                                                                                                                                                                        func(*TNameAndLabelType, bool) error
	TIdentifierType                                                                                                                                                                                                                                          func(*TIdentifierType, bool) error
	TSubmissionSetType                                                                                                                                                                                                                                       func(*TSubmissionSetType, bool) error
	XsdGoPkgHasElem_ReadTYPEsequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_ReadType_TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceReadType_Forward                                                                 func(*XsdGoPkgHasElem_ReadTYPEsequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_ReadType_TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceReadType_Forward, bool) error
	XsdGoPkgHasElem_BASECALLsequenceEXPECTEDBasecallTABLEchoicesequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_Basecall_TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceChoiceExpectedBasecallTableSequenceBasecall_  func(*XsdGoPkgHasElem_BASECALLsequenceEXPECTEDBasecallTABLEchoicesequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_Basecall_TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceChoiceExpectedBasecallTableSequenceBasecall_, bool) error
	TxsdPlatformTypeChoiceAbiSolid                                                                                                                                                                                                                           func(*TxsdPlatformTypeChoiceAbiSolid, bool) error
	XsdGoPkgHasElems_InstrumentMODELsequenceCOMPLETEGENOMICSchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceCompleteGenomicsSequenceInstrumentModel_                                                                                          func(*XsdGoPkgHasElems_InstrumentMODELsequenceCOMPLETEGENOMICSchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceCompleteGenomicsSequenceInstrumentModel_, bool) error
	XsdGoPkgHasElem_IonTORRENTchoicePlatformTypeschema_IonTorrent_TxsdPlatformTypeChoiceIonTorrent_                                                                                                                                                          func(*XsdGoPkgHasElem_IonTORRENTchoicePlatformTypeschema_IonTorrent_TxsdPlatformTypeChoiceIonTorrent_, bool) error
	XsdGoPkgHasElem_SUPPRESSchoiceTxsdSubmissionTypeSequenceActionsSequenceActionACTIONsequenceTxsdSubmissionTypeSequenceActionsACTIONSsequenceSubmissionTypeschema_Suppress_TxsdSubmissionTypeSequenceActionsSequenceActionChoiceSuppress_                  func(*XsdGoPkgHasElem_SUPPRESSchoiceTxsdSubmissionTypeSequenceActionsSequenceActionACTIONsequenceTxsdSubmissionTypeSequenceActionsACTIONSsequenceSubmissionTypeschema_Suppress_TxsdSubmissionTypeSequenceActionsSequenceActionChoiceSuppress_, bool) error
	XsdGoPkgHasElem_IDchoicesequenceENTREZLINKchoiceLinkTypeschema_Id_XsdtNonNegativeInteger_                                                                                                                                                                func(*XsdGoPkgHasElem_IDchoicesequenceENTREZLINKchoiceLinkTypeschema_Id_XsdtNonNegativeInteger_, bool) error
	XsdGoPkgHasElem_VALUEallAttributeTypeschema_Value_XsdtString_                                                                                                                                                                                            func(*XsdGoPkgHasElem_VALUEallAttributeTypeschema_Value_XsdtString_, bool) error
	XsdGoPkgHasElems_BASECALLsequenceEXPECTEDBasecallTABLEchoicesequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_Basecall_TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceChoiceExpectedBasecallTableSequenceBasecall_ func(*XsdGoPkgHasElems_BASECALLsequenceEXPECTEDBasecallTABLEchoicesequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_Basecall_TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceChoiceExpectedBasecallTableSequenceBasecall_, bool) error
	XsdGoPkgHasElems_EntrezLINKchoiceLinkTypeschema_EntrezLink_TxsdLinkTypeChoiceEntrezLink_                                                                                                                                                                 func(*XsdGoPkgHasElems_EntrezLINKchoiceLinkTypeschema_EntrezLink_TxsdLinkTypeChoiceEntrezLink_, bool) error
	XsdGoPkgHasElem_OxfordNANOPOREchoicePlatformTypeschema_OxfordNanopore_TxsdPlatformTypeChoiceOxfordNanopore_                                                                                                                                              func(*XsdGoPkgHasElem_OxfordNANOPOREchoicePlatformTypeschema_OxfordNanopore_TxsdPlatformTypeChoiceOxfordNanopore_, bool) error
	XsdGoPkgHasElem_InstrumentMODELallHELICOSchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceHelicosAllInstrumentModel_                                                                                                                       func(*XsdGoPkgHasElem_InstrumentMODELallHELICOSchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceHelicosAllInstrumentModel_, bool) error
	TxsdSubmissionTypeSequenceActionsSequenceActionChoiceSuppress                                                                                                                                                                                            func(*TxsdSubmissionTypeSequenceActionsSequenceActionChoiceSuppress, bool) error
	XsdGoPkgHasElems_SecondaryIDsequenceIdentifierTypeschema_SecondaryId_TNameAndLabelType_                                                                                                                                                                  func(*XsdGoPkgHasElems_SecondaryIDsequenceIdentifierTypeschema_SecondaryId_TNameAndLabelType_, bool) error
	XsdGoPkgHasElems_SpotDecodeSPECchoiceSpotDescriptorTypeschema_SpotDecodeSpec_TxsdSpotDescriptorTypeChoiceSpotDecodeSpec_                                                                                                                                 func(*XsdGoPkgHasElems_SpotDecodeSPECchoiceSpotDescriptorTypeschema_SpotDecodeSpec_TxsdSpotDescriptorTypeChoiceSpotDecodeSpec_, bool) error
	XsdGoPkgHasElem_DIRECTIVESsequenceProcessingTypeschema_Directives_TSequencingDirectivesType_                                                                                                                                                             func(*XsdGoPkgHasElem_DIRECTIVESsequenceProcessingTypeschema_Directives_TSequencingDirectivesType_, bool) error
	TxsdPlatformTypeChoiceIonTorrent                                                                                                                                                                                                                         func(*TxsdPlatformTypeChoiceIonTorrent, bool) error
	XsdGoPkgHasElems_InstrumentMODELsequenceILLUMINAchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceIlluminaSequenceInstrumentModel_                                                                                                          func(*XsdGoPkgHasElems_InstrumentMODELsequenceILLUMINAchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceIlluminaSequenceInstrumentModel_, bool) error
	TPipelineType                                                                                                                                                                                                                                            func(*TPipelineType, bool) error
	XsdGoPkgHasElems_IDallXRefTypeschema_Id_XsdtString_                                                                                                                                                                                                      func(*XsdGoPkgHasElems_IDallXRefTypeschema_Id_XsdtString_, bool) error
	XsdGoPkgHasElem_ExternalIDsequenceIdentifierTypeschema_ExternalId_TQualifiedNameType_                                                                                                                                                                    func(*XsdGoPkgHasElem_ExternalIDsequenceIdentifierTypeschema_ExternalId_TQualifiedNameType_, bool) error
	TLinkType                                                                                                                                                                                                                                                func(*TLinkType, bool) error
	XsdGoPkgHasElem_SpotLENGTHsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_SpotLength_XsdtNonNegativeInteger_                                                                                                                                        func(*XsdGoPkgHasElem_SpotLENGTHsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_SpotLength_XsdtNonNegativeInteger_, bool) error
	XsdGoPkgHasElems_VALUEallAttributeTypeschema_Value_XsdtString_                                                                                                                                                                                           func(*XsdGoPkgHasElems_VALUEallAttributeTypeschema_Value_XsdtString_, bool) error
	XsdGoPkgHasElems_CAPILLARYchoicePlatformTypeschema_Capillary_TxsdPlatformTypeChoiceCapillary_                                                                                                                                                            func(*XsdGoPkgHasElems_CAPILLARYchoicePlatformTypeschema_Capillary_TxsdPlatformTypeChoiceCapillary_, bool) error
	XsdGoPkgHasElem_MODIFYchoiceTxsdSubmissionTypeSequenceActionsSequenceActionACTIONsequenceTxsdSubmissionTypeSequenceActionsACTIONSsequenceSubmissionTypeschema_Modify_TxsdSubmissionTypeSequenceActionsSequenceActionChoiceModify_                        func(*XsdGoPkgHasElem_MODIFYchoiceTxsdSubmissionTypeSequenceActionsSequenceActionACTIONsequenceTxsdSubmissionTypeSequenceActionsACTIONSsequenceSubmissionTypeschema_Modify_TxsdSubmissionTypeSequenceActionsSequenceActionChoiceModify_, bool) error
	XsdGoPkgHasElem_VALIDATEchoiceTxsdSubmissionTypeSequenceActionsSequenceActionACTIONsequenceTxsdSubmissionTypeSequenceActionsACTIONSsequenceSubmissionTypeschema_Validate_TxsdSubmissionTypeSequenceActionsSequenceActionChoiceValidate_                  func(*XsdGoPkgHasElem_VALIDATEchoiceTxsdSubmissionTypeSequenceActionsSequenceActionACTIONsequenceTxsdSubmissionTypeSequenceActionsACTIONSsequenceSubmissionTypeschema_Validate_TxsdSubmissionTypeSequenceActionsSequenceActionChoiceValidate_, bool) error
	XsdGoPkgHasElems_IonTORRENTchoicePlatformTypeschema_IonTorrent_TxsdPlatformTypeChoiceIonTorrent_                                                                                                                                                         func(*XsdGoPkgHasElems_IonTORRENTchoicePlatformTypeschema_IonTorrent_TxsdPlatformTypeChoiceIonTorrent_, bool) error
	TSpotDescriptorType                                                                                                                                                                                                                                      func(*TSpotDescriptorType, bool) error
	TxsdPlatformTypeChoiceIllumina                                                                                                                                                                                                                           func(*TxsdPlatformTypeChoiceIllumina, bool) error
	XsdGoPkgHasElems_InstrumentMODELallHELICOSchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceHelicosAllInstrumentModel_                                                                                                                      func(*XsdGoPkgHasElems_InstrumentMODELallHELICOSchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceHelicosAllInstrumentModel_, bool) error
	TxsdPlatformTypeChoiceOxfordNanopore                                                                                                                                                                                                                     func(*TxsdPlatformTypeChoiceOxfordNanopore, bool) error
	XsdGoPkgHasElem_InstrumentMODELallLS454ChoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceLs454AllInstrumentModel_                                                                                                                           func(*XsdGoPkgHasElem_InstrumentMODELallLS454ChoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceLs454AllInstrumentModel_, bool) error
	XsdGoPkgHasElems_ReadSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_ReadSpec_TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpec_                                                                                                       func(*XsdGoPkgHasElems_ReadSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_ReadSpec_TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpec_, bool) error
	XsdGoPkgHasElems_PrevStepINDEXsequencePIPESECTIONsequencePipelineTypeschema_PrevStepIndex_XsdtString_                                                                                                                                                    func(*XsdGoPkgHasElems_PrevStepINDEXsequencePIPESECTIONsequencePipelineTypeschema_PrevStepIndex_XsdtString_, bool) error
	XsdGoPkgHasElem_PipeSECTIONsequencePipelineTypeschema_PipeSection_TxsdPipelineTypeSequencePipeSection_                                                                                                                                                   func(*XsdGoPkgHasElem_PipeSECTIONsequencePipelineTypeschema_PipeSection_TxsdPipelineTypeSequencePipeSection_, bool) error
	XsdGoPkgHasElems_PIPELINEsequenceProcessingTypeschema_Pipeline_TPipelineType_                                                                                                                                                                            func(*XsdGoPkgHasElems_PIPELINEsequenceProcessingTypeschema_Pipeline_TPipelineType_, bool) error
	XsdGoPkgHasElem_InstrumentMODELsequenceCOMPLETEGENOMICSchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceCompleteGenomicsSequenceInstrumentModel_                                                                                           func(*XsdGoPkgHasElem_InstrumentMODELsequenceCOMPLETEGENOMICSchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceCompleteGenomicsSequenceInstrumentModel_, bool) error
	XsdGoPkgHasElems_SUPPRESSchoiceTxsdSubmissionTypeSequenceActionsSequenceActionACTIONsequenceTxsdSubmissionTypeSequenceActionsACTIONSsequenceSubmissionTypeschema_Suppress_TxsdSubmissionTypeSequenceActionsSequenceActionChoiceSuppress_                 func(*XsdGoPkgHasElems_SUPPRESSchoiceTxsdSubmissionTypeSequenceActionsSequenceActionACTIONsequenceTxsdSubmissionTypeSequenceActionsACTIONSsequenceSubmissionTypeschema_Suppress_TxsdSubmissionTypeSequenceActionsSequenceActionChoiceSuppress_, bool) error
	XsdGoPkgHasElems_VALIDATEchoiceACTIONsequenceACTIONSsequenceSubmissionTypeschema_Validate_TxsdSubmissionTypeSequenceActionsSequenceActionChoiceValidate_                                                                                                 func(*XsdGoPkgHasElems_VALIDATEchoiceACTIONsequenceACTIONSsequenceSubmissionTypeschema_Validate_TxsdSubmissionTypeSequenceActionsSequenceActionChoiceValidate_, bool) error
	XsdGoPkgHasElem_SubmissionLINKsequenceSUBMISSIONLINKSsequenceSubmissionTypeschema_SubmissionLink_TLinkType_                                                                                                                                              func(*XsdGoPkgHasElem_SubmissionLINKsequenceSUBMISSIONLINKSsequenceSubmissionTypeschema_SubmissionLink_TLinkType_, bool) error
	XsdGoPkgHasElems_ILLUMINAchoicePlatformTypeschema_Illumina_TxsdPlatformTypeChoiceIllumina_                                                                                                                                                               func(*XsdGoPkgHasElems_ILLUMINAchoicePlatformTypeschema_Illumina_TxsdPlatformTypeChoiceIllumina_, bool) error
	XsdGoPkgHasElems_UrlLINKchoiceLinkTypeschema_UrlLink_TxsdLinkTypeChoiceUrlLink_                                                                                                                                                                          func(*XsdGoPkgHasElems_UrlLINKchoiceLinkTypeschema_UrlLink_TxsdLinkTypeChoiceUrlLink_, bool) error
	XsdGoPkgHasElem_RelativeORDERchoicesequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_RelativeOrder_TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceChoiceRelativeOrder_                                             func(*XsdGoPkgHasElem_RelativeORDERchoicesequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_RelativeOrder_TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceChoiceRelativeOrder_, bool) error
	XsdGoPkgHasElem_ReadLABELsequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_ReadLabel_XsdtString_                                                                                                                                      func(*XsdGoPkgHasElem_ReadLABELsequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_ReadLabel_XsdtString_, bool) error
	TxsdPlatformTypeChoiceHelicos                                                                                                                                                                                                                            func(*TxsdPlatformTypeChoiceHelicos, bool) error
	XsdGoPkgHasElems_DBsequenceENTREZLINKchoiceLinkTypeschema_Db_XsdtString_                                                                                                                                                                                 func(*XsdGoPkgHasElems_DBsequenceENTREZLINKchoiceLinkTypeschema_Db_XsdtString_, bool) error
	TxsdSubmissionTypeSequenceContacts                                                                                                                                                                                                                       func(*TxsdSubmissionTypeSequenceContacts, bool) error
	XsdGoPkgHasElem_URLallURLLINKchoiceLinkTypeschema_Url_XsdtAnyURI_                                                                                                                                                                                        func(*XsdGoPkgHasElem_URLallURLLINKchoiceLinkTypeschema_Url_XsdtAnyURI_, bool) error
	XsdGoPkgHasElem_InstrumentMODELsequenceOXFORDNANOPOREchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceOxfordNanoporeSequenceInstrumentModel_                                                                                               func(*XsdGoPkgHasElem_InstrumentMODELsequenceOXFORDNANOPOREchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceOxfordNanoporeSequenceInstrumentModel_, bool) error
	TPlatformType                                                                                                                                                                                                                                            func(*TPlatformType, bool) error
	XsdGoPkgHasElem_SubmissionATTRIBUTEsequenceTxsdSubmissionTypeSequenceSubmissionAttributesSUBMISSIONATTRIBUTESsequenceSubmissionTypeschema_SubmissionAttribute_TAttributeType_                                                                            func(*XsdGoPkgHasElem_SubmissionATTRIBUTEsequenceTxsdSubmissionTypeSequenceSubmissionAttributesSUBMISSIONATTRIBUTESsequenceSubmissionTypeschema_SubmissionAttribute_TAttributeType_, bool) error
	XsdGoPkgHasElem_ILLUMINAchoicePlatformTypeschema_Illumina_TxsdPlatformTypeChoiceIllumina_                                                                                                                                                                func(*XsdGoPkgHasElem_ILLUMINAchoicePlatformTypeschema_Illumina_TxsdPlatformTypeChoiceIllumina_, bool) error
	XsdGoPkgHasElem_CONTACTSsequenceSubmissionTypeschema_Contacts_TxsdSubmissionTypeSequenceContacts_                                                                                                                                                        func(*XsdGoPkgHasElem_CONTACTSsequenceSubmissionTypeschema_Contacts_TxsdSubmissionTypeSequenceContacts_, bool) error
	XsdGoPkgHasElem_HOLDchoiceTxsdSubmissionTypeSequenceActionsSequenceActionACTIONsequenceTxsdSubmissionTypeSequenceActionsACTIONSsequenceSubmissionTypeschema_Hold_TxsdSubmissionTypeSequenceActionsSequenceActionChoiceHold_                              func(*XsdGoPkgHasElem_HOLDchoiceTxsdSubmissionTypeSequenceActionsSequenceActionACTIONsequenceTxsdSubmissionTypeSequenceActionsACTIONSsequenceSubmissionTypeschema_Hold_TxsdSubmissionTypeSequenceActionsSequenceActionChoiceHold_, bool) error
	XsdGoPkgHasElem_SubmissionSet                                                                                                                                                                                                                            func(*XsdGoPkgHasElem_SubmissionSet, bool) error
	XsdGoPkgHasElem_SampleDemuxDIRECTIVEallSequencingDirectivesTypeschema_SampleDemuxDirective_TxsdSequencingDirectivesTypeAllSampleDemuxDirective_                                                                                                          func(*XsdGoPkgHasElem_SampleDemuxDIRECTIVEallSequencingDirectivesTypeschema_SampleDemuxDirective_TxsdSequencingDirectivesTypeAllSampleDemuxDirective_, bool) error
	TxsdSubmissionTypeSequenceActionsSequenceActionChoiceValidate                                                                                                                                                                                            func(*TxsdSubmissionTypeSequenceActionsSequenceActionChoiceValidate, bool) error
	XsdGoPkgHasElem_InstrumentMODELsequenceCAPILLARYchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceCapillarySequenceInstrumentModel_                                                                                                         func(*XsdGoPkgHasElem_InstrumentMODELsequenceCAPILLARYchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceCapillarySequenceInstrumentModel_, bool) error
	XsdGoPkgHasElem_PrevStepINDEXsequencePIPESECTIONsequencePipelineTypeschema_PrevStepIndex_XsdtString_                                                                                                                                                     func(*XsdGoPkgHasElem_PrevStepINDEXsequencePIPESECTIONsequencePipelineTypeschema_PrevStepIndex_XsdtString_, bool) error
	XsdGoPkgHasElems_PrimaryIDsequenceIdentifierTypeschema_PrimaryId_TNameAndLabelType_                                                                                                                                                                      func(*XsdGoPkgHasElems_PrimaryIDsequenceIdentifierTypeschema_PrimaryId_TNameAndLabelType_, bool) error
	TxsdSubmissionTypeSequenceActionsSequenceActionChoiceProtect                                                                                                                                                                                             func(*TxsdSubmissionTypeSequenceActionsSequenceActionChoiceProtect, bool) error
	TxsdSpotDescriptorTypeChoiceSpotDecodeSpec                                                                                                                                                                                                               func(*TxsdSpotDescriptorTypeChoiceSpotDecodeSpec, bool) error
	TxsdSubmissionTypeSequenceActions                                                                                                                                                                                                                        func(*TxsdSubmissionTypeSequenceActions, bool) error
	TProcessingType                                                                                                                                                                                                                                          func(*TProcessingType, bool) error
	XsdGoPkgHasElems_InstrumentMODELsequenceCAPILLARYchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceCapillarySequenceInstrumentModel_                                                                                                        func(*XsdGoPkgHasElems_InstrumentMODELsequenceCAPILLARYchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceCapillarySequenceInstrumentModel_, bool) error
	XsdGoPkgHasElems_VERSIONsequencePIPESECTIONsequencePipelineTypeschema_Version_XsdtString_                                                                                                                                                                func(*XsdGoPkgHasElems_VERSIONsequencePIPESECTIONsequencePipelineTypeschema_Version_XsdtString_, bool) error
	XsdGoPkgHasElem_RELEASEchoiceTxsdSubmissionTypeSequenceActionsSequenceActionACTIONsequenceTxsdSubmissionTypeSequenceActionsACTIONSsequenceSubmissionTypeschema_Release_TxsdSubmissionTypeSequenceActionsSequenceActionChoiceRelease_                     func(*XsdGoPkgHasElem_RELEASEchoiceTxsdSubmissionTypeSequenceActionsSequenceActionACTIONsequenceTxsdSubmissionTypeSequenceActionsACTIONSsequenceSubmissionTypeschema_Release_TxsdSubmissionTypeSequenceActionsSequenceActionChoiceRelease_, bool) error
	TxsdSubmissionTypeSequenceActionsSequenceActionChoiceAdd                                                                                                                                                                                                 func(*TxsdSubmissionTypeSequenceActionsSequenceActionChoiceAdd, bool) error
	XsdGoPkgHasElems_TITLEsequenceSubmissionTypeschema_Title_XsdtString_                                                                                                                                                                                     func(*XsdGoPkgHasElems_TITLEsequenceSubmissionTypeschema_Title_XsdtString_, bool) error
	XsdGoPkgHasElem_PacbioSMRTchoicePlatformTypeschema_PacbioSmrt_TxsdPlatformTypeChoicePacbioSmrt_                                                                                                                                                          func(*XsdGoPkgHasElem_PacbioSMRTchoicePlatformTypeschema_PacbioSmrt_TxsdPlatformTypeChoicePacbioSmrt_, bool) error
	TxsdPipelineTypeSequencePipeSection                                                                                                                                                                                                                      func(*TxsdPipelineTypeSequencePipeSection, bool) error
	XsdGoPkgHasElems_PipeSECTIONsequencePipelineTypeschema_PipeSection_TxsdPipelineTypeSequencePipeSection_                                                                                                                                                  func(*XsdGoPkgHasElems_PipeSECTIONsequencePipelineTypeschema_PipeSection_TxsdPipelineTypeSequencePipeSection_, bool) error
	XsdGoPkgHasElem_SubmitterIDsequenceIdentifierTypeschema_SubmitterId_TQualifiedNameType_                                                                                                                                                                  func(*XsdGoPkgHasElem_SubmitterIDsequenceIdentifierTypeschema_SubmitterId_TQualifiedNameType_, bool) error
	TAlignmentDirectivesType                                                                                                                                                                                                                                 func(*TAlignmentDirectivesType, bool) error
	XsdGoPkgHasElems_RelativeORDERchoicesequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_RelativeOrder_TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceChoiceRelativeOrder_                                            func(*XsdGoPkgHasElems_RelativeORDERchoicesequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_RelativeOrder_TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceChoiceRelativeOrder_, bool) error
	XsdGoPkgHasElems_PROTECTchoiceACTIONsequenceACTIONSsequenceSubmissionTypeschema_Protect_TxsdSubmissionTypeSequenceActionsSequenceActionChoiceProtect_                                                                                                    func(*XsdGoPkgHasElems_PROTECTchoiceACTIONsequenceACTIONSsequenceSubmissionTypeschema_Protect_TxsdSubmissionTypeSequenceActionsSequenceActionChoiceProtect_, bool) error
	XsdGoPkgHasElems_ReadINDEXsequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_ReadIndex_XsdtNonNegativeInteger_                                                                                                                         func(*XsdGoPkgHasElems_ReadINDEXsequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_ReadIndex_XsdtNonNegativeInteger_, bool) error
	XsdGoPkgHasElems_ACTIONSsequenceSubmissionTypeschema_Actions_TxsdSubmissionTypeSequenceActions_                                                                                                                                                          func(*XsdGoPkgHasElems_ACTIONSsequenceSubmissionTypeschema_Actions_TxsdSubmissionTypeSequenceActions_, bool) error
	XsdGoPkgHasElems_AlignmentMarksDuplicateReadsallAlignmentDirectivesTypeschema_AlignmentMarksDuplicateReads_XsdtBoolean_                                                                                                                                  func(*XsdGoPkgHasElems_AlignmentMarksDuplicateReadsallAlignmentDirectivesTypeschema_AlignmentMarksDuplicateReads_XsdtBoolean_, bool) error
	XsdGoPkgHasElems_IDENTIFIERSsequenceSubmissionTypeschema_Identifiers_TIdentifierType_                                                                                                                                                                    func(*XsdGoPkgHasElems_IDENTIFIERSsequenceSubmissionTypeschema_Identifiers_TIdentifierType_, bool) error
	XsdGoPkgHasElems_SpotLENGTHsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_SpotLength_XsdtNonNegativeInteger_                                                                                                                                       func(*XsdGoPkgHasElems_SpotLENGTHsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_SpotLength_XsdtNonNegativeInteger_, bool) error
	XsdGoPkgHasElems_UNITSallAttributeTypeschema_Units_XsdtString_                                                                                                                                                                                           func(*XsdGoPkgHasElems_UNITSallAttributeTypeschema_Units_XsdtString_, bool) error
	XsdGoPkgHasElems_InstrumentMODELsequenceOXFORDNANOPOREchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceOxfordNanoporeSequenceInstrumentModel_                                                                                              func(*XsdGoPkgHasElems_InstrumentMODELsequenceOXFORDNANOPOREchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceOxfordNanoporeSequenceInstrumentModel_, bool) error
	XsdGoPkgHasElem_TITLEsequenceSubmissionTypeschema_Title_XsdtString_                                                                                                                                                                                      func(*XsdGoPkgHasElem_TITLEsequenceSubmissionTypeschema_Title_XsdtString_, bool) error
	TxsdSubmissionTypeSequenceContactsSequenceContact                                                                                                                                                                                                        func(*TxsdSubmissionTypeSequenceContactsSequenceContact, bool) error
	XsdGoPkgHasElems_HOLDchoiceTxsdSubmissionTypeSequenceActionsSequenceActionACTIONsequenceTxsdSubmissionTypeSequenceActionsACTIONSsequenceSubmissionTypeschema_Hold_TxsdSubmissionTypeSequenceActionsSequenceActionChoiceHold_                             func(*XsdGoPkgHasElems_HOLDchoiceTxsdSubmissionTypeSequenceActionsSequenceActionACTIONsequenceTxsdSubmissionTypeSequenceActionsACTIONSsequenceSubmissionTypeschema_Hold_TxsdSubmissionTypeSequenceActionsSequenceActionChoiceHold_, bool) error
	XsdGoPkgHasElem_ExpectedBasecallTABLEchoicesequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_ExpectedBasecallTable_TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceChoiceExpectedBasecallTable_                     func(*XsdGoPkgHasElem_ExpectedBasecallTABLEchoicesequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_ExpectedBasecallTable_TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceChoiceExpectedBasecallTable_, bool) error
	XsdGoPkgHasCdata                                                                                                                                                                                                                                         func(*XsdGoPkgHasCdata, bool) error
	XsdGoPkgHasElem_InstrumentMODELsequenceILLUMINAchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceIlluminaSequenceInstrumentModel_                                                                                                           func(*XsdGoPkgHasElem_InstrumentMODELsequenceILLUMINAchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceIlluminaSequenceInstrumentModel_, bool) error
	TAttributeType                                                                                                                                                                                                                                           func(*TAttributeType, bool) error
	XsdGoPkgHasElem_BaseCOORDchoicesequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_BaseCoord_XsdtInteger_                                                                                                                               func(*XsdGoPkgHasElem_BaseCOORDchoicesequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_BaseCoord_XsdtInteger_, bool) error
	XsdGoPkgHasElem_VERSIONsequencePIPESECTIONsequencePipelineTypeschema_Version_XsdtString_                                                                                                                                                                 func(*XsdGoPkgHasElem_VERSIONsequencePIPESECTIONsequencePipelineTypeschema_Version_XsdtString_, bool) error
	XsdGoPkgHasElem_NOTESsequencePIPESECTIONsequencePipelineTypeschema_Notes_XsdtString_                                                                                                                                                                     func(*XsdGoPkgHasElem_NOTESsequencePIPESECTIONsequencePipelineTypeschema_Notes_XsdtString_, bool) error
	XsdGoPkgHasElems_SUBMISSIONsequenceSubmissionSetTypeschema_Submission_TSubmissionType_                                                                                                                                                                   func(*XsdGoPkgHasElems_SUBMISSIONsequenceSubmissionSetTypeschema_Submission_TSubmissionType_, bool) error
	TSequencingDirectivesType                                                                                                                                                                                                                                func(*TSequencingDirectivesType, bool) error
	TxsdPlatformTypeChoicePacbioSmrt                                                                                                                                                                                                                         func(*TxsdPlatformTypeChoicePacbioSmrt, bool) error
	TxsdPlatformTypeChoiceLs454                                                                                                                                                                                                                              func(*TxsdPlatformTypeChoiceLs454, bool) error
	XsdGoPkgHasElem_ACTIONSsequenceSubmissionTypeschema_Actions_TxsdSubmissionTypeSequenceActions_                                                                                                                                                           func(*XsdGoPkgHasElem_ACTIONSsequenceSubmissionTypeschema_Actions_TxsdSubmissionTypeSequenceActions_, bool) error
	XsdGoPkgHasElem_TAGallAttributeTypeschema_Tag_XsdtString_                                                                                                                                                                                                func(*XsdGoPkgHasElem_TAGallAttributeTypeschema_Tag_XsdtString_, bool) error
	XsdGoPkgHasElem_SubmissionATTRIBUTESsequenceSubmissionTypeschema_SubmissionAttributes_TxsdSubmissionTypeSequenceSubmissionAttributes_                                                                                                                    func(*XsdGoPkgHasElem_SubmissionATTRIBUTESsequenceSubmissionTypeschema_SubmissionAttributes_TxsdSubmissionTypeSequenceSubmissionAttributes_, bool) error
	TSubmissionType                                                                                                                                                                                                                                          func(*TSubmissionType, bool) error
	XsdGoPkgHasElem_AlignmentIncludesUnalignedReadsallAlignmentDirectivesTypeschema_AlignmentIncludesUnalignedReads_XsdtBoolean_                                                                                                                             func(*XsdGoPkgHasElem_AlignmentIncludesUnalignedReadsallAlignmentDirectivesTypeschema_AlignmentIncludesUnalignedReads_XsdtBoolean_, bool) error
	XsdGoPkgHasElems_TAGallAttributeTypeschema_Tag_XsdtString_                                                                                                                                                                                               func(*XsdGoPkgHasElems_TAGallAttributeTypeschema_Tag_XsdtString_, bool) error
	XsdGoPkgHasElems_PROGRAMsequencePIPESECTIONsequencePipelineTypeschema_Program_XsdtString_                                                                                                                                                                func(*XsdGoPkgHasElems_PROGRAMsequencePIPESECTIONsequencePipelineTypeschema_Program_XsdtString_, bool) error
	XsdGoPkgHasElem_ADDchoiceTxsdSubmissionTypeSequenceActionsSequenceActionACTIONsequenceTxsdSubmissionTypeSequenceActionsACTIONSsequenceSubmissionTypeschema_Add_TxsdSubmissionTypeSequenceActionsSequenceActionChoiceAdd_                                 func(*XsdGoPkgHasElem_ADDchoiceTxsdSubmissionTypeSequenceActionsSequenceActionACTIONsequenceTxsdSubmissionTypeSequenceActionsACTIONSsequenceSubmissionTypeschema_Add_TxsdSubmissionTypeSequenceActionsSequenceActionChoiceAdd_, bool) error
	XsdGoPkgHasElem_PROGRAMsequencePIPESECTIONsequencePipelineTypeschema_Program_XsdtString_                                                                                                                                                                 func(*XsdGoPkgHasElem_PROGRAMsequencePIPESECTIONsequencePipelineTypeschema_Program_XsdtString_, bool) error
	XsdGoPkgHasElem_AlignmentIncludesFailedReadsallAlignmentDirectivesTypeschema_AlignmentIncludesFailedReads_XsdtBoolean_                                                                                                                                   func(*XsdGoPkgHasElem_AlignmentIncludesFailedReadsallAlignmentDirectivesTypeschema_AlignmentIncludesFailedReads_XsdtBoolean_, bool) error
	XsdGoPkgHasElems_AbiSOLIDchoicePlatformTypeschema_AbiSolid_TxsdPlatformTypeChoiceAbiSolid_                                                                                                                                                               func(*XsdGoPkgHasElems_AbiSOLIDchoicePlatformTypeschema_AbiSolid_TxsdPlatformTypeChoiceAbiSolid_, bool) error
	XsdGoPkgHasElem_UUIDsequenceIdentifierTypeschema_Uuid_TNameAndLabelType_                                                                                                                                                                                 func(*XsdGoPkgHasElem_UUIDsequenceIdentifierTypeschema_Uuid_TNameAndLabelType_, bool) error
	XsdGoPkgHasElems_SubmissionLINKSsequenceSubmissionTypeschema_SubmissionLinks_TxsdSubmissionTypeSequenceSubmissionLinks_                                                                                                                                  func(*XsdGoPkgHasElems_SubmissionLINKSsequenceSubmissionTypeschema_SubmissionLinks_TxsdSubmissionTypeSequenceSubmissionLinks_, bool) error
	XsdGoPkgHasElem_Ls454ChoicePlatformTypeschema_Ls454_TxsdPlatformTypeChoiceLs454_                                                                                                                                                                         func(*XsdGoPkgHasElem_Ls454ChoicePlatformTypeschema_Ls454_TxsdPlatformTypeChoiceLs454_, bool) error
	TxsdSubmissionTypeSequenceActionsSequenceAction                                                                                                                                                                                                          func(*TxsdSubmissionTypeSequenceActionsSequenceAction, bool) error
	XsdGoPkgHasElems_UUIDsequenceIdentifierTypeschema_Uuid_TNameAndLabelType_                                                                                                                                                                                func(*XsdGoPkgHasElems_UUIDsequenceIdentifierTypeschema_Uuid_TNameAndLabelType_, bool) error
	XsdGoPkgHasElem_XrefLINKchoiceLinkTypeschema_XrefLink_TXRefType_                                                                                                                                                                                         func(*XsdGoPkgHasElem_XrefLINKchoiceLinkTypeschema_XrefLink_TXRefType_, bool) error
	XsdGoPkgHasElems_SubmissionATTRIBUTEsequenceTxsdSubmissionTypeSequenceSubmissionAttributesSUBMISSIONATTRIBUTESsequenceSubmissionTypeschema_SubmissionAttribute_TAttributeType_                                                                           func(*XsdGoPkgHasElems_SubmissionATTRIBUTEsequenceTxsdSubmissionTypeSequenceSubmissionAttributesSUBMISSIONATTRIBUTESsequenceSubmissionTypeschema_SubmissionAttribute_TAttributeType_, bool) error
	XsdGoPkgHasElems_XrefLINKchoiceLinkTypeschema_XrefLink_TXRefType_                                                                                                                                                                                        func(*XsdGoPkgHasElems_XrefLINKchoiceLinkTypeschema_XrefLink_TXRefType_, bool) error
	XsdGoPkgHasElems_SampleDemuxDIRECTIVEallSequencingDirectivesTypeschema_SampleDemuxDirective_TxsdSequencingDirectivesTypeAllSampleDemuxDirective_                                                                                                         func(*XsdGoPkgHasElems_SampleDemuxDIRECTIVEallSequencingDirectivesTypeschema_SampleDemuxDirective_TxsdSequencingDirectivesTypeAllSampleDemuxDirective_, bool) error
	XsdGoPkgHasElem_InstrumentMODELsequencePACBIOSMRTchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoicePacbioSmrtSequenceInstrumentModel_                                                                                                       func(*XsdGoPkgHasElem_InstrumentMODELsequencePACBIOSMRTchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoicePacbioSmrtSequenceInstrumentModel_, bool) error
	XsdGoPkgHasElems_ReadTYPEsequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_ReadType_TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceReadType_Forward                                                                func(*XsdGoPkgHasElems_ReadTYPEsequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_ReadType_TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceReadType_Forward, bool) error
	XsdGoPkgHasElems_ADDchoiceTxsdSubmissionTypeSequenceActionsSequenceActionACTIONsequenceTxsdSubmissionTypeSequenceActionsACTIONSsequenceSubmissionTypeschema_Add_TxsdSubmissionTypeSequenceActionsSequenceActionChoiceAdd_                                func(*XsdGoPkgHasElems_ADDchoiceTxsdSubmissionTypeSequenceActionsSequenceActionACTIONsequenceTxsdSubmissionTypeSequenceActionsACTIONSsequenceSubmissionTypeschema_Add_TxsdSubmissionTypeSequenceActionsSequenceActionChoiceAdd_, bool) error
	XsdGoPkgHasElems_InstrumentMODELsequenceABISOLIDchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceAbiSolidSequenceInstrumentModel_                                                                                                          func(*XsdGoPkgHasElems_InstrumentMODELsequenceABISOLIDchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceAbiSolidSequenceInstrumentModel_, bool) error
	XsdGoPkgHasElem_ReadSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_ReadSpec_TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpec_                                                                                                        func(*XsdGoPkgHasElem_ReadSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_ReadSpec_TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpec_, bool) error
	XsdGoPkgHasElems_AlignmentIncludesUnalignedReadsallAlignmentDirectivesTypeschema_AlignmentIncludesUnalignedReads_XsdtBoolean_                                                                                                                            func(*XsdGoPkgHasElems_AlignmentIncludesUnalignedReadsallAlignmentDirectivesTypeschema_AlignmentIncludesUnalignedReads_XsdtBoolean_, bool) error
	XsdGoPkgHasElem_IDENTIFIERSsequenceSubmissionTypeschema_Identifiers_TIdentifierType_                                                                                                                                                                     func(*XsdGoPkgHasElem_IDENTIFIERSsequenceSubmissionTypeschema_Identifiers_TIdentifierType_, bool) error
	XsdGoPkgHasElem_DBallXRefTypeschema_Db_XsdtString_                                                                                                                                                                                                       func(*XsdGoPkgHasElem_DBallXRefTypeschema_Db_XsdtString_, bool) error
	XsdGoPkgHasElems_CONTACTSsequenceSubmissionTypeschema_Contacts_TxsdSubmissionTypeSequenceContacts_                                                                                                                                                       func(*XsdGoPkgHasElems_CONTACTSsequenceSubmissionTypeschema_Contacts_TxsdSubmissionTypeSequenceContacts_, bool) error
	XsdGoPkgHasElems_LABELsequenceENTREZLINKchoiceLinkTypeschema_Label_XsdtString_                                                                                                                                                                           func(*XsdGoPkgHasElems_LABELsequenceENTREZLINKchoiceLinkTypeschema_Label_XsdtString_, bool) error
	XsdGoPkgHasElems_CONTACTsequenceTxsdSubmissionTypeSequenceContactsCONTACTSsequenceSubmissionTypeschema_Contact_TxsdSubmissionTypeSequenceContactsSequenceContact_                                                                                        func(*XsdGoPkgHasElems_CONTACTsequenceTxsdSubmissionTypeSequenceContactsCONTACTSsequenceSubmissionTypeschema_Contact_TxsdSubmissionTypeSequenceContactsSequenceContact_, bool) error
	TxsdSubmissionTypeSequenceActionsSequenceActionChoiceHold                                                                                                                                                                                                func(*TxsdSubmissionTypeSequenceActionsSequenceActionChoiceHold, bool) error
	XsdGoPkgHasElem_PROTECTchoiceTxsdSubmissionTypeSequenceActionsSequenceActionACTIONsequenceTxsdSubmissionTypeSequenceActionsACTIONSsequenceSubmissionTypeschema_Protect_TxsdSubmissionTypeSequenceActionsSequenceActionChoiceProtect_                     func(*XsdGoPkgHasElem_PROTECTchoiceTxsdSubmissionTypeSequenceActionsSequenceActionACTIONsequenceTxsdSubmissionTypeSequenceActionsACTIONSsequenceSubmissionTypeschema_Protect_TxsdSubmissionTypeSequenceActionsSequenceActionChoiceProtect_, bool) error
	TQualifiedNameType                                                                                                                                                                                                                                       func(*TQualifiedNameType, bool) error
	XsdGoPkgHasElem_CONTACTsequenceCONTACTSsequenceSubmissionTypeschema_Contact_TxsdSubmissionTypeSequenceContactsSequenceContact_                                                                                                                           func(*XsdGoPkgHasElem_CONTACTsequenceCONTACTSsequenceSubmissionTypeschema_Contact_TxsdSubmissionTypeSequenceContactsSequenceContact_, bool) error
	XsdGoPkgHasElems_OxfordNANOPOREchoicePlatformTypeschema_OxfordNanopore_TxsdPlatformTypeChoiceOxfordNanopore_                                                                                                                                             func(*XsdGoPkgHasElems_OxfordNANOPOREchoicePlatformTypeschema_OxfordNanopore_TxsdPlatformTypeChoiceOxfordNanopore_, bool) error
	XsdGoPkgHasElems_ReadLABELsequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_ReadLabel_XsdtString_                                                                                                                                     func(*XsdGoPkgHasElems_ReadLABELsequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_ReadLabel_XsdtString_, bool) error
	XsdGoPkgHasElem_AbiSOLIDchoicePlatformTypeschema_AbiSolid_TxsdPlatformTypeChoiceAbiSolid_                                                                                                                                                                func(*XsdGoPkgHasElem_AbiSOLIDchoicePlatformTypeschema_AbiSolid_TxsdPlatformTypeChoiceAbiSolid_, bool) error
	XsdGoPkgHasElems_URLallURLLINKchoiceLinkTypeschema_Url_XsdtAnyURI_                                                                                                                                                                                       func(*XsdGoPkgHasElems_URLallURLLINKchoiceLinkTypeschema_Url_XsdtAnyURI_, bool) error
	XsdGoPkgHasElems_StepINDEXsequencePIPESECTIONsequencePipelineTypeschema_StepIndex_XsdtString_                                                                                                                                                            func(*XsdGoPkgHasElems_StepINDEXsequencePIPESECTIONsequencePipelineTypeschema_StepIndex_XsdtString_, bool) error
	TXRefType                                                                                                                                                                                                                                                func(*TXRefType, bool) error
	TxsdLinkTypeChoiceEntrezLink                                                                                                                                                                                                                             func(*TxsdLinkTypeChoiceEntrezLink, bool) error
	XsdGoPkgHasElem_InstrumentMODELsequenceIONTORRENTchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceIonTorrentSequenceInstrumentModel_                                                                                                       func(*XsdGoPkgHasElem_InstrumentMODELsequenceIONTORRENTchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceIonTorrentSequenceInstrumentModel_, bool) error
	XsdGoPkgHasElems_InstrumentMODELallLS454ChoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceLs454AllInstrumentModel_                                                                                                                          func(*XsdGoPkgHasElems_InstrumentMODELallLS454ChoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceLs454AllInstrumentModel_, bool) error
	XsdGoPkgHasElems_PacbioSMRTchoicePlatformTypeschema_PacbioSmrt_TxsdPlatformTypeChoicePacbioSmrt_                                                                                                                                                         func(*XsdGoPkgHasElems_PacbioSMRTchoicePlatformTypeschema_PacbioSmrt_TxsdPlatformTypeChoicePacbioSmrt_, bool) error
	XsdGoPkgHasElem_InstrumentMODELsequenceABISOLIDchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceAbiSolidSequenceInstrumentModel_                                                                                                           func(*XsdGoPkgHasElem_InstrumentMODELsequenceABISOLIDchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoiceAbiSolidSequenceInstrumentModel_, bool) error
	XsdGoPkgHasElems_HELICOSchoicePlatformTypeschema_Helicos_TxsdPlatformTypeChoiceHelicos_                                                                                                                                                                  func(*XsdGoPkgHasElems_HELICOSchoicePlatformTypeschema_Helicos_TxsdPlatformTypeChoiceHelicos_, bool) error
	XsdGoPkgHasElems_RELEASEchoiceACTIONsequenceACTIONSsequenceSubmissionTypeschema_Release_TxsdSubmissionTypeSequenceActionsSequenceActionChoiceRelease_                                                                                                    func(*XsdGoPkgHasElems_RELEASEchoiceACTIONsequenceACTIONSsequenceSubmissionTypeschema_Release_TxsdSubmissionTypeSequenceActionsSequenceActionChoiceRelease_, bool) error
	XsdGoPkgHasElem_IDallXRefTypeschema_Id_XsdtString_                                                                                                                                                                                                       func(*XsdGoPkgHasElem_IDallXRefTypeschema_Id_XsdtString_, bool) error
	XsdGoPkgHasElem_SubmissionLINKSsequenceSubmissionTypeschema_SubmissionLinks_TxsdSubmissionTypeSequenceSubmissionLinks_                                                                                                                                   func(*XsdGoPkgHasElem_SubmissionLINKSsequenceSubmissionTypeschema_SubmissionLinks_TxsdSubmissionTypeSequenceSubmissionLinks_, bool) error
	TxsdPlatformTypeChoiceCapillary                                                                                                                                                                                                                          func(*TxsdPlatformTypeChoiceCapillary, bool) error
	XsdGoPkgHasElem_PIPELINEsequenceProcessingTypeschema_Pipeline_TPipelineType_                                                                                                                                                                             func(*XsdGoPkgHasElem_PIPELINEsequenceProcessingTypeschema_Pipeline_TPipelineType_, bool) error
	XsdGoPkgHasElems_InstrumentMODELsequencePACBIOSMRTchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoicePacbioSmrtSequenceInstrumentModel_                                                                                                      func(*XsdGoPkgHasElems_InstrumentMODELsequencePACBIOSMRTchoicePlatformTypeschema_InstrumentModel_TxsdPlatformTypeChoicePacbioSmrtSequenceInstrumentModel_, bool) error
	XsdGoPkgHasElem_EntrezLINKchoiceLinkTypeschema_EntrezLink_TxsdLinkTypeChoiceEntrezLink_                                                                                                                                                                  func(*XsdGoPkgHasElem_EntrezLINKchoiceLinkTypeschema_EntrezLink_TxsdLinkTypeChoiceEntrezLink_, bool) error
	XsdGoPkgHasElems_ReadCLASSsequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_ReadClass_TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceReadClass_                                                                    func(*XsdGoPkgHasElems_ReadCLASSsequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_ReadClass_TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceReadClass_, bool) error
	XsdGoPkgHasElems_ExpectedBasecallTABLEchoicesequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_ExpectedBasecallTable_TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceChoiceExpectedBasecallTable_                    func(*XsdGoPkgHasElems_ExpectedBasecallTABLEchoicesequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_ExpectedBasecallTable_TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceChoiceExpectedBasecallTable_, bool) error
	XsdGoPkgHasElem_PrimaryIDsequenceIdentifierTypeschema_PrimaryId_TNameAndLabelType_                                                                                                                                                                       func(*XsdGoPkgHasElem_PrimaryIDsequenceIdentifierTypeschema_PrimaryId_TNameAndLabelType_, bool) error
	XsdGoPkgHasElems_ExternalIDsequenceIdentifierTypeschema_ExternalId_TQualifiedNameType_                                                                                                                                                                   func(*XsdGoPkgHasElems_ExternalIDsequenceIdentifierTypeschema_ExternalId_TQualifiedNameType_, bool) error
	XsdGoPkgHasElems_SubmitterIDsequenceIdentifierTypeschema_SubmitterId_TQualifiedNameType_                                                                                                                                                                 func(*XsdGoPkgHasElems_SubmitterIDsequenceIdentifierTypeschema_SubmitterId_TQualifiedNameType_, bool) error
	XsdGoPkgHasElem_LABELallURLLINKchoiceLinkTypeschema_Label_XsdtString_                                                                                                                                                                                    func(*XsdGoPkgHasElem_LABELallURLLINKchoiceLinkTypeschema_Label_XsdtString_, bool) error
	XsdGoPkgHasElems_Ls454ChoicePlatformTypeschema_Ls454_TxsdPlatformTypeChoiceLs454_                                                                                                                                                                        func(*XsdGoPkgHasElems_Ls454ChoicePlatformTypeschema_Ls454_TxsdPlatformTypeChoiceLs454_, bool) error
	TxsdPlatformTypeChoiceCompleteGenomics                                                                                                                                                                                                                   func(*TxsdPlatformTypeChoiceCompleteGenomics, bool) error
	XsdGoPkgHasElem_CompleteGENOMICSchoicePlatformTypeschema_CompleteGenomics_TxsdPlatformTypeChoiceCompleteGenomics_                                                                                                                                        func(*XsdGoPkgHasElem_CompleteGENOMICSchoicePlatformTypeschema_CompleteGenomics_TxsdPlatformTypeChoiceCompleteGenomics_, bool) error
	XsdGoPkgHasElem_AlignmentMarksDuplicateReadsallAlignmentDirectivesTypeschema_AlignmentMarksDuplicateReads_XsdtBoolean_                                                                                                                                   func(*XsdGoPkgHasElem_AlignmentMarksDuplicateReadsallAlignmentDirectivesTypeschema_AlignmentMarksDuplicateReads_XsdtBoolean_, bool) error
	XsdGoPkgHasElems_SubmissionSet                                                                                                                                                                                                                           func(*XsdGoPkgHasElems_SubmissionSet, bool) error
	XsdGoPkgHasElem_StepINDEXsequencePIPESECTIONsequencePipelineTypeschema_StepIndex_XsdtString_                                                                                                                                                             func(*XsdGoPkgHasElem_StepINDEXsequencePIPESECTIONsequencePipelineTypeschema_StepIndex_XsdtString_, bool) error
	XsdGoPkgHasElem_ReadCLASSsequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_ReadClass_TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceReadClass_                                                                     func(*XsdGoPkgHasElem_ReadCLASSsequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_ReadClass_TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceReadClass_, bool) error
	XsdGoPkgHasElems_BaseCOORDchoicesequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_BaseCoord_XsdtInteger_                                                                                                                              func(*XsdGoPkgHasElems_BaseCOORDchoicesequenceREADSPECsequenceSPOTDecodeSPECchoiceSpotDescriptorTypeschema_BaseCoord_XsdtInteger_, bool) error
	XsdGoPkgHasElems_MODIFYchoiceTxsdSubmissionTypeSequenceActionsSequenceActionACTIONsequenceTxsdSubmissionTypeSequenceActionsACTIONSsequenceSubmissionTypeschema_Modify_TxsdSubmissionTypeSequenceActionsSequenceActionChoiceModify_                       func(*XsdGoPkgHasElems_MODIFYchoiceTxsdSubmissionTypeSequenceActionsSequenceActionACTIONsequenceTxsdSubmissionTypeSequenceActionsACTIONSsequenceSubmissionTypeschema_Modify_TxsdSubmissionTypeSequenceActionsSequenceActionChoiceModify_, bool) error
	XsdGoPkgHasElem_ACTIONsequenceACTIONSsequenceSubmissionTypeschema_Action_TxsdSubmissionTypeSequenceActionsSequenceAction_                                                                                                                                func(*XsdGoPkgHasElem_ACTIONsequenceACTIONSsequenceSubmissionTypeschema_Action_TxsdSubmissionTypeSequenceActionsSequenceAction_, bool) error
	XsdGoPkgHasElems_NOTESsequencePIPESECTIONsequencePipelineTypeschema_Notes_XsdtString_                                                                                                                                                                    func(*XsdGoPkgHasElems_NOTESsequencePIPESECTIONsequencePipelineTypeschema_Notes_XsdtString_, bool) error
	XsdGoPkgHasElem_Submission                                                                                                                                                                                                                               func(*XsdGoPkgHasElem_Submission, bool) error
	XsdGoPkgHasElems_AlignmentIncludesFailedReadsallAlignmentDirectivesTypeschema_AlignmentIncludesFailedReads_XsdtBoolean_                                                                                                                                  func(*XsdGoPkgHasElems_AlignmentIncludesFailedReadsallAlignmentDirectivesTypeschema_AlignmentIncludesFailedReads_XsdtBoolean_, bool) error
	TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpec                                                                                                                                                                                               func(*TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpec, bool) error
	XsdGoPkgHasElem_SpotDecodeSPECchoiceSpotDescriptorTypeschema_SpotDecodeSpec_TxsdSpotDescriptorTypeChoiceSpotDecodeSpec_                                                                                                                                  func(*XsdGoPkgHasElem_SpotDecodeSPECchoiceSpotDescriptorTypeschema_SpotDecodeSpec_TxsdSpotDescriptorTypeChoiceSpotDecodeSpec_, bool) error
	XsdGoPkgHasElem_QUERYchoicesequenceENTREZLINKchoiceLinkTypeschema_Query_XsdtString_                                                                                                                                                                      func(*XsdGoPkgHasElem_QUERYchoicesequenceENTREZLINKchoiceLinkTypeschema_Query_XsdtString_, bool) error
	XsdGoPkgHasElems_SubmissionLINKsequenceTxsdSubmissionTypeSequenceSubmissionLinksSUBMISSIONLINKSsequenceSubmissionTypeschema_SubmissionLink_TLinkType_                                                                                                    func(*XsdGoPkgHasElems_SubmissionLINKsequenceTxsdSubmissionTypeSequenceSubmissionLinksSUBMISSIONLINKSsequenceSubmissionTypeschema_SubmissionLink_TLinkType_, bool) error
	TxsdSubmissionTypeSequenceSubmissionLinks                                                                                                                                                                                                                func(*TxsdSubmissionTypeSequenceSubmissionLinks, bool) error
	XsdGoPkgHasElem_UNITSallAttributeTypeschema_Units_XsdtString_                                                                                                                                                                                            func(*XsdGoPkgHasElem_UNITSallAttributeTypeschema_Units_XsdtString_, bool) error
	XsdGoPkgHasElems_CompleteGENOMICSchoicePlatformTypeschema_CompleteGenomics_TxsdPlatformTypeChoiceCompleteGenomics_                                                                                                                                       func(*XsdGoPkgHasElems_CompleteGENOMICSchoicePlatformTypeschema_CompleteGenomics_TxsdPlatformTypeChoiceCompleteGenomics_, bool) error
	TxsdSubmissionTypeSequenceActionsSequenceActionChoiceModify                                                                                                                                                                                              func(*TxsdSubmissionTypeSequenceActionsSequenceActionChoiceModify, bool) error
	XsdGoPkgHasElem_UrlLINKchoiceLinkTypeschema_UrlLink_TxsdLinkTypeChoiceUrlLink_                                                                                                                                                                           func(*XsdGoPkgHasElem_UrlLINKchoiceLinkTypeschema_UrlLink_TxsdLinkTypeChoiceUrlLink_, bool) error
	TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceChoiceExpectedBasecallTableSequenceBasecall                                                                                                                                            func(*TxsdSpotDescriptorTypeChoiceSpotDecodeSpecSequenceReadSpecSequenceChoiceExpectedBasecallTableSequenceBasecall, bool) error
	XsdGoPkgHasElem_HELICOSchoicePlatformTypeschema_Helicos_TxsdPlatformTypeChoiceHelicos_                                                                                                                                                                   func(*XsdGoPkgHasElem_HELICOSchoicePlatformTypeschema_Helicos_TxsdPlatformTypeChoiceHelicos_, bool) error
}
